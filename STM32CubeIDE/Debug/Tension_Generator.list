
Tension_Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaa8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800ac80  0800ac80  0001ac80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b050  0800b050  000206ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800b050  0800b050  0001b050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b058  0800b058  000206ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b058  0800b058  0001b058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b05c  0800b05c  0001b05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006ac  20000000  0800b060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001834  200006ac  0800b70c  000206ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee0  0800b70c  00021ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY
 12 .debug_line   00045ced  00000000  00000000  000206dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0005ab21  00000000  00000000  000663c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000094c1  00000000  00000000  000c0eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f90  00000000  00000000  000ca3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010a86a  00000000  00000000  000cc340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00005290  00000000  00000000  001d6bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00029f9e  00000000  00000000  001dbe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e68f  00000000  00000000  00205dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0023446d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060a0  00000000  00000000  002344c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200006ac 	.word	0x200006ac
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ac68 	.word	0x0800ac68

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200006b0 	.word	0x200006b0
 8000214:	0800ac68 	.word	0x0800ac68

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b96e 	b.w	8000b78 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	4604      	mov	r4, r0
 80008bc:	468c      	mov	ip, r1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f040 8083 	bne.w	80009ca <__udivmoddi4+0x116>
 80008c4:	428a      	cmp	r2, r1
 80008c6:	4617      	mov	r7, r2
 80008c8:	d947      	bls.n	800095a <__udivmoddi4+0xa6>
 80008ca:	fab2 f282 	clz	r2, r2
 80008ce:	b142      	cbz	r2, 80008e2 <__udivmoddi4+0x2e>
 80008d0:	f1c2 0020 	rsb	r0, r2, #32
 80008d4:	fa24 f000 	lsr.w	r0, r4, r0
 80008d8:	4091      	lsls	r1, r2
 80008da:	4097      	lsls	r7, r2
 80008dc:	ea40 0c01 	orr.w	ip, r0, r1
 80008e0:	4094      	lsls	r4, r2
 80008e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008e6:	0c23      	lsrs	r3, r4, #16
 80008e8:	fbbc f6f8 	udiv	r6, ip, r8
 80008ec:	fa1f fe87 	uxth.w	lr, r7
 80008f0:	fb08 c116 	mls	r1, r8, r6, ip
 80008f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f8:	fb06 f10e 	mul.w	r1, r6, lr
 80008fc:	4299      	cmp	r1, r3
 80008fe:	d909      	bls.n	8000914 <__udivmoddi4+0x60>
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	f106 30ff 	add.w	r0, r6, #4294967295
 8000906:	f080 8119 	bcs.w	8000b3c <__udivmoddi4+0x288>
 800090a:	4299      	cmp	r1, r3
 800090c:	f240 8116 	bls.w	8000b3c <__udivmoddi4+0x288>
 8000910:	3e02      	subs	r6, #2
 8000912:	443b      	add	r3, r7
 8000914:	1a5b      	subs	r3, r3, r1
 8000916:	b2a4      	uxth	r4, r4
 8000918:	fbb3 f0f8 	udiv	r0, r3, r8
 800091c:	fb08 3310 	mls	r3, r8, r0, r3
 8000920:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000924:	fb00 fe0e 	mul.w	lr, r0, lr
 8000928:	45a6      	cmp	lr, r4
 800092a:	d909      	bls.n	8000940 <__udivmoddi4+0x8c>
 800092c:	193c      	adds	r4, r7, r4
 800092e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000932:	f080 8105 	bcs.w	8000b40 <__udivmoddi4+0x28c>
 8000936:	45a6      	cmp	lr, r4
 8000938:	f240 8102 	bls.w	8000b40 <__udivmoddi4+0x28c>
 800093c:	3802      	subs	r0, #2
 800093e:	443c      	add	r4, r7
 8000940:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000944:	eba4 040e 	sub.w	r4, r4, lr
 8000948:	2600      	movs	r6, #0
 800094a:	b11d      	cbz	r5, 8000954 <__udivmoddi4+0xa0>
 800094c:	40d4      	lsrs	r4, r2
 800094e:	2300      	movs	r3, #0
 8000950:	e9c5 4300 	strd	r4, r3, [r5]
 8000954:	4631      	mov	r1, r6
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	b902      	cbnz	r2, 800095e <__udivmoddi4+0xaa>
 800095c:	deff      	udf	#255	; 0xff
 800095e:	fab2 f282 	clz	r2, r2
 8000962:	2a00      	cmp	r2, #0
 8000964:	d150      	bne.n	8000a08 <__udivmoddi4+0x154>
 8000966:	1bcb      	subs	r3, r1, r7
 8000968:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800096c:	fa1f f887 	uxth.w	r8, r7
 8000970:	2601      	movs	r6, #1
 8000972:	fbb3 fcfe 	udiv	ip, r3, lr
 8000976:	0c21      	lsrs	r1, r4, #16
 8000978:	fb0e 331c 	mls	r3, lr, ip, r3
 800097c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000980:	fb08 f30c 	mul.w	r3, r8, ip
 8000984:	428b      	cmp	r3, r1
 8000986:	d907      	bls.n	8000998 <__udivmoddi4+0xe4>
 8000988:	1879      	adds	r1, r7, r1
 800098a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800098e:	d202      	bcs.n	8000996 <__udivmoddi4+0xe2>
 8000990:	428b      	cmp	r3, r1
 8000992:	f200 80e9 	bhi.w	8000b68 <__udivmoddi4+0x2b4>
 8000996:	4684      	mov	ip, r0
 8000998:	1ac9      	subs	r1, r1, r3
 800099a:	b2a3      	uxth	r3, r4
 800099c:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a0:	fb0e 1110 	mls	r1, lr, r0, r1
 80009a4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009a8:	fb08 f800 	mul.w	r8, r8, r0
 80009ac:	45a0      	cmp	r8, r4
 80009ae:	d907      	bls.n	80009c0 <__udivmoddi4+0x10c>
 80009b0:	193c      	adds	r4, r7, r4
 80009b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0x10a>
 80009b8:	45a0      	cmp	r8, r4
 80009ba:	f200 80d9 	bhi.w	8000b70 <__udivmoddi4+0x2bc>
 80009be:	4618      	mov	r0, r3
 80009c0:	eba4 0408 	sub.w	r4, r4, r8
 80009c4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c8:	e7bf      	b.n	800094a <__udivmoddi4+0x96>
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d909      	bls.n	80009e2 <__udivmoddi4+0x12e>
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	f000 80b1 	beq.w	8000b36 <__udivmoddi4+0x282>
 80009d4:	2600      	movs	r6, #0
 80009d6:	e9c5 0100 	strd	r0, r1, [r5]
 80009da:	4630      	mov	r0, r6
 80009dc:	4631      	mov	r1, r6
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	fab3 f683 	clz	r6, r3
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d14a      	bne.n	8000a80 <__udivmoddi4+0x1cc>
 80009ea:	428b      	cmp	r3, r1
 80009ec:	d302      	bcc.n	80009f4 <__udivmoddi4+0x140>
 80009ee:	4282      	cmp	r2, r0
 80009f0:	f200 80b8 	bhi.w	8000b64 <__udivmoddi4+0x2b0>
 80009f4:	1a84      	subs	r4, r0, r2
 80009f6:	eb61 0103 	sbc.w	r1, r1, r3
 80009fa:	2001      	movs	r0, #1
 80009fc:	468c      	mov	ip, r1
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d0a8      	beq.n	8000954 <__udivmoddi4+0xa0>
 8000a02:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a06:	e7a5      	b.n	8000954 <__udivmoddi4+0xa0>
 8000a08:	f1c2 0320 	rsb	r3, r2, #32
 8000a0c:	fa20 f603 	lsr.w	r6, r0, r3
 8000a10:	4097      	lsls	r7, r2
 8000a12:	fa01 f002 	lsl.w	r0, r1, r2
 8000a16:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a1a:	40d9      	lsrs	r1, r3
 8000a1c:	4330      	orrs	r0, r6
 8000a1e:	0c03      	lsrs	r3, r0, #16
 8000a20:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a24:	fa1f f887 	uxth.w	r8, r7
 8000a28:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a30:	fb06 f108 	mul.w	r1, r6, r8
 8000a34:	4299      	cmp	r1, r3
 8000a36:	fa04 f402 	lsl.w	r4, r4, r2
 8000a3a:	d909      	bls.n	8000a50 <__udivmoddi4+0x19c>
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a42:	f080 808d 	bcs.w	8000b60 <__udivmoddi4+0x2ac>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 808a 	bls.w	8000b60 <__udivmoddi4+0x2ac>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	443b      	add	r3, r7
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b281      	uxth	r1, r0
 8000a54:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a58:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a60:	fb00 f308 	mul.w	r3, r0, r8
 8000a64:	428b      	cmp	r3, r1
 8000a66:	d907      	bls.n	8000a78 <__udivmoddi4+0x1c4>
 8000a68:	1879      	adds	r1, r7, r1
 8000a6a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a6e:	d273      	bcs.n	8000b58 <__udivmoddi4+0x2a4>
 8000a70:	428b      	cmp	r3, r1
 8000a72:	d971      	bls.n	8000b58 <__udivmoddi4+0x2a4>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4439      	add	r1, r7
 8000a78:	1acb      	subs	r3, r1, r3
 8000a7a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a7e:	e778      	b.n	8000972 <__udivmoddi4+0xbe>
 8000a80:	f1c6 0c20 	rsb	ip, r6, #32
 8000a84:	fa03 f406 	lsl.w	r4, r3, r6
 8000a88:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a8c:	431c      	orrs	r4, r3
 8000a8e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a92:	fa01 f306 	lsl.w	r3, r1, r6
 8000a96:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a9a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a9e:	431f      	orrs	r7, r3
 8000aa0:	0c3b      	lsrs	r3, r7, #16
 8000aa2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aa6:	fa1f f884 	uxth.w	r8, r4
 8000aaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aae:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ab2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ab6:	458a      	cmp	sl, r1
 8000ab8:	fa02 f206 	lsl.w	r2, r2, r6
 8000abc:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x220>
 8000ac2:	1861      	adds	r1, r4, r1
 8000ac4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ac8:	d248      	bcs.n	8000b5c <__udivmoddi4+0x2a8>
 8000aca:	458a      	cmp	sl, r1
 8000acc:	d946      	bls.n	8000b5c <__udivmoddi4+0x2a8>
 8000ace:	f1a9 0902 	sub.w	r9, r9, #2
 8000ad2:	4421      	add	r1, r4
 8000ad4:	eba1 010a 	sub.w	r1, r1, sl
 8000ad8:	b2bf      	uxth	r7, r7
 8000ada:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ade:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ae2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ae6:	fb00 f808 	mul.w	r8, r0, r8
 8000aea:	45b8      	cmp	r8, r7
 8000aec:	d907      	bls.n	8000afe <__udivmoddi4+0x24a>
 8000aee:	19e7      	adds	r7, r4, r7
 8000af0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000af4:	d22e      	bcs.n	8000b54 <__udivmoddi4+0x2a0>
 8000af6:	45b8      	cmp	r8, r7
 8000af8:	d92c      	bls.n	8000b54 <__udivmoddi4+0x2a0>
 8000afa:	3802      	subs	r0, #2
 8000afc:	4427      	add	r7, r4
 8000afe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b02:	eba7 0708 	sub.w	r7, r7, r8
 8000b06:	fba0 8902 	umull	r8, r9, r0, r2
 8000b0a:	454f      	cmp	r7, r9
 8000b0c:	46c6      	mov	lr, r8
 8000b0e:	4649      	mov	r1, r9
 8000b10:	d31a      	bcc.n	8000b48 <__udivmoddi4+0x294>
 8000b12:	d017      	beq.n	8000b44 <__udivmoddi4+0x290>
 8000b14:	b15d      	cbz	r5, 8000b2e <__udivmoddi4+0x27a>
 8000b16:	ebb3 020e 	subs.w	r2, r3, lr
 8000b1a:	eb67 0701 	sbc.w	r7, r7, r1
 8000b1e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b22:	40f2      	lsrs	r2, r6
 8000b24:	ea4c 0202 	orr.w	r2, ip, r2
 8000b28:	40f7      	lsrs	r7, r6
 8000b2a:	e9c5 2700 	strd	r2, r7, [r5]
 8000b2e:	2600      	movs	r6, #0
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	462e      	mov	r6, r5
 8000b38:	4628      	mov	r0, r5
 8000b3a:	e70b      	b.n	8000954 <__udivmoddi4+0xa0>
 8000b3c:	4606      	mov	r6, r0
 8000b3e:	e6e9      	b.n	8000914 <__udivmoddi4+0x60>
 8000b40:	4618      	mov	r0, r3
 8000b42:	e6fd      	b.n	8000940 <__udivmoddi4+0x8c>
 8000b44:	4543      	cmp	r3, r8
 8000b46:	d2e5      	bcs.n	8000b14 <__udivmoddi4+0x260>
 8000b48:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b4c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b50:	3801      	subs	r0, #1
 8000b52:	e7df      	b.n	8000b14 <__udivmoddi4+0x260>
 8000b54:	4608      	mov	r0, r1
 8000b56:	e7d2      	b.n	8000afe <__udivmoddi4+0x24a>
 8000b58:	4660      	mov	r0, ip
 8000b5a:	e78d      	b.n	8000a78 <__udivmoddi4+0x1c4>
 8000b5c:	4681      	mov	r9, r0
 8000b5e:	e7b9      	b.n	8000ad4 <__udivmoddi4+0x220>
 8000b60:	4666      	mov	r6, ip
 8000b62:	e775      	b.n	8000a50 <__udivmoddi4+0x19c>
 8000b64:	4630      	mov	r0, r6
 8000b66:	e74a      	b.n	80009fe <__udivmoddi4+0x14a>
 8000b68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b6c:	4439      	add	r1, r7
 8000b6e:	e713      	b.n	8000998 <__udivmoddi4+0xe4>
 8000b70:	3802      	subs	r0, #2
 8000b72:	443c      	add	r4, r7
 8000b74:	e724      	b.n	80009c0 <__udivmoddi4+0x10c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490e      	ldr	r1, [pc, #56]	; (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0b      	ldr	r4, [pc, #44]	; (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba6:	f004 f8ed 	bl	8004d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f00a f823 	bl	800abf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bae:	f000 fdf7 	bl	80017a0 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   r0, =_estack
 8000bb4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	200006ac 	.word	0x200006ac
  ldr r2, =_sidata
 8000bc0:	0800b060 	.word	0x0800b060
  ldr r2, =_sbss
 8000bc4:	200006ac 	.word	0x200006ac
  ldr r4, =_ebss
 8000bc8:	20001ee0 	.word	0x20001ee0

08000bcc <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <BusFault_Handler>
	...

08000bd0 <ASPEP_start>:

    return crc == 0;
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000bd0:	b510      	push	{r4, lr}
  pHandle->fASPEP_HWInit ( pHandle->HWIp );
 8000bd2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 8000bd4:	4604      	mov	r4, r0
  pHandle->fASPEP_HWInit ( pHandle->HWIp );
 8000bd6:	6940      	ldr	r0, [r0, #20]
 8000bd8:	4798      	blx	r3
  pHandle->ASPEP_State = ASPEP_IDLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pHandle->ASPEP_TL_State = WAITING_PACKET;
  pHandle -> syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000be0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

  /* Configure UART to receive first packet*/
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000be4:	6960      	ldr	r0, [r4, #20]
 8000be6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000be8:	f104 011c 	add.w	r1, r4, #28
 8000bec:	2204      	movs	r2, #4
}
 8000bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000bf2:	4718      	bx	r3

08000bf4 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon (ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000bf4:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t * packet = (uint32_t*) pHandle->ctrlBuffer.buffer;
  *packet =( BEACON |
           (capabilities->version <<4) |
           (capabilities->DATA_CRC << 7) |
 8000bf6:	780b      	ldrb	r3, [r1, #0]
           (capabilities->version <<4) |
 8000bf8:	790a      	ldrb	r2, [r1, #4]
           (((uint32_t)capabilities->RX_maxSize) << 8) |
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 8000bfa:	788c      	ldrb	r4, [r1, #2]
           (((uint32_t)capabilities->RX_maxSize) << 8) |
 8000bfc:	784f      	ldrb	r7, [r1, #1]
           (((uint32_t)capabilities->TXA_maxSize) << 21));
 8000bfe:	78ce      	ldrb	r6, [r1, #3]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000c00:	4d1b      	ldr	r5, [pc, #108]	; (8000c70 <ASPEP_sendBeacon+0x7c>)
           (capabilities->DATA_CRC << 7) |
 8000c02:	01db      	lsls	r3, r3, #7
           (capabilities->version <<4) |
 8000c04:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000c08:	f043 0205 	orr.w	r2, r3, #5
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 8000c0c:	03a3      	lsls	r3, r4, #14
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000c0e:	f002 01f5 	and.w	r1, r2, #245	; 0xf5
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 8000c12:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8000c16:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
 8000c1a:	4313      	orrs	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000c1c:	5c69      	ldrb	r1, [r5, r1]
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000c1e:	4c15      	ldr	r4, [pc, #84]	; (8000c74 <ASPEP_sendBeacon+0x80>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000c20:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000c24:	404a      	eors	r2, r1
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000c26:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8000c2a:	5caa      	ldrb	r2, [r5, r2]
 8000c2c:	4051      	eors	r1, r2
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000c2e:	f3c3 6603 	ubfx	r6, r3, #24, #4
 8000c32:	5c6a      	ldrb	r2, [r5, r1]
 8000c34:	4072      	eors	r2, r6
    *headerPtr |= (uint32_t)crc << 28;
 8000c36:	5ca2      	ldrb	r2, [r4, r2]
 8000c38:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000c3c:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3e:	b672      	cpsid	i
uint8_t ASPEP_TXframeProcess (ASPEP_Handle_t *pHandle, uint8_t dataType, void *txBuffer, uint16_t bufferLength)
{
  uint8_t result = ASPEP_OK;
  ASPEP_ComputeHeaderCRC  ((uint32_t*)txBuffer); /* Insert CRC header in the packet to send */
  __disable_irq(); /*TODO: Disable High frequency task is enough */
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000c40:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000c42:	b143      	cbz	r3, 8000c56 <ASPEP_sendBeacon+0x62>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c44:	b662      	cpsie	i
        pHandle -> syncBuffer.length = bufferLength;
      }
    }
    else  if ( dataType == ASPEP_CTRL )
    {
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000c46:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000c4a:	b913      	cbnz	r3, 8000c52 <ASPEP_sendBeacon+0x5e>
        result = ASPEP_BUFFER_ERROR;
      }
      else {
        pHandle -> ctrlBuffer.state = pending;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000c52:	bcf0      	pop	{r4, r5, r6, r7}
 8000c54:	4770      	bx	lr
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000c56:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 8000c5a:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000c5c:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 8000c5e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000c62:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000c64:	2204      	movs	r2, #4
 8000c66:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000c68:	6940      	ldr	r0, [r0, #20]
}
 8000c6a:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000c6c:	4718      	bx	r3
 8000c6e:	bf00      	nop
 8000c70:	0800ac98 	.word	0x0800ac98
 8000c74:	0800ac88 	.word	0x0800ac88

08000c78 <ASPEP_sendPing>:
{
 8000c78:	b470      	push	{r4, r5, r6}
  uint8_t ipID = pHandle->liid &0xF;
 8000c7a:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
  uint8_t Nbit = pHandle->syncPacketCount & 0x1; /* Keep only LSB */
 8000c7e:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 8000c82:	014c      	lsls	r4, r1, #5
 8000c84:	f003 060f 	and.w	r6, r3, #15
 8000c88:	ea44 1301 	orr.w	r3, r4, r1, lsl #4
 8000c8c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8000c90:	f005 0401 	and.w	r4, r5, #1
 8000c94:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8000c98:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 8000c9c:	f043 0306 	orr.w	r3, r3, #6
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000ca0:	4c16      	ldr	r4, [pc, #88]	; (8000cfc <ASPEP_sendPing+0x84>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000ca2:	4d17      	ldr	r5, [pc, #92]	; (8000d00 <ASPEP_sendPing+0x88>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000ca4:	f003 01f6 	and.w	r1, r3, #246	; 0xf6
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 8000ca8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000cac:	5c61      	ldrb	r1, [r4, r1]
 8000cae:	ea81 2112 	eor.w	r1, r1, r2, lsr #8
 8000cb2:	b2c9      	uxtb	r1, r1
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000cb4:	5c63      	ldrb	r3, [r4, r1]
 8000cb6:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8000cba:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000cbc:	5ce3      	ldrb	r3, [r4, r3]
 8000cbe:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    *headerPtr |= (uint32_t)crc << 28;
 8000cc2:	5ceb      	ldrb	r3, [r5, r3]
 8000cc4:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
 8000cc8:	6202      	str	r2, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000cca:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000ccc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000cce:	b143      	cbz	r3, 8000ce2 <ASPEP_sendPing+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cd0:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000cd2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000cd6:	b913      	cbnz	r3, 8000cde <ASPEP_sendPing+0x66>
        pHandle -> ctrlBuffer.state = pending;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000cde:	bc70      	pop	{r4, r5, r6}
 8000ce0:	4770      	bx	lr
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000ce2:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 8000ce6:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000ce8:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 8000cea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000cee:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000cf4:	6940      	ldr	r0, [r0, #20]
}
 8000cf6:	bc70      	pop	{r4, r5, r6}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000cf8:	4718      	bx	r3
 8000cfa:	bf00      	nop
 8000cfc:	0800ac98 	.word	0x0800ac98
 8000d00:	0800ac88 	.word	0x0800ac88

08000d04 <ASPEP_getBuffer>:
  if (syncAsync == MCTL_SYNC)
 8000d04:	2a0a      	cmp	r2, #10
{
 8000d06:	b410      	push	{r4}
 8000d08:	4603      	mov	r3, r0
  if (syncAsync == MCTL_SYNC)
 8000d0a:	d00b      	beq.n	8000d24 <ASPEP_getBuffer+0x20>
    if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock ))
 8000d0c:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 8000d10:	2a01      	cmp	r2, #1
 8000d12:	d921      	bls.n	8000d58 <ASPEP_getBuffer+0x54>
 8000d14:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8000d18:	2a01      	cmp	r2, #1
 8000d1a:	d911      	bls.n	8000d40 <ASPEP_getBuffer+0x3c>
      result = false;
 8000d1c:	2000      	movs	r0, #0
}
 8000d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d22:	4770      	bx	lr
    if (pHandle->syncBuffer.state <= writeLock ) /* Possible values are free or writeLock*/
 8000d24:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000d28:	2a01      	cmp	r2, #1
 8000d2a:	d8f7      	bhi.n	8000d1c <ASPEP_getBuffer+0x18>
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000d2c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      pHandle->syncBuffer.state = writeLock;
 8000d2e:	2401      	movs	r4, #1
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000d30:	3204      	adds	r2, #4
 8000d32:	600a      	str	r2, [r1, #0]
      pHandle->syncBuffer.state = writeLock;
 8000d34:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 8000d38:	4620      	mov	r0, r4
}
 8000d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d3e:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d40:	6b82      	ldr	r2, [r0, #56]	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 8000d42:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000d44:	f103 0438 	add.w	r4, r3, #56	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 8000d48:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d4c:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000d4e:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000d50:	f85d 4b04 	ldr.w	r4, [sp], #4
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d54:	600a      	str	r2, [r1, #0]
}
 8000d56:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d58:	6b02      	ldr	r2, [r0, #48]	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 8000d5a:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000d5c:	f103 0430 	add.w	r4, r3, #48	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 8000d60:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d64:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000d66:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000d68:	f85d 4b04 	ldr.w	r4, [sp], #4
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d6c:	600a      	str	r2, [r1, #0]
}
 8000d6e:	4770      	bx	lr

08000d70 <ASPEP_sendPacket>:
{
 8000d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pHandle-> ASPEP_State == ASPEP_CONNECTED)
 8000d72:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 8000d76:	2c02      	cmp	r4, #2
 8000d78:	d002      	beq.n	8000d80 <ASPEP_sendPacket+0x10>
    result = ASPEP_NOT_CONNECTED;
 8000d7a:	2102      	movs	r1, #2
}
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpHeader =  (txDataLength << 4) | syncAsync;
 8000d80:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
    *header = tmpHeader;
 8000d84:	f841 4c04 	str.w	r4, [r1, #-4]
    if (pHandle->Capabilities.DATA_CRC == 1)
 8000d88:	f890 4067 	ldrb.w	r4, [r0, #103]	; 0x67
 8000d8c:	2c01      	cmp	r4, #1
    packet = packet - ASPEP_HEADER_SIZE; /* Header ues 4*8 bits on top of txBuffer*/
 8000d8e:	f1a1 0504 	sub.w	r5, r1, #4
    if (pHandle->Capabilities.DATA_CRC == 1)
 8000d92:	d106      	bne.n	8000da2 <ASPEP_sendPacket+0x32>
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8000d94:	18ac      	adds	r4, r5, r2
      *(packet+ASPEP_HEADER_SIZE+txDataLength) = (uint8_t) 0xCA; /* Dummy CRC */
 8000d96:	26ca      	movs	r6, #202	; 0xca
 8000d98:	548e      	strb	r6, [r1, r2]
      txDataLength+=ASPEP_DATACRC_SIZE;
 8000d9a:	1c97      	adds	r7, r2, #2
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8000d9c:	26fe      	movs	r6, #254	; 0xfe
      txDataLength+=ASPEP_DATACRC_SIZE;
 8000d9e:	b2ba      	uxth	r2, r7
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8000da0:	7166      	strb	r6, [r4, #5]
    if (syncAsync == MCTL_SYNC )
 8000da2:	2b0a      	cmp	r3, #10
 8000da4:	d103      	bne.n	8000dae <ASPEP_sendPacket+0x3e>
      if ( pSupHandle->MCP_PacketAvailable)
 8000da6:	7c04      	ldrb	r4, [r0, #16]
 8000da8:	b37c      	cbz	r4, 8000e0a <ASPEP_sendPacket+0x9a>
        pSupHandle-> MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000daa:	2400      	movs	r4, #0
 8000dac:	7404      	strb	r4, [r0, #16]
    uint32_t header = *headerPtr;
 8000dae:	f851 4c04 	ldr.w	r4, [r1, #-4]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000db2:	4f34      	ldr	r7, [pc, #208]	; (8000e84 <ASPEP_sendPacket+0x114>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000db4:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8000e88 <ASPEP_sendPacket+0x118>
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000db8:	b2e6      	uxtb	r6, r4
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000dba:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 8000dbe:	5dbe      	ldrb	r6, [r7, r6]
 8000dc0:	ea8e 0e06 	eor.w	lr, lr, r6
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000dc4:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8000dc8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8000dcc:	ea86 060e 	eor.w	r6, r6, lr
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 8000dd0:	3204      	adds	r2, #4
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000dd2:	5dbe      	ldrb	r6, [r7, r6]
 8000dd4:	f3c4 6703 	ubfx	r7, r4, #24, #4
 8000dd8:	407e      	eors	r6, r7
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 8000dda:	b292      	uxth	r2, r2
    *headerPtr |= (uint32_t)crc << 28;
 8000ddc:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8000de0:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
 8000de4:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000dea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000dec:	b1e9      	cbz	r1, 8000e2a <ASPEP_sendPacket+0xba>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dee:	b662      	cpsie	i
    if ( dataType == MCTL_ASYNC )
 8000df0:	2b09      	cmp	r3, #9
 8000df2:	d00d      	beq.n	8000e10 <ASPEP_sendPacket+0xa0>
    else if (dataType == MCTL_SYNC )
 8000df4:	2b0a      	cmp	r3, #10
 8000df6:	d02f      	beq.n	8000e58 <ASPEP_sendPacket+0xe8>
    else  if ( dataType == ASPEP_CTRL )
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d133      	bne.n	8000e64 <ASPEP_sendPacket+0xf4>
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000dfc:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 8000e00:	bb71      	cbnz	r1, 8000e60 <ASPEP_sendPacket+0xf0>
        pHandle -> ctrlBuffer.state = pending;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000e08:	e7b8      	b.n	8000d7c <ASPEP_sendPacket+0xc>
        result = MCTL_SYNC_NOT_EXPECTED;
 8000e0a:	2101      	movs	r1, #1
}
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (pHandle->asyncNextBuffer == NULL)
 8000e10:	e9d0 3410 	ldrd	r3, r4, [r0, #64]	; 0x40
      if ( txBuffer != (uint8_t *) pHandle->lastRequestedAsyncBuff->buffer)
 8000e14:	6819      	ldr	r1, [r3, #0]
        result = ASPEP_BUFFER_ERROR;
 8000e16:	428d      	cmp	r5, r1
 8000e18:	bf14      	ite	ne
 8000e1a:	2103      	movne	r1, #3
 8000e1c:	2100      	moveq	r1, #0
      if (pHandle->asyncNextBuffer == NULL)
 8000e1e:	b37c      	cbz	r4, 8000e80 <ASPEP_sendPacket+0x110>
      pHandle->lastRequestedAsyncBuff->state = pending;
 8000e20:	2402      	movs	r4, #2
 8000e22:	719c      	strb	r4, [r3, #6]
      pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000e24:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e26:	809a      	strh	r2, [r3, #4]
 8000e28:	e7a8      	b.n	8000d7c <ASPEP_sendPacket+0xc>
    if (dataType == MCTL_ASYNC )
 8000e2a:	2b09      	cmp	r3, #9
 8000e2c:	d022      	beq.n	8000e74 <ASPEP_sendPacket+0x104>
    else if (dataType == MCTL_SYNC )
 8000e2e:	2b0a      	cmp	r3, #10
      pHandle->syncBuffer.state = readLock;
 8000e30:	f04f 0103 	mov.w	r1, #3
      pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000e34:	bf0b      	itete	eq
 8000e36:	f100 0328 	addeq.w	r3, r0, #40	; 0x28
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000e3a:	f100 0320 	addne.w	r3, r0, #32
      pHandle->syncBuffer.state = readLock;
 8000e3e:	f880 102e 	strbeq.w	r1, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = readLock;
 8000e42:	f880 1024 	strbne.w	r1, [r0, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8000e46:	6483      	str	r3, [r0, #72]	; 0x48
 8000e48:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000e4a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000e4c:	6940      	ldr	r0, [r0, #20]
 8000e4e:	4629      	mov	r1, r5
 8000e50:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 8000e52:	2100      	movs	r1, #0
}
 8000e54:	4608      	mov	r0, r1
 8000e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( pHandle -> syncBuffer.state != writeLock ) {
 8000e58:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d003      	beq.n	8000e68 <ASPEP_sendPacket+0xf8>
        result = ASPEP_BUFFER_ERROR;
 8000e60:	2103      	movs	r1, #3
 8000e62:	e78b      	b.n	8000d7c <ASPEP_sendPacket+0xc>
  uint8_t result = ASPEP_OK;
 8000e64:	2100      	movs	r1, #0
 8000e66:	e789      	b.n	8000d7c <ASPEP_sendPacket+0xc>
        pHandle -> syncBuffer.state = pending;
 8000e68:	2302      	movs	r3, #2
        pHandle -> syncBuffer.length = bufferLength;
 8000e6a:	8582      	strh	r2, [r0, #44]	; 0x2c
        pHandle -> syncBuffer.state = pending;
 8000e6c:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
  uint8_t result = ASPEP_OK;
 8000e70:	2100      	movs	r1, #0
 8000e72:	e783      	b.n	8000d7c <ASPEP_sendPacket+0xc>
      pHandle->lastRequestedAsyncBuff->state = readLock;
 8000e74:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e76:	2103      	movs	r1, #3
 8000e78:	7199      	strb	r1, [r3, #6]
      pHandle->lockBuffer = (void *) pHandle->lastRequestedAsyncBuff;
 8000e7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e7c:	6483      	str	r3, [r0, #72]	; 0x48
 8000e7e:	e7e3      	b.n	8000e48 <ASPEP_sendPacket+0xd8>
        pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000e80:	6443      	str	r3, [r0, #68]	; 0x44
 8000e82:	e7cd      	b.n	8000e20 <ASPEP_sendPacket+0xb0>
 8000e84:	0800ac98 	.word	0x0800ac98
 8000e88:	0800ac88 	.word	0x0800ac88

08000e8c <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT (ASPEP_Handle_t *pHandle )
{
 8000e8c:	b538      	push	{r3, r4, r5, lr}
  /* First free previous readLock buffer */
  if (pHandle->ctrlBuffer.state == readLock)
 8000e8e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000e92:	2b03      	cmp	r3, #3
{
 8000e94:	4604      	mov	r4, r0
  if (pHandle->ctrlBuffer.state == readLock)
 8000e96:	d015      	beq.n	8000ec4 <ASPEP_HWDataTransmittedIT+0x38>
  {
    pHandle -> ctrlBuffer.state = free;
  }
  else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
  {
    MCTL_Buff_t * tempBuff = (MCTL_Buff_t *) pHandle -> lockBuffer;
 8000e98:	6c83      	ldr	r3, [r0, #72]	; 0x48
    tempBuff->state = free;
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	719a      	strb	r2, [r3, #6]
  }
  if ( pHandle -> syncBuffer.state == pending )
 8000e9e:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d015      	beq.n	8000ed2 <ASPEP_HWDataTransmittedIT+0x46>
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
    pHandle ->syncBuffer.state = readLock;
  }
  /* Second prepare transfer of pending buffer */
  else if ( pHandle -> ctrlBuffer.state == pending )
 8000ea6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d11d      	bne.n	8000eea <ASPEP_HWDataTransmittedIT+0x5e>
  {
    pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000eae:	f100 0120 	add.w	r1, r0, #32
    pHandle->fASPEP_send (pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000eb2:	6d83      	ldr	r3, [r0, #88]	; 0x58
    pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000eb4:	6481      	str	r1, [r0, #72]	; 0x48
    pHandle->fASPEP_send (pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	6940      	ldr	r0, [r0, #20]
 8000eba:	4798      	blx	r3
    pHandle -> ctrlBuffer.state = readLock;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    {
      pHandle->lockBuffer = NULL;
    }
    __enable_irq();
  }
}
 8000ec2:	bd38      	pop	{r3, r4, r5, pc}
  if ( pHandle -> syncBuffer.state == pending )
 8000ec4:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    pHandle -> ctrlBuffer.state = free;
 8000ec8:	2200      	movs	r2, #0
  if ( pHandle -> syncBuffer.state == pending )
 8000eca:	2b02      	cmp	r3, #2
    pHandle -> ctrlBuffer.state = free;
 8000ecc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if ( pHandle -> syncBuffer.state == pending )
 8000ed0:	d10b      	bne.n	8000eea <ASPEP_HWDataTransmittedIT+0x5e>
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000ed2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8000ed6:	64a3      	str	r3, [r4, #72]	; 0x48
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000ed8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000eda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000edc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000ede:	6960      	ldr	r0, [r4, #20]
 8000ee0:	4798      	blx	r3
    pHandle ->syncBuffer.state = readLock;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000ee8:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000eea:	b672      	cpsid	i
    if ( pHandle->asyncNextBuffer != NULL )
 8000eec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000eee:	b1d3      	cbz	r3, 8000f26 <ASPEP_HWDataTransmittedIT+0x9a>
      pHandle->asyncNextBuffer->state = readLock;
 8000ef0:	2203      	movs	r2, #3
      pHandle->lockBuffer = (void *) pHandle->asyncNextBuffer;
 8000ef2:	64a3      	str	r3, [r4, #72]	; 0x48
      pHandle->asyncNextBuffer->state = readLock;
 8000ef4:	719a      	strb	r2, [r3, #6]
      pHandle->fASPEP_send (pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000ef6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ef8:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8000efa:	889a      	ldrh	r2, [r3, #4]
 8000efc:	6819      	ldr	r1, [r3, #0]
 8000efe:	6960      	ldr	r0, [r4, #20]
 8000f00:	47a8      	blx	r5
      if ( (pHandle->asyncBufferA.state == pending ) || (pHandle->asyncBufferB.state == pending))
 8000f02:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d007      	beq.n	8000f1a <ASPEP_HWDataTransmittedIT+0x8e>
 8000f0a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d003      	beq.n	8000f1a <ASPEP_HWDataTransmittedIT+0x8e>
        pHandle->asyncNextBuffer = NULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000f16:	b662      	cpsie	i
}
 8000f18:	bd38      	pop	{r3, r4, r5, pc}
        uint32_t temp = (uint32_t) &pHandle->asyncBufferA + (uint32_t) &pHandle->asyncBufferB - (uint32_t)  pHandle->asyncNextBuffer;
 8000f1a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f1c:	0063      	lsls	r3, r4, #1
 8000f1e:	3368      	adds	r3, #104	; 0x68
 8000f20:	1a9b      	subs	r3, r3, r2
        pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp;
 8000f22:	6463      	str	r3, [r4, #68]	; 0x44
      {
 8000f24:	e7f7      	b.n	8000f16 <ASPEP_HWDataTransmittedIT+0x8a>
      pHandle->lockBuffer = NULL;
 8000f26:	64a3      	str	r3, [r4, #72]	; 0x48
 8000f28:	e7f5      	b.n	8000f16 <ASPEP_HWDataTransmittedIT+0x8a>
 8000f2a:	bf00      	nop

08000f2c <ASPEP_RXframeProcess>:

uint8_t* ASPEP_RXframeProcess (MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ASPEP_Capabilities_def MasterCapabilities;
  uint16_t packetNumber;
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);

  *packetLength = 0;
  if (pHandle->NewPacketAvailable)
 8000f2e:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);
 8000f32:	69c2      	ldr	r2, [r0, #28]
  *packetLength = 0;
 8000f34:	2500      	movs	r5, #0
{
 8000f36:	4604      	mov	r4, r0
  *packetLength = 0;
 8000f38:	800d      	strh	r5, [r1, #0]
  if (pHandle->NewPacketAvailable)
 8000f3a:	b18b      	cbz	r3, 8000f60 <ASPEP_RXframeProcess+0x34>
  {
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
    switch (pHandle->ASPEP_State)
 8000f3c:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
 8000f40:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
    switch (pHandle->ASPEP_State)
 8000f44:	2e01      	cmp	r6, #1
 8000f46:	d050      	beq.n	8000fea <ASPEP_RXframeProcess+0xbe>
 8000f48:	2e02      	cmp	r6, #2
 8000f4a:	d03a      	beq.n	8000fc2 <ASPEP_RXframeProcess+0x96>
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	d030      	beq.n	8000fb2 <ASPEP_RXframeProcess+0x86>
      }

      break;
    }
    /* The valid received packet is now safely consumes, we are ready to receive a new packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000f50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f52:	6960      	ldr	r0, [r4, #20]
 8000f54:	2204      	movs	r2, #4
 8000f56:	f104 011c 	add.w	r1, r4, #28
 8000f5a:	4798      	blx	r3
  else
  {
    /* Nothing to do, no response is due to the master */
  }
  return result;
}
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (pHandle->badPacketFlag > ASPEP_OK )
 8000f60:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 8000f64:	2d00      	cmp	r5, #0
 8000f66:	d0f9      	beq.n	8000f5c <ASPEP_RXframeProcess+0x30>
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 8000f68:	042b      	lsls	r3, r5, #16
 8000f6a:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000f6e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8000f72:	4a7a      	ldr	r2, [pc, #488]	; (800115c <ASPEP_RXframeProcess+0x230>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000f74:	497a      	ldr	r1, [pc, #488]	; (8001160 <ASPEP_RXframeProcess+0x234>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000f76:	f083 0309 	eor.w	r3, r3, #9
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000f7a:	5cd3      	ldrb	r3, [r2, r3]
 8000f7c:	ea83 4315 	eor.w	r3, r3, r5, lsr #16
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 8000f80:	f045 050f 	orr.w	r5, r5, #15
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000f84:	5cd3      	ldrb	r3, [r2, r3]
    *headerPtr |= (uint32_t)crc << 28;
 8000f86:	5ccb      	ldrb	r3, [r1, r3]
 8000f88:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
 8000f8c:	6205      	str	r5, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8e:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000f90:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000f92:	b3cb      	cbz	r3, 8001008 <ASPEP_RXframeProcess+0xdc>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f94:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000f96:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000f9a:	b913      	cbnz	r3, 8000fa2 <ASPEP_RXframeProcess+0x76>
        pHandle -> ctrlBuffer.state = pending;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    pHandle->badPacketFlag = ASPEP_OK;
 8000fa2:	2500      	movs	r5, #0
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 8000fa4:	6960      	ldr	r0, [r4, #20]
 8000fa6:	6d23      	ldr	r3, [r4, #80]	; 0x50
    pHandle->badPacketFlag = ASPEP_OK;
 8000fa8:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 8000fac:	4798      	blx	r3
}
 8000fae:	4628      	mov	r0, r5
 8000fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (pHandle->rxPacketType == beacon )
 8000fb2:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000fb6:	2b05      	cmp	r3, #5
 8000fb8:	d04b      	beq.n	8001052 <ASPEP_RXframeProcess+0x126>
      else if (pHandle->rxPacketType == ping)
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d069      	beq.n	8001092 <ASPEP_RXframeProcess+0x166>
  uint8_t* result = NULL;
 8000fbe:	4635      	mov	r5, r6
 8000fc0:	e7c6      	b.n	8000f50 <ASPEP_RXframeProcess+0x24>
      if (pHandle->rxPacketType == beacon )
 8000fc2:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d03a      	beq.n	8001040 <ASPEP_RXframeProcess+0x114>
      else if (pHandle->rxPacketType == ping )
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d068      	beq.n	80010a0 <ASPEP_RXframeProcess+0x174>
      else if (pHandle->rxPacketType == data )
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	d1be      	bne.n	8000f50 <ASPEP_RXframeProcess+0x24>
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000fd2:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
          *packetLength = pHandle->rxLength;
 8000fd6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
          result = pHandle->rxBuffer;
 8000fda:	6985      	ldr	r5, [r0, #24]
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000fdc:	3301      	adds	r3, #1
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000fde:	2001      	movs	r0, #1
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000fe0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000fe4:	7420      	strb	r0, [r4, #16]
          *packetLength = pHandle->rxLength;
 8000fe6:	800a      	strh	r2, [r1, #0]
          result = pHandle->rxBuffer;
 8000fe8:	e7b2      	b.n	8000f50 <ASPEP_RXframeProcess+0x24>
      if (pHandle->rxPacketType == beacon )
 8000fea:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	d016      	beq.n	8001020 <ASPEP_RXframeProcess+0xf4>
      else if (pHandle->rxPacketType == ping)
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d1ac      	bne.n	8000f50 <ASPEP_RXframeProcess+0x24>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 8000ff6:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	f7ff fe3c 	bl	8000c78 <ASPEP_sendPing>
        pHandle->ASPEP_State = ASPEP_CONNECTED;
 8001000:	2302      	movs	r3, #2
 8001002:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001006:	e7a3      	b.n	8000f50 <ASPEP_RXframeProcess+0x24>
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001008:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 800100c:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 800100e:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 8001010:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8001014:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8001016:	2204      	movs	r2, #4
 8001018:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800101a:	6940      	ldr	r0, [r0, #20]
 800101c:	4798      	blx	r3
 800101e:	e7c0      	b.n	8000fa2 <ASPEP_RXframeProcess+0x76>
  MasterCapabilities->DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8001020:	7f01      	ldrb	r1, [r0, #28]
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8001022:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8001026:	ebb3 1fd1 	cmp.w	r3, r1, lsr #7
 800102a:	d059      	beq.n	80010e0 <ASPEP_RXframeProcess+0x1b4>
          pHandle->ASPEP_State = ASPEP_IDLE;
 800102c:	2300      	movs	r3, #0
 800102e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        ASPEP_sendBeacon (pHandle, &pHandle->Capabilities);
 8001032:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8001036:	4620      	mov	r0, r4
 8001038:	f7ff fddc 	bl	8000bf4 <ASPEP_sendBeacon>
  uint8_t* result = NULL;
 800103c:	2500      	movs	r5, #0
 800103e:	e787      	b.n	8000f50 <ASPEP_RXframeProcess+0x24>
  MasterCapabilities->DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8001040:	7f01      	ldrb	r1, [r0, #28]
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8001042:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8001046:	ebb3 1fd1 	cmp.w	r3, r1, lsr #7
 800104a:	d02e      	beq.n	80010aa <ASPEP_RXframeProcess+0x17e>
 800104c:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8001050:	e7ef      	b.n	8001032 <ASPEP_RXframeProcess+0x106>
  MasterCapabilities->DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8001052:	7f01      	ldrb	r1, [r0, #28]
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8001054:	f890 7067 	ldrb.w	r7, [r0, #103]	; 0x67
 8001058:	ebb7 1fd1 	cmp.w	r7, r1, lsr #7
  MasterCapabilities->DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 800105c:	ea4f 15d1 	mov.w	r5, r1, lsr #7
  MasterCapabilities->TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 8001060:	f3c2 3086 	ubfx	r0, r2, #14, #7
  MasterCapabilities->TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 8001064:	f3c2 5346 	ubfx	r3, r2, #21, #7
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8001068:	d054      	beq.n	8001114 <ASPEP_RXframeProcess+0x1e8>
 800106a:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 800106e:	f894 c06a 	ldrb.w	ip, [r4, #106]	; 0x6a
          pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001072:	42bd      	cmp	r5, r7
 8001074:	bf28      	it	cs
 8001076:	463d      	movcs	r5, r7
          pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001078:	4281      	cmp	r1, r0
 800107a:	bf28      	it	cs
 800107c:	4601      	movcs	r1, r0
          pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800107e:	4563      	cmp	r3, ip
 8001080:	bf28      	it	cs
 8001082:	4663      	movcs	r3, ip
          pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001084:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
          pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001088:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
          pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800108c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8001090:	e7cf      	b.n	8001032 <ASPEP_RXframeProcess+0x106>
        ASPEP_sendPing (pHandle,ASPEP_PING_RESET,packetNumber);
 8001092:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001096:	4631      	mov	r1, r6
 8001098:	f7ff fdee 	bl	8000c78 <ASPEP_sendPing>
  uint8_t* result = NULL;
 800109c:	4635      	mov	r5, r6
 800109e:	e757      	b.n	8000f50 <ASPEP_RXframeProcess+0x24>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 80010a0:	7f42      	ldrb	r2, [r0, #29]
 80010a2:	2101      	movs	r1, #1
 80010a4:	f7ff fde8 	bl	8000c78 <ASPEP_sendPing>
 80010a8:	e752      	b.n	8000f50 <ASPEP_RXframeProcess+0x24>
  MasterCapabilities->RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80010aa:	7f43      	ldrb	r3, [r0, #29]
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 80010ac:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 80010b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010b4:	4299      	cmp	r1, r3
 80010b6:	d3c9      	bcc.n	800104c <ASPEP_RXframeProcess+0x120>
      (MasterCapabilities->RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 80010b8:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 80010bc:	f3c2 3386 	ubfx	r3, r2, #14, #7
 80010c0:	4299      	cmp	r1, r3
 80010c2:	d1c3      	bne.n	800104c <ASPEP_RXframeProcess+0x120>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities->TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 80010c4:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
 80010c8:	f3c2 5346 	ubfx	r3, r2, #21, #7
 80010cc:	4299      	cmp	r1, r3
 80010ce:	d1bd      	bne.n	800104c <ASPEP_RXframeProcess+0x120>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities->TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 80010d0:	f890 506b 	ldrb.w	r5, [r0, #107]	; 0x6b
 80010d4:	f3c2 1302 	ubfx	r3, r2, #4, #3
          pHandle->ASPEP_State = ASPEP_IDLE;
 80010d8:	1aeb      	subs	r3, r5, r3
 80010da:	425d      	negs	r5, r3
 80010dc:	415d      	adcs	r5, r3
 80010de:	e7b5      	b.n	800104c <ASPEP_RXframeProcess+0x120>
  MasterCapabilities->RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80010e0:	7f43      	ldrb	r3, [r0, #29]
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 80010e2:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 80010e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d39e      	bcc.n	800102c <ASPEP_RXframeProcess+0x100>
      (MasterCapabilities->RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 80010ee:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 80010f2:	f3c2 3386 	ubfx	r3, r2, #14, #7
 80010f6:	4299      	cmp	r1, r3
 80010f8:	d198      	bne.n	800102c <ASPEP_RXframeProcess+0x100>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities->TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 80010fa:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
 80010fe:	f3c2 5346 	ubfx	r3, r2, #21, #7
 8001102:	4299      	cmp	r1, r3
 8001104:	d192      	bne.n	800102c <ASPEP_RXframeProcess+0x100>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities->TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8001106:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
 800110a:	f3c2 1302 	ubfx	r3, r2, #4, #3
 800110e:	4299      	cmp	r1, r3
 8001110:	d18c      	bne.n	800102c <ASPEP_RXframeProcess+0x100>
 8001112:	e78e      	b.n	8001032 <ASPEP_RXframeProcess+0x106>
  MasterCapabilities->RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8001114:	7f61      	ldrb	r1, [r4, #29]
      (MasterCapabilities->RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8001116:	f894 6068 	ldrb.w	r6, [r4, #104]	; 0x68
  if ((MasterCapabilities->DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 800111a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800111e:	42b1      	cmp	r1, r6
 8001120:	d8a3      	bhi.n	800106a <ASPEP_RXframeProcess+0x13e>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities->TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8001122:	f894 1069 	ldrb.w	r1, [r4, #105]	; 0x69
 8001126:	f894 c06a 	ldrb.w	ip, [r4, #106]	; 0x6a
      (MasterCapabilities->RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 800112a:	4288      	cmp	r0, r1
 800112c:	d1a1      	bne.n	8001072 <ASPEP_RXframeProcess+0x146>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities->TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 800112e:	4563      	cmp	r3, ip
 8001130:	d19f      	bne.n	8001072 <ASPEP_RXframeProcess+0x146>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities->TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8001132:	f894 e06b 	ldrb.w	lr, [r4, #107]	; 0x6b
 8001136:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800113a:	4596      	cmp	lr, r2
 800113c:	d199      	bne.n	8001072 <ASPEP_RXframeProcess+0x146>
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 800113e:	1c4b      	adds	r3, r1, #1
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8001140:	1c72      	adds	r2, r6, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8001142:	015b      	lsls	r3, r3, #5
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8001144:	0152      	lsls	r2, r2, #5
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 8001146:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 800114a:	2101      	movs	r1, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 800114c:	81a3      	strh	r3, [r4, #12]
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 800114e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 8001152:	f8a4 c00e 	strh.w	ip, [r4, #14]
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001156:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 800115a:	e76a      	b.n	8001032 <ASPEP_RXframeProcess+0x106>
 800115c:	0800ac98 	.word	0x0800ac98
 8001160:	0800ac88 	.word	0x0800ac88

08001164 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT (ASPEP_Handle_t *pHandle)
{
 8001164:	b538      	push	{r3, r4, r5, lr}
/* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.*/
/* This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_RXframeProcess*/
/* If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.*/
  switch (pHandle->ASPEP_TL_State) {
 8001166:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 800116a:	4604      	mov	r4, r0
  switch (pHandle->ASPEP_TL_State) {
 800116c:	b13b      	cbz	r3, 800117e <ASPEP_HWDataReceivedIT+0x1a>
 800116e:	2b01      	cmp	r3, #1
 8001170:	d104      	bne.n	800117c <ASPEP_HWDataReceivedIT+0x18>
    {
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
    }
    break;
  case WAITING_PAYLOAD:
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001172:	2200      	movs	r2, #0
    // Payload received,
    pHandle->NewPacketAvailable = true;
 8001174:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001178:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    /*The receiver is not reconfigure right now on purpose to avoid race condition when the packet will be processed in ASPEP_RXframeProcess */
    break;
  }
}
 800117c:	bd38      	pop	{r3, r4, r5, pc}
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 800117e:	69c2      	ldr	r2, [r0, #28]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8001180:	491f      	ldr	r1, [pc, #124]	; (8001200 <ASPEP_HWDataReceivedIT+0x9c>)
 8001182:	b2d3      	uxtb	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8001184:	5ccb      	ldrb	r3, [r1, r3]
 8001186:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 800118a:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 800118c:	5ccb      	ldrb	r3, [r1, r3]
 800118e:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8001192:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 24) & 0xff) ];
 8001194:	5ccb      	ldrb	r3, [r1, r3]
 8001196:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 800119a:	5ccb      	ldrb	r3, [r1, r3]
 800119c:	b963      	cbnz	r3, 80011b8 <ASPEP_HWDataReceivedIT+0x54>
       pHandle->rxPacketType = (ASPEP_packetType_def) (pHandle->rxHeader[0] & ID_MASK);
 800119e:	7f03      	ldrb	r3, [r0, #28]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	2b06      	cmp	r3, #6
 80011a6:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
       switch (pHandle->rxPacketType) {
 80011aa:	d809      	bhi.n	80011c0 <ASPEP_HWDataReceivedIT+0x5c>
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d81e      	bhi.n	80011ee <ASPEP_HWDataReceivedIT+0x8a>
         pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 80011b0:	2301      	movs	r3, #1
 80011b2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 80011b6:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 80011b8:	2304      	movs	r3, #4
 80011ba:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 80011be:	bd38      	pop	{r3, r4, r5, pc}
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d1f5      	bne.n	80011b0 <ASPEP_HWDataReceivedIT+0x4c>
         pHandle->rxLength = (*((uint32_t *)pHandle->rxHeader) & 0x0001FFF0) >> 4;
 80011c4:	f3c2 120c 	ubfx	r2, r2, #4, #13
 80011c8:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
         if (pHandle->rxLength == 0) /* data packet with length 0 is a valid packet*/
 80011cc:	b17a      	cbz	r2, 80011ee <ASPEP_HWDataReceivedIT+0x8a>
         else if (pHandle->rxLength <= pHandle->maxRXPayload)
 80011ce:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d30f      	bcc.n	80011f6 <ASPEP_HWDataReceivedIT+0x92>
           pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer , pHandle->rxLength+ASPEP_DATACRC_SIZE*pHandle->Capabilities.DATA_CRC); /* need to read + 2 bytes CRC*/
 80011d6:	f890 5067 	ldrb.w	r5, [r0, #103]	; 0x67
 80011da:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80011dc:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 80011e0:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
 80011e4:	4798      	blx	r3
           pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 80011ec:	bd38      	pop	{r3, r4, r5, pc}
         pHandle->NewPacketAvailable = true;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
           pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 80011f6:	2302      	movs	r3, #2
 80011f8:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 80011fc:	bd38      	pop	{r3, r4, r5, pc}
 80011fe:	bf00      	nop
 8001200:	0800ac98 	.word	0x0800ac98

08001204 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset (ASPEP_Handle_t *pHandle)
{ /* We must reset the RX state machine to be sure to not be in Waiting packet state */
 8001204:	4601      	mov	r1, r0
  /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
  /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
  pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001206:	2300      	movs	r3, #0
 8001208:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 800120c:	311c      	adds	r1, #28
 800120e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001210:	6940      	ldr	r0, [r0, #20]
 8001212:	2204      	movs	r2, #4
 8001214:	4718      	bx	r3
 8001216:	bf00      	nop

08001218 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800121a:	2100      	movs	r1, #0
void SystemClock_Config(void) {
 800121c:	b0a7      	sub	sp, #156	; 0x9c
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800121e:	460c      	mov	r4, r1
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001220:	2238      	movs	r2, #56	; 0x38
 8001222:	a806      	add	r0, sp, #24
 8001224:	f009 fd18 	bl	800ac58 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001228:	4621      	mov	r1, r4
 800122a:	2244      	movs	r2, #68	; 0x44
 800122c:	a815      	add	r0, sp, #84	; 0x54
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800122e:	e9cd 4400 	strd	r4, r4, [sp]
 8001232:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001236:	9404      	str	r4, [sp, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001238:	f009 fd0e 	bl	800ac58 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800123c:	4620      	mov	r0, r4
 800123e:	f005 fb5f 	bl	8006900 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001242:	2601      	movs	r6, #1
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001246:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124a:	2403      	movs	r4, #3
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
	RCC_OscInitStruct.PLL.PLLN = 85;
 800124c:	2155      	movs	r1, #85	; 0x55
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800124e:	2208      	movs	r2, #8
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001250:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001252:	e9cd 6706 	strd	r6, r7, [sp, #24]
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001256:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800125a:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001260:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001262:	940e      	str	r4, [sp, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001264:	f005 fbd2 	bl	8006a0c <HAL_RCC_OscConfig>
 8001268:	bb00      	cbnz	r0, 80012ac <SystemClock_Config+0x94>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800126a:	240f      	movs	r4, #15
 800126c:	2503      	movs	r5, #3
 800126e:	e9cd 4500 	strd	r4, r5, [sp]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001272:	2300      	movs	r3, #0
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001274:	2400      	movs	r4, #0
 8001276:	2500      	movs	r5, #0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001278:	4668      	mov	r0, sp
 800127a:	2104      	movs	r1, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800127c:	e9cd 4502 	strd	r4, r5, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001280:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001282:	f005 fe47 	bl	8006f14 <HAL_RCC_ClockConfig>
 8001286:	2800      	cmp	r0, #0
 8001288:	d133      	bne.n	80012f2 <SystemClock_Config+0xda>
		Error_Handler();
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 800128a:	f249 0402 	movw	r4, #36866	; 0x9002
			| RCC_PERIPHCLK_ADC12 | RCC_PERIPHCLK_FDCAN;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800128e:	2100      	movs	r1, #0
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001290:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001294:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001298:	a815      	add	r0, sp, #84	; 0x54
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 800129a:	9415      	str	r4, [sp, #84]	; 0x54
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800129c:	9117      	str	r1, [sp, #92]	; 0x5c
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800129e:	9221      	str	r2, [sp, #132]	; 0x84
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80012a0:	9324      	str	r3, [sp, #144]	; 0x90
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80012a2:	f005 ff73 	bl	800718c <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	b990      	cbnz	r0, 80012ce <SystemClock_Config+0xb6>
		Error_Handler();
	}
}
 80012a8:	b027      	add	sp, #156	; 0x9c
 80012aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	MC_StopMotor1();
 80012ac:	f000 fef0 	bl	8002090 <MC_StopMotor1>
	if (errorID == nominal)
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <SystemClock_Config+0xfc>)
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	b90a      	cbnz	r2, 80012ba <SystemClock_Config+0xa2>
		errorID = other;
 80012b6:	2205      	movs	r2, #5
 80012b8:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <SystemClock_Config+0x100>)
	HAL_TIM_Base_Stop_IT(&htim2);
 80012bc:	4817      	ldr	r0, [pc, #92]	; (800131c <SystemClock_Config+0x104>)
	motor_ready = false;
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80012c2:	f006 fa2b 	bl	800771c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 80012c6:	4816      	ldr	r0, [pc, #88]	; (8001320 <SystemClock_Config+0x108>)
 80012c8:	f006 fa28 	bl	800771c <HAL_TIM_Base_Stop_IT>
//  __disable_irq();
//  while (1)
//  {
//  }
	/* USER CODE END Error_Handler_Debug */
}
 80012cc:	e7cd      	b.n	800126a <SystemClock_Config+0x52>
	MC_StopMotor1();
 80012ce:	f000 fedf 	bl	8002090 <MC_StopMotor1>
	if (errorID == nominal)
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <SystemClock_Config+0xfc>)
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	b90a      	cbnz	r2, 80012dc <SystemClock_Config+0xc4>
		errorID = other;
 80012d8:	2205      	movs	r2, #5
 80012da:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <SystemClock_Config+0x100>)
	HAL_TIM_Base_Stop_IT(&htim2);
 80012de:	480f      	ldr	r0, [pc, #60]	; (800131c <SystemClock_Config+0x104>)
	motor_ready = false;
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80012e4:	f006 fa1a 	bl	800771c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <SystemClock_Config+0x108>)
 80012ea:	f006 fa17 	bl	800771c <HAL_TIM_Base_Stop_IT>
}
 80012ee:	b027      	add	sp, #156	; 0x9c
 80012f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	MC_StopMotor1();
 80012f2:	f000 fecd 	bl	8002090 <MC_StopMotor1>
	if (errorID == nominal)
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <SystemClock_Config+0xfc>)
 80012f8:	781a      	ldrb	r2, [r3, #0]
 80012fa:	b90a      	cbnz	r2, 8001300 <SystemClock_Config+0xe8>
		errorID = other;
 80012fc:	2205      	movs	r2, #5
 80012fe:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SystemClock_Config+0x100>)
	HAL_TIM_Base_Stop_IT(&htim2);
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <SystemClock_Config+0x104>)
	motor_ready = false;
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001308:	f006 fa08 	bl	800771c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <SystemClock_Config+0x108>)
 800130e:	f006 fa05 	bl	800771c <HAL_TIM_Base_Stop_IT>
}
 8001312:	e7ba      	b.n	800128a <SystemClock_Config+0x72>
 8001314:	200006c8 	.word	0x200006c8
 8001318:	200006ca 	.word	0x200006ca
 800131c:	20000b14 	.word	0x20000b14
 8001320:	20000898 	.word	0x20000898

08001324 <HAL_FDCAN_RxFifo0Callback>:
	if (hfdcan->Instance == hfdcan1.Instance) {
 8001324:	4b6e      	ldr	r3, [pc, #440]	; (80014e0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001326:	6802      	ldr	r2, [r0, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d000      	beq.n	8001330 <HAL_FDCAN_RxFifo0Callback+0xc>
 800132e:	4770      	bx	lr
		if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8001330:	07c9      	lsls	r1, r1, #31
 8001332:	d5fc      	bpl.n	800132e <HAL_FDCAN_RxFifo0Callback+0xa>
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001334:	b510      	push	{r4, lr}
 8001336:	ed2d 8b02 	vpush	{d8}
 800133a:	b08c      	sub	sp, #48	; 0x30
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader,
 800133c:	466b      	mov	r3, sp
 800133e:	aa02      	add	r2, sp, #8
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	f004 ff8b 	bl	800625c <HAL_FDCAN_GetRxMessage>
 8001346:	2800      	cmp	r0, #0
 8001348:	d145      	bne.n	80013d6 <HAL_FDCAN_RxFifo0Callback+0xb2>
			switch (RxHeader.Identifier) {
 800134a:	9b02      	ldr	r3, [sp, #8]
 800134c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001350:	d20b      	bcs.n	800136a <HAL_FDCAN_RxFifo0Callback+0x46>
 8001352:	2bff      	cmp	r3, #255	; 0xff
 8001354:	d91d      	bls.n	8001392 <HAL_FDCAN_RxFifo0Callback+0x6e>
 8001356:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800135a:	4413      	add	r3, r2
 800135c:	2b02      	cmp	r3, #2
 800135e:	f200 808c 	bhi.w	800147a <HAL_FDCAN_RxFifo0Callback+0x156>
 8001362:	e8df f003 	tbb	[pc, r3]
 8001366:	1d22      	.short	0x1d22
 8001368:	1a          	.byte	0x1a
 8001369:	00          	.byte	0x00
 800136a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800136e:	d043      	beq.n	80013f8 <HAL_FDCAN_RxFifo0Callback+0xd4>
 8001370:	f240 7277 	movw	r2, #1911	; 0x777
 8001374:	4293      	cmp	r3, r2
 8001376:	d10c      	bne.n	8001392 <HAL_FDCAN_RxFifo0Callback+0x6e>
	MC_StopMotor1();
 8001378:	f000 fe8a 	bl	8002090 <MC_StopMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	4859      	ldr	r0, [pc, #356]	; (80014e4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	f005 fa31 	bl	80067e8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001386:	4858      	ldr	r0, [pc, #352]	; (80014e8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001388:	f006 f9c8 	bl	800771c <HAL_TIM_Base_Stop_IT>
				motor_ready = false;
 800138c:	4b57      	ldr	r3, [pc, #348]	; (80014ec <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
}
 8001392:	b00c      	add	sp, #48	; 0x30
 8001394:	ecbd 8b02 	vpop	{d8}
 8001398:	bd10      	pop	{r4, pc}
				memcpy(&refTension, &RxData[0], 4);
 800139a:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800139c:	9a00      	ldr	r2, [sp, #0]
 800139e:	601a      	str	r2, [r3, #0]
				memcpy(&requested_response_type, &RxData[0], 1);
 80013a0:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80013a2:	f89d 2000 	ldrb.w	r2, [sp]
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	e7e6      	b.n	8001378 <HAL_FDCAN_RxFifo0Callback+0x54>
				if (RxData[0]) {
 80013aa:	f89d 4000 	ldrb.w	r4, [sp]
 80013ae:	2c00      	cmp	r4, #0
 80013b0:	d051      	beq.n	8001456 <HAL_FDCAN_RxFifo0Callback+0x132>
					if (motor_ready) {
 80013b2:	4b4e      	ldr	r3, [pc, #312]	; (80014ec <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0eb      	beq.n	8001392 <HAL_FDCAN_RxFifo0Callback+0x6e>
	MC_StartMotor1();
 80013ba:	f000 fe63 	bl	8002084 <MC_StartMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	4848      	ldr	r0, [pc, #288]	; (80014e4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80013c2:	2140      	movs	r1, #64	; 0x40
 80013c4:	f005 fa10 	bl	80067e8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim2);
 80013c8:	4847      	ldr	r0, [pc, #284]	; (80014e8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80013ca:	f006 f96d 	bl	80076a8 <HAL_TIM_Base_Start_IT>
						heartbeat = true;
 80013ce:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	e7dd      	b.n	8001392 <HAL_FDCAN_RxFifo0Callback+0x6e>
	MC_StopMotor1();
 80013d6:	f000 fe5b 	bl	8002090 <MC_StopMotor1>
	if (errorID == nominal)
 80013da:	4b48      	ldr	r3, [pc, #288]	; (80014fc <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	b90a      	cbnz	r2, 80013e4 <HAL_FDCAN_RxFifo0Callback+0xc0>
		errorID = other;
 80013e0:	2205      	movs	r2, #5
 80013e2:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 80013e4:	4b41      	ldr	r3, [pc, #260]	; (80014ec <HAL_FDCAN_RxFifo0Callback+0x1c8>)
	HAL_TIM_Base_Stop_IT(&htim2);
 80013e6:	4840      	ldr	r0, [pc, #256]	; (80014e8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
	motor_ready = false;
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80013ec:	f006 f996 	bl	800771c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 80013f0:	4843      	ldr	r0, [pc, #268]	; (8001500 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80013f2:	f006 f993 	bl	800771c <HAL_TIM_Base_Stop_IT>
}
 80013f6:	e7a8      	b.n	800134a <HAL_FDCAN_RxFifo0Callback+0x26>
				refPosition = encPosition - refTension/(drum_diameter/2 * spring_constant);
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80013fa:	ed9d 6a00 	vldr	s12, [sp]
 80013fe:	edd3 6a00 	vldr	s13, [r3]
 8001402:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001504 <HAL_FDCAN_RxFifo0Callback+0x1e0>
 8001406:	eddf 8a40 	vldr	s17, [pc, #256]	; 8001508 <HAL_FDCAN_RxFifo0Callback+0x1e4>
				val1 = refPosition;
 800140a:	4b40      	ldr	r3, [pc, #256]	; (800150c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
				refPosition = encPosition - refTension/(drum_diameter/2 * spring_constant);
 800140c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8001410:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8001414:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8001418:	eef0 7a46 	vmov.f32	s15, s12
				if (plim < refPosition) {
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	bfb8      	it	lt
 8001422:	eef0 7a47 	vmovlt.f32	s15, s14
 8001426:	eef4 7ae8 	vcmpe.f32	s15, s17
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	bf8c      	ite	hi
 8001430:	eeb0 8a68 	vmovhi.f32	s16, s17
 8001434:	eeb0 8a67 	vmovls.f32	s16, s15
				val1 = refPosition;
 8001438:	ed83 8a00 	vstr	s16, [r3]
				val2 = MC_GetCurrentPosition1();
 800143c:	f000 fe48 	bl	80020d0 <MC_GetCurrentPosition1>
 8001440:	4b33      	ldr	r3, [pc, #204]	; (8001510 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 8001442:	ed83 0a00 	vstr	s0, [r3]
				if (MC_GetSTMStateMotor1() == RUN) {
 8001446:	f000 fe3d 	bl	80020c4 <MC_GetSTMStateMotor1>
 800144a:	2806      	cmp	r0, #6
 800144c:	d00e      	beq.n	800146c <HAL_FDCAN_RxFifo0Callback+0x148>
				heartbeat = true;
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
				break;
 8001454:	e79d      	b.n	8001392 <HAL_FDCAN_RxFifo0Callback+0x6e>
	MC_StopMotor1();
 8001456:	f000 fe1b 	bl	8002090 <MC_StopMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 800145a:	4822      	ldr	r0, [pc, #136]	; (80014e4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800145c:	4622      	mov	r2, r4
 800145e:	2140      	movs	r1, #64	; 0x40
 8001460:	f005 f9c2 	bl	80067e8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001464:	4820      	ldr	r0, [pc, #128]	; (80014e8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001466:	f006 f959 	bl	800771c <HAL_TIM_Base_Stop_IT>
}
 800146a:	e792      	b.n	8001392 <HAL_FDCAN_RxFifo0Callback+0x6e>
					MC_ProgramPositionCommandMotor1(refPosition, 0);
 800146c:	eef0 0a68 	vmov.f32	s1, s17
 8001470:	eeb0 0a48 	vmov.f32	s0, s16
 8001474:	f000 fe12 	bl	800209c <MC_ProgramPositionCommandMotor1>
 8001478:	e7e9      	b.n	800144e <HAL_FDCAN_RxFifo0Callback+0x12a>
	MC_StopMotor1();
 800147a:	f000 fe09 	bl	8002090 <MC_StopMotor1>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2140      	movs	r1, #64	; 0x40
 8001482:	4818      	ldr	r0, [pc, #96]	; (80014e4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001484:	f005 f9b0 	bl	80067e8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001488:	4817      	ldr	r0, [pc, #92]	; (80014e8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800148a:	f006 f947 	bl	800771c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 800148e:	481c      	ldr	r0, [pc, #112]	; (8001500 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8001490:	f006 f944 	bl	800771c <HAL_TIM_Base_Stop_IT>
	if (MC_GetSTMStateMotor1() == FAULT_NOW
 8001494:	f000 fe16 	bl	80020c4 <MC_GetSTMStateMotor1>
 8001498:	280a      	cmp	r0, #10
 800149a:	d00a      	beq.n	80014b2 <HAL_FDCAN_RxFifo0Callback+0x18e>
			|| MC_GetSTMStateMotor1() == FAULT_OVER) {
 800149c:	f000 fe12 	bl	80020c4 <MC_GetSTMStateMotor1>
 80014a0:	280b      	cmp	r0, #11
 80014a2:	d006      	beq.n	80014b2 <HAL_FDCAN_RxFifo0Callback+0x18e>
			errorID = nominal;
 80014a4:	4915      	ldr	r1, [pc, #84]	; (80014fc <HAL_FDCAN_RxFifo0Callback+0x1d8>)
			motor_ready = true;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_FDCAN_RxFifo0Callback+0x1c8>)
			errorID = nominal;
 80014a8:	2000      	movs	r0, #0
			motor_ready = true;
 80014aa:	2201      	movs	r2, #1
			errorID = nominal;
 80014ac:	7008      	strb	r0, [r1, #0]
			motor_ready = true;
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e76f      	b.n	8001392 <HAL_FDCAN_RxFifo0Callback+0x6e>
		if (MC_AcknowledgeFaultMotor1()) {
 80014b2:	f000 fe01 	bl	80020b8 <MC_AcknowledgeFaultMotor1>
 80014b6:	2800      	cmp	r0, #0
 80014b8:	d1f4      	bne.n	80014a4 <HAL_FDCAN_RxFifo0Callback+0x180>
			errorID = fault_yet;
 80014ba:	4c10      	ldr	r4, [pc, #64]	; (80014fc <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80014bc:	2303      	movs	r3, #3
 80014be:	7023      	strb	r3, [r4, #0]
	MC_StopMotor1();
 80014c0:	f000 fde6 	bl	8002090 <MC_StopMotor1>
	if (errorID == nominal)
 80014c4:	7823      	ldrb	r3, [r4, #0]
 80014c6:	b90b      	cbnz	r3, 80014cc <HAL_FDCAN_RxFifo0Callback+0x1a8>
		errorID = other;
 80014c8:	2305      	movs	r3, #5
 80014ca:	7023      	strb	r3, [r4, #0]
	motor_ready = false;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <HAL_FDCAN_RxFifo0Callback+0x1c8>)
	HAL_TIM_Base_Stop_IT(&htim2);
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
	motor_ready = false;
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80014d4:	f006 f922 	bl	800771c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80014da:	f006 f91f 	bl	800771c <HAL_TIM_Base_Stop_IT>
}
 80014de:	e758      	b.n	8001392 <HAL_FDCAN_RxFifo0Callback+0x6e>
 80014e0:	20000a40 	.word	0x20000a40
 80014e4:	48000800 	.word	0x48000800
 80014e8:	20000b14 	.word	0x20000b14
 80014ec:	200006ca 	.word	0x200006ca
 80014f0:	200006cc 	.word	0x200006cc
 80014f4:	200006d0 	.word	0x200006d0
 80014f8:	200006c9 	.word	0x200006c9
 80014fc:	200006c8 	.word	0x200006c8
 8001500:	20000898 	.word	0x20000898
 8001504:	c0c90fdb 	.word	0xc0c90fdb
 8001508:	00000000 	.word	0x00000000
 800150c:	20000bf0 	.word	0x20000bf0
 8001510:	20000a10 	.word	0x20000a10

08001514 <Response>:
void Response(){
 8001514:	b530      	push	{r4, r5, lr}
 8001516:	ed2d 8b02 	vpush	{d8}
	if (requested_response_type & 0b00000001) {
 800151a:	4b73      	ldr	r3, [pc, #460]	; (80016e8 <Response+0x1d4>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	f013 0401 	ands.w	r4, r3, #1
void Response(){
 8001522:	b091      	sub	sp, #68	; 0x44
	if (requested_response_type & 0b00000001) {
 8001524:	d142      	bne.n	80015ac <Response+0x98>
	} else if(requested_response_type & 0b00000010){
 8001526:	f013 0502 	ands.w	r5, r3, #2
 800152a:	d106      	bne.n	800153a <Response+0x26>
	} else if(requested_response_type & 0b00000100){
 800152c:	075b      	lsls	r3, r3, #29
 800152e:	f100 8088 	bmi.w	8001642 <Response+0x12e>
}
 8001532:	b011      	add	sp, #68	; 0x44
 8001534:	ecbd 8b02 	vpop	{d8}
 8001538:	bd30      	pop	{r4, r5, pc}
		float current = MC_GetIqdMotor1().q * S16A_TO_FLOAT;
 800153a:	f000 fdb5 	bl	80020a8 <MC_GetIqdMotor1>
 800153e:	b200      	sxth	r0, r0
 8001540:	f7ff f8e6 	bl	8000710 <__aeabi_i2d>
 8001544:	2200      	movs	r2, #0
 8001546:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800154a:	f7fe fe65 	bl	8000218 <__aeabi_dmul>
 800154e:	f7ff f949 	bl	80007e4 <__aeabi_d2f>
		uint8_t send_data[8] = {0,0,0,0,0,0,0,0};
 8001552:	4a66      	ldr	r2, [pc, #408]	; (80016ec <Response+0x1d8>)
	TxHeader.MessageMarker = 0;
 8001554:	940e      	str	r4, [sp, #56]	; 0x38
		float current = MC_GetIqdMotor1().q * S16A_TO_FLOAT;
 8001556:	4603      	mov	r3, r0
	TxHeader.Identifier = id;								// Tx CAN ID
 8001558:	f240 1405 	movw	r4, #261	; 0x105
		uint8_t send_data[8] = {0,0,0,0,0,0,0,0};
 800155c:	e892 0003 	ldmia.w	r2, {r0, r1}
	TxHeader.Identifier = id;								// Tx CAN ID
 8001560:	2500      	movs	r5, #0
 8001562:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001566:	2400      	movs	r4, #0
 8001568:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 800156c:	e9cd 4508 	strd	r4, r5, [sp, #32]
		uint8_t send_data[8] = {0,0,0,0,0,0,0,0};
 8001570:	aa04      	add	r2, sp, #16
	TxHeader.Identifier = id;								// Tx CAN ID
 8001572:	2400      	movs	r4, #0
 8001574:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
		uint8_t send_data[8] = {0,0,0,0,0,0,0,0};
 8001578:	e882 0003 	stmia.w	r2, {r0, r1}
	TxHeader.Identifier = id;								// Tx CAN ID
 800157c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK) {
 8001580:	485b      	ldr	r0, [pc, #364]	; (80016f0 <Response+0x1dc>)
		memcpy(send_data, &current, 4);
 8001582:	9304      	str	r3, [sp, #16]
	TxHeader.Identifier = id;								// Tx CAN ID
 8001584:	2400      	movs	r4, #0
 8001586:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK) {
 800158a:	a906      	add	r1, sp, #24
	TxHeader.Identifier = id;								// Tx CAN ID
 800158c:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK) {
 8001590:	f004 fdfc 	bl	800618c <HAL_FDCAN_AddMessageToTxFifoQ>
 8001594:	2800      	cmp	r0, #0
 8001596:	d143      	bne.n	8001620 <Response+0x10c>
	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
 8001598:	4c55      	ldr	r4, [pc, #340]	; (80016f0 <Response+0x1dc>)
 800159a:	4620      	mov	r0, r4
 800159c:	f004 fedc 	bl	8006358 <HAL_FDCAN_GetTxFifoFreeLevel>
 80015a0:	2803      	cmp	r0, #3
 80015a2:	d1fa      	bne.n	800159a <Response+0x86>
}
 80015a4:	b011      	add	sp, #68	; 0x44
 80015a6:	ecbd 8b02 	vpop	{d8}
 80015aa:	bd30      	pop	{r4, r5, pc}
		float tension = (MC_GetCurrentPosition1()-MC_GetTargetPosition1())*drum_diameter/2*spring_constant;
 80015ac:	f000 fd90 	bl	80020d0 <MC_GetCurrentPosition1>
 80015b0:	eeb0 8a40 	vmov.f32	s16, s0
 80015b4:	f000 fd92 	bl	80020dc <MC_GetTargetPosition1>
		uint8_t send_data[8] = {0,0,0,0,0,0,0,0};
 80015b8:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <Response+0x1d8>)
		float tension = (MC_GetCurrentPosition1()-MC_GetTargetPosition1())*drum_diameter/2*spring_constant;
 80015ba:	ee38 0a40 	vsub.f32	s0, s16, s0
		uint8_t send_data[8] = {0,0,0,0,0,0,0,0};
 80015be:	e893 0003 	ldmia.w	r3, {r0, r1}
	TxHeader.Identifier = id;								// Tx CAN ID
 80015c2:	f44f 7482 	mov.w	r4, #260	; 0x104
 80015c6:	2500      	movs	r5, #0
 80015c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
		float tension = (MC_GetCurrentPosition1()-MC_GetTargetPosition1())*drum_diameter/2*spring_constant;
 80015cc:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
	TxHeader.Identifier = id;								// Tx CAN ID
 80015d0:	2400      	movs	r4, #0
 80015d2:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 80015d6:	e9cd 4508 	strd	r4, r5, [sp, #32]
		memcpy(send_data, &tension, 4);
 80015da:	ee20 0a08 	vmul.f32	s0, s0, s16
	TxHeader.Identifier = id;								// Tx CAN ID
 80015de:	2400      	movs	r4, #0
 80015e0:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
		uint8_t send_data[8] = {0,0,0,0,0,0,0,0};
 80015e4:	aa04      	add	r2, sp, #16
 80015e6:	e882 0003 	stmia.w	r2, {r0, r1}
	TxHeader.Identifier = id;								// Tx CAN ID
 80015ea:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
	TxHeader.MessageMarker = 0;
 80015ee:	2300      	movs	r3, #0
	TxHeader.Identifier = id;								// Tx CAN ID
 80015f0:	2400      	movs	r4, #0
 80015f2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK) {
 80015f6:	483e      	ldr	r0, [pc, #248]	; (80016f0 <Response+0x1dc>)
		memcpy(send_data, &tension, 4);
 80015f8:	ed8d 0a04 	vstr	s0, [sp, #16]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK) {
 80015fc:	a906      	add	r1, sp, #24
	TxHeader.Identifier = id;								// Tx CAN ID
 80015fe:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
	TxHeader.MessageMarker = 0;
 8001602:	930e      	str	r3, [sp, #56]	; 0x38
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK) {
 8001604:	f004 fdc2 	bl	800618c <HAL_FDCAN_AddMessageToTxFifoQ>
 8001608:	2800      	cmp	r0, #0
 800160a:	d14a      	bne.n	80016a2 <Response+0x18e>
	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
 800160c:	4c38      	ldr	r4, [pc, #224]	; (80016f0 <Response+0x1dc>)
 800160e:	4620      	mov	r0, r4
 8001610:	f004 fea2 	bl	8006358 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001614:	2803      	cmp	r0, #3
 8001616:	d1fa      	bne.n	800160e <Response+0xfa>
}
 8001618:	b011      	add	sp, #68	; 0x44
 800161a:	ecbd 8b02 	vpop	{d8}
 800161e:	bd30      	pop	{r4, r5, pc}
	MC_StopMotor1();
 8001620:	f000 fd36 	bl	8002090 <MC_StopMotor1>
	if (errorID == nominal)
 8001624:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <Response+0x1e0>)
 8001626:	781a      	ldrb	r2, [r3, #0]
 8001628:	b90a      	cbnz	r2, 800162e <Response+0x11a>
		errorID = other;
 800162a:	2205      	movs	r2, #5
 800162c:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 800162e:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <Response+0x1e4>)
	HAL_TIM_Base_Stop_IT(&htim2);
 8001630:	4832      	ldr	r0, [pc, #200]	; (80016fc <Response+0x1e8>)
	motor_ready = false;
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001636:	f006 f871 	bl	800771c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 800163a:	4831      	ldr	r0, [pc, #196]	; (8001700 <Response+0x1ec>)
 800163c:	f006 f86e 	bl	800771c <HAL_TIM_Base_Stop_IT>
}
 8001640:	e7aa      	b.n	8001598 <Response+0x84>
		float pos = MC_GetCurrentPosition1();
 8001642:	f000 fd45 	bl	80020d0 <MC_GetCurrentPosition1>
		uint8_t send_data[8] = {0,0,0,0,0,0,0,0};
 8001646:	4b29      	ldr	r3, [pc, #164]	; (80016ec <Response+0x1d8>)
	TxHeader.MessageMarker = 0;
 8001648:	950e      	str	r5, [sp, #56]	; 0x38
		uint8_t send_data[8] = {0,0,0,0,0,0,0,0};
 800164a:	e893 0003 	ldmia.w	r3, {r0, r1}
	TxHeader.Identifier = id;								// Tx CAN ID
 800164e:	f44f 7483 	mov.w	r4, #262	; 0x106
 8001652:	2500      	movs	r5, #0
 8001654:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001658:	2400      	movs	r4, #0
 800165a:	f44f 2500 	mov.w	r5, #524288	; 0x80000
 800165e:	e9cd 4508 	strd	r4, r5, [sp, #32]
		float pos = MC_GetCurrentPosition1();
 8001662:	ed8d 0a01 	vstr	s0, [sp, #4]
	TxHeader.Identifier = id;								// Tx CAN ID
 8001666:	2400      	movs	r4, #0
 8001668:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
		uint8_t send_data[8] = {0,0,0,0,0,0,0,0};
 800166c:	aa04      	add	r2, sp, #16
 800166e:	e882 0003 	stmia.w	r2, {r0, r1}
	TxHeader.Identifier = id;								// Tx CAN ID
 8001672:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
		memcpy(send_data, &pos, 4);
 8001676:	9b01      	ldr	r3, [sp, #4]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK) {
 8001678:	481d      	ldr	r0, [pc, #116]	; (80016f0 <Response+0x1dc>)
		memcpy(send_data, &pos, 4);
 800167a:	9304      	str	r3, [sp, #16]
	TxHeader.Identifier = id;								// Tx CAN ID
 800167c:	2400      	movs	r4, #0
 800167e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK) {
 8001682:	a906      	add	r1, sp, #24
	TxHeader.Identifier = id;								// Tx CAN ID
 8001684:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK) {
 8001688:	f004 fd80 	bl	800618c <HAL_FDCAN_AddMessageToTxFifoQ>
 800168c:	b9d0      	cbnz	r0, 80016c4 <Response+0x1b0>
	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
 800168e:	4c18      	ldr	r4, [pc, #96]	; (80016f0 <Response+0x1dc>)
 8001690:	4620      	mov	r0, r4
 8001692:	f004 fe61 	bl	8006358 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001696:	2803      	cmp	r0, #3
 8001698:	d1fa      	bne.n	8001690 <Response+0x17c>
}
 800169a:	b011      	add	sp, #68	; 0x44
 800169c:	ecbd 8b02 	vpop	{d8}
 80016a0:	bd30      	pop	{r4, r5, pc}
	MC_StopMotor1();
 80016a2:	f000 fcf5 	bl	8002090 <MC_StopMotor1>
	if (errorID == nominal)
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <Response+0x1e0>)
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	b90a      	cbnz	r2, 80016b0 <Response+0x19c>
		errorID = other;
 80016ac:	2205      	movs	r2, #5
 80016ae:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <Response+0x1e4>)
	HAL_TIM_Base_Stop_IT(&htim2);
 80016b2:	4812      	ldr	r0, [pc, #72]	; (80016fc <Response+0x1e8>)
	motor_ready = false;
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80016b8:	f006 f830 	bl	800771c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <Response+0x1ec>)
 80016be:	f006 f82d 	bl	800771c <HAL_TIM_Base_Stop_IT>
}
 80016c2:	e7a3      	b.n	800160c <Response+0xf8>
	MC_StopMotor1();
 80016c4:	f000 fce4 	bl	8002090 <MC_StopMotor1>
	if (errorID == nominal)
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <Response+0x1e0>)
 80016ca:	781a      	ldrb	r2, [r3, #0]
 80016cc:	b90a      	cbnz	r2, 80016d2 <Response+0x1be>
		errorID = other;
 80016ce:	2205      	movs	r2, #5
 80016d0:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <Response+0x1e4>)
	HAL_TIM_Base_Stop_IT(&htim2);
 80016d4:	4809      	ldr	r0, [pc, #36]	; (80016fc <Response+0x1e8>)
	motor_ready = false;
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80016da:	f006 f81f 	bl	800771c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 80016de:	4808      	ldr	r0, [pc, #32]	; (8001700 <Response+0x1ec>)
 80016e0:	f006 f81c 	bl	800771c <HAL_TIM_Base_Stop_IT>
}
 80016e4:	e7d3      	b.n	800168e <Response+0x17a>
 80016e6:	bf00      	nop
 80016e8:	200006d0 	.word	0x200006d0
 80016ec:	0800ac80 	.word	0x0800ac80
 80016f0:	20000a40 	.word	0x20000a40
 80016f4:	200006c8 	.word	0x200006c8
 80016f8:	200006ca 	.word	0x200006ca
 80016fc:	20000b14 	.word	0x20000b14
 8001700:	20000898 	.word	0x20000898

08001704 <HAL_TIM_PeriodElapsedCallback>:
	if (htim == &htim2) {
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001706:	4298      	cmp	r0, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001708:	b570      	push	{r4, r5, r6, lr}
 800170a:	4604      	mov	r4, r0
	if (htim == &htim2) {
 800170c:	d003      	beq.n	8001716 <HAL_TIM_PeriodElapsedCallback+0x12>
	if (htim == &htim3) {
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001710:	429c      	cmp	r4, r3
 8001712:	d008      	beq.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x22>
}
 8001714:	bd70      	pop	{r4, r5, r6, pc}
		if (heartbeat == false) {
 8001716:	4d11      	ldr	r5, [pc, #68]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001718:	782b      	ldrb	r3, [r5, #0]
 800171a:	b143      	cbz	r3, 800172e <HAL_TIM_PeriodElapsedCallback+0x2a>
		heartbeat = false;
 800171c:	2300      	movs	r3, #0
 800171e:	702b      	strb	r3, [r5, #0]
	if (htim == &htim3) {
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001722:	429c      	cmp	r4, r3
 8001724:	d1f6      	bne.n	8001714 <HAL_TIM_PeriodElapsedCallback+0x10>
}
 8001726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Response();
 800172a:	f7ff bef3 	b.w	8001514 <Response>
			errorID = CAN_lost;
 800172e:	4e0c      	ldr	r6, [pc, #48]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001730:	2301      	movs	r3, #1
 8001732:	7033      	strb	r3, [r6, #0]
	MC_StopMotor1();
 8001734:	f000 fcac 	bl	8002090 <MC_StopMotor1>
	if (errorID == nominal)
 8001738:	7833      	ldrb	r3, [r6, #0]
 800173a:	b90b      	cbnz	r3, 8001740 <HAL_TIM_PeriodElapsedCallback+0x3c>
		errorID = other;
 800173c:	2305      	movs	r3, #5
 800173e:	7033      	strb	r3, [r6, #0]
	motor_ready = false;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x60>)
	HAL_TIM_Base_Stop_IT(&htim2);
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x50>)
	motor_ready = false;
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001748:	f005 ffe8 	bl	800771c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800174e:	f005 ffe5 	bl	800771c <HAL_TIM_Base_Stop_IT>
}
 8001752:	e7e3      	b.n	800171c <HAL_TIM_PeriodElapsedCallback+0x18>
 8001754:	20000b14 	.word	0x20000b14
 8001758:	20000898 	.word	0x20000898
 800175c:	200006c9 	.word	0x200006c9
 8001760:	200006c8 	.word	0x200006c8
 8001764:	200006ca 	.word	0x200006ca

08001768 <Error_Handler>:
void Error_Handler(void) {
 8001768:	b508      	push	{r3, lr}
	MC_StopMotor1();
 800176a:	f000 fc91 	bl	8002090 <MC_StopMotor1>
	if (errorID == nominal)
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <Error_Handler+0x28>)
 8001770:	781a      	ldrb	r2, [r3, #0]
 8001772:	b90a      	cbnz	r2, 8001778 <Error_Handler+0x10>
		errorID = other;
 8001774:	2205      	movs	r2, #5
 8001776:	701a      	strb	r2, [r3, #0]
	motor_ready = false;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <Error_Handler+0x2c>)
	HAL_TIM_Base_Stop_IT(&htim2);
 800177a:	4807      	ldr	r0, [pc, #28]	; (8001798 <Error_Handler+0x30>)
	motor_ready = false;
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001780:	f005 ffcc 	bl	800771c <HAL_TIM_Base_Stop_IT>
}
 8001784:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Stop_IT(&htim3);
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <Error_Handler+0x34>)
 800178a:	f005 bfc7 	b.w	800771c <HAL_TIM_Base_Stop_IT>
 800178e:	bf00      	nop
 8001790:	200006c8 	.word	0x200006c8
 8001794:	200006ca 	.word	0x200006ca
 8001798:	20000b14 	.word	0x20000b14
 800179c:	20000898 	.word	0x20000898

080017a0 <main>:
int main(void) {
 80017a0:	b500      	push	{lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017a2:	2400      	movs	r4, #0
int main(void) {
 80017a4:	b0ad      	sub	sp, #180	; 0xb4
	HAL_Init();
 80017a6:	f003 fb1d 	bl	8004de4 <HAL_Init>
	SystemClock_Config();
 80017aa:	f7ff fd35 	bl	8001218 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017ae:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 80017b2:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	4dc0      	ldr	r5, [pc, #768]	; (8001ab8 <main+0x318>)
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017b8:	9420      	str	r4, [sp, #128]	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin | STATUS_Pin, GPIO_PIN_RESET);
 80017bc:	48bf      	ldr	r0, [pc, #764]	; (8001abc <main+0x31c>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	64eb      	str	r3, [r5, #76]	; 0x4c
 80017c4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80017ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80017d0:	f043 0320 	orr.w	r3, r3, #32
 80017d4:	64eb      	str	r3, [r5, #76]	; 0x4c
 80017d6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	9303      	str	r3, [sp, #12]
 80017de:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	64eb      	str	r3, [r5, #76]	; 0x4c
 80017e8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	9304      	str	r3, [sp, #16]
 80017f0:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	64eb      	str	r3, [r5, #76]	; 0x4c
 80017fa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	9305      	str	r3, [sp, #20]
	HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin | STATUS_Pin, GPIO_PIN_RESET);
 8001802:	4622      	mov	r2, r4
 8001804:	f244 0140 	movw	r1, #16448	; 0x4040
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001808:	9b05      	ldr	r3, [sp, #20]
	HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin | STATUS_Pin, GPIO_PIN_RESET);
 800180a:	f004 ffed 	bl	80067e8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = CAN_TERM_Pin | STATUS_Pin;
 800180e:	f244 0240 	movw	r2, #16448	; 0x4040
 8001812:	2301      	movs	r3, #1
 8001814:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001818:	48a8      	ldr	r0, [pc, #672]	; (8001abc <main+0x31c>)
	GPIO_InitStruct.Pin = CAN_TERM_Pin | STATUS_Pin;
 800181a:	2201      	movs	r2, #1
 800181c:	2300      	movs	r3, #0
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181e:	a91c      	add	r1, sp, #112	; 0x70
	GPIO_InitStruct.Pin = CAN_TERM_Pin | STATUS_Pin;
 8001820:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	f004 feec 	bl	8006600 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001828:	4ba5      	ldr	r3, [pc, #660]	; (8001ac0 <main+0x320>)
	HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800182a:	48a4      	ldr	r0, [pc, #656]	; (8001abc <main+0x31c>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	941e      	str	r4, [sp, #120]	; 0x78
	GPIO_InitStruct.Pin = Start_Stop_Pin;
 800182e:	f44f 6280 	mov.w	r2, #1024	; 0x400
	HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001832:	a91c      	add	r1, sp, #112	; 0x70
	GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001834:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001838:	f004 fee2 	bl	8006600 <HAL_GPIO_Init>
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800183c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	64ab      	str	r3, [r5, #72]	; 0x48
 8001844:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_DMA2_CLK_ENABLE();
 800184e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	64ab      	str	r3, [r5, #72]	; 0x48
 8001856:	6cab      	ldr	r3, [r5, #72]	; 0x48
	ADC_MultiModeTypeDef multimode = { 0 };
 8001858:	940e      	str	r4, [sp, #56]	; 0x38
	__HAL_RCC_DMA2_CLK_ENABLE();
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	9301      	str	r3, [sp, #4]
	ADC_InjectionConfTypeDef sConfigInjected = { 0 };
 8001860:	4621      	mov	r1, r4
 8001862:	223c      	movs	r2, #60	; 0x3c
 8001864:	a81c      	add	r0, sp, #112	; 0x70
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001866:	9b01      	ldr	r3, [sp, #4]
	ADC_MultiModeTypeDef multimode = { 0 };
 8001868:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
	ADC_InjectionConfTypeDef sConfigInjected = { 0 };
 800186c:	f009 f9f4 	bl	800ac58 <memset>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001870:	4621      	mov	r1, r4
 8001872:	2220      	movs	r2, #32
 8001874:	a814      	add	r0, sp, #80	; 0x50
 8001876:	f009 f9ef 	bl	800ac58 <memset>
	hadc1.Instance = ADC1;
 800187a:	4892      	ldr	r0, [pc, #584]	; (8001ac4 <main+0x324>)
 800187c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
	hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001880:	f44f 4500 	mov.w	r5, #32768	; 0x8000
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001884:	2101      	movs	r1, #1
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001886:	2204      	movs	r2, #4
	hadc1.Instance = ADC1;
 8001888:	6003      	str	r3, [r0, #0]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800188a:	8384      	strh	r4, [r0, #28]
	hadc1.Init.NbrOfConversion = 2;
 800188c:	2302      	movs	r3, #2
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800188e:	e9c0 4401 	strd	r4, r4, [r0, #4]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001892:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001896:	e9c0 1205 	strd	r1, r2, [r0, #20]
	hadc1.Init.GainCompensation = 0;
 800189a:	6104      	str	r4, [r0, #16]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800189c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80018a0:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018a4:	63c4      	str	r4, [r0, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 80018a6:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
	hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80018aa:	60c5      	str	r5, [r0, #12]
	hadc1.Init.NbrOfConversion = 2;
 80018ac:	6203      	str	r3, [r0, #32]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80018ae:	f003 fabb 	bl	8004e28 <HAL_ADC_Init>
 80018b2:	2800      	cmp	r0, #0
 80018b4:	f040 835a 	bne.w	8001f6c <main+0x7cc>
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80018b8:	2300      	movs	r3, #0
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80018ba:	4882      	ldr	r0, [pc, #520]	; (8001ac4 <main+0x324>)
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80018bc:	930e      	str	r3, [sp, #56]	; 0x38
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80018be:	a90e      	add	r1, sp, #56	; 0x38
 80018c0:	f004 f926 	bl	8005b10 <HAL_ADCEx_MultiModeConfigChannel>
 80018c4:	2800      	cmp	r0, #0
 80018c6:	f040 83cf 	bne.w	8002068 <main+0x8c8>
	sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80018ca:	487f      	ldr	r0, [pc, #508]	; (8001ac8 <main+0x328>)
 80018cc:	2109      	movs	r1, #9
 80018ce:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 80018d2:	2001      	movs	r0, #1
 80018d4:	217f      	movs	r1, #127	; 0x7f
	sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80018d6:	2300      	movs	r3, #0
	sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80018d8:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
	sConfigInjected.InjectedNbrOfConversion = 2;
 80018dc:	2202      	movs	r2, #2
	sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80018de:	2004      	movs	r0, #4
 80018e0:	2100      	movs	r1, #0
 80018e2:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
	sConfigInjected.InjectedNbrOfConversion = 2;
 80018e6:	9224      	str	r2, [sp, #144]	; 0x90
	sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80018e8:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	sConfigInjected.QueueInjectedContext = DISABLE;
 80018ec:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
	sConfigInjected.InjecOversamplingMode = DISABLE;
 80018f0:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
	sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80018f4:	2284      	movs	r2, #132	; 0x84
 80018f6:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 80018f8:	4872      	ldr	r0, [pc, #456]	; (8001ac4 <main+0x324>)
 80018fa:	a91c      	add	r1, sp, #112	; 0x70
	sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80018fc:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8001900:	f003 fe02 	bl	8005508 <HAL_ADCEx_InjectedConfigChannel>
 8001904:	2800      	cmp	r0, #0
 8001906:	f040 83ac 	bne.w	8002062 <main+0x8c2>
	sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800190a:	a367      	add	r3, pc, #412	; (adr r3, 8001aa8 <main+0x308>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8001910:	486c      	ldr	r0, [pc, #432]	; (8001ac4 <main+0x324>)
 8001912:	a91c      	add	r1, sp, #112	; 0x70
	sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001914:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8001918:	f003 fdf6 	bl	8005508 <HAL_ADCEx_InjectedConfigChannel>
 800191c:	2800      	cmp	r0, #0
 800191e:	f040 839d 	bne.w	800205c <main+0x8bc>
	sConfig.Channel = ADC_CHANNEL_1;
 8001922:	4a6a      	ldr	r2, [pc, #424]	; (8001acc <main+0x32c>)
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001924:	4867      	ldr	r0, [pc, #412]	; (8001ac4 <main+0x324>)
	sConfig.Channel = ADC_CHANNEL_1;
 8001926:	2306      	movs	r3, #6
 8001928:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800192c:	2204      	movs	r2, #4
 800192e:	237f      	movs	r3, #127	; 0x7f
 8001930:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001934:	a914      	add	r1, sp, #80	; 0x50
	sConfig.Channel = ADC_CHANNEL_1;
 8001936:	2204      	movs	r2, #4
 8001938:	2300      	movs	r3, #0
 800193a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800193e:	f003 fb79 	bl	8005034 <HAL_ADC_ConfigChannel>
 8001942:	2800      	cmp	r0, #0
 8001944:	f040 8387 	bne.w	8002056 <main+0x8b6>
	sConfig.Channel = ADC_CHANNEL_5;
 8001948:	a359      	add	r3, pc, #356	; (adr r3, 8001ab0 <main+0x310>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800194e:	485d      	ldr	r0, [pc, #372]	; (8001ac4 <main+0x324>)
 8001950:	a914      	add	r1, sp, #80	; 0x50
	sConfig.Channel = ADC_CHANNEL_5;
 8001952:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001956:	f003 fb6d 	bl	8005034 <HAL_ADC_ConfigChannel>
 800195a:	2800      	cmp	r0, #0
 800195c:	f040 8378 	bne.w	8002050 <main+0x8b0>
	ADC_InjectionConfTypeDef sConfigInjected = { 0 };
 8001960:	223c      	movs	r2, #60	; 0x3c
 8001962:	2100      	movs	r1, #0
 8001964:	a81c      	add	r0, sp, #112	; 0x70
 8001966:	f009 f977 	bl	800ac58 <memset>
	hadc2.Instance = ADC2;
 800196a:	4859      	ldr	r0, [pc, #356]	; (8001ad0 <main+0x330>)
 800196c:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <main+0x334>)
 800196e:	6003      	str	r3, [r0, #0]
	hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001974:	2204      	movs	r2, #4
	hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001976:	60c3      	str	r3, [r0, #12]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001978:	2300      	movs	r3, #0
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800197a:	6182      	str	r2, [r0, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800197c:	8383      	strh	r3, [r0, #28]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800197e:	2201      	movs	r2, #1
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001980:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hadc2.Init.GainCompensation = 0;
 8001984:	6103      	str	r3, [r0, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001986:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800198a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800198e:	63c3      	str	r3, [r0, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8001990:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001994:	6142      	str	r2, [r0, #20]
	hadc2.Init.NbrOfConversion = 1;
 8001996:	6202      	str	r2, [r0, #32]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001998:	f003 fa46 	bl	8004e28 <HAL_ADC_Init>
 800199c:	2800      	cmp	r0, #0
 800199e:	f040 8354 	bne.w	800204a <main+0x8aa>
	sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80019a2:	4849      	ldr	r0, [pc, #292]	; (8001ac8 <main+0x328>)
 80019a4:	2109      	movs	r1, #9
 80019a6:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 80019aa:	2001      	movs	r0, #1
 80019ac:	217f      	movs	r1, #127	; 0x7f
	sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80019ae:	2300      	movs	r3, #0
	sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80019b0:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
	sConfigInjected.InjectedNbrOfConversion = 2;
 80019b4:	2202      	movs	r2, #2
	sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80019b6:	2004      	movs	r0, #4
 80019b8:	2100      	movs	r1, #0
 80019ba:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
	sConfigInjected.InjectedNbrOfConversion = 2;
 80019be:	9224      	str	r2, [sp, #144]	; 0x90
	sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80019c0:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	sConfigInjected.QueueInjectedContext = DISABLE;
 80019c4:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
	sConfigInjected.InjecOversamplingMode = DISABLE;
 80019c8:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
	sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80019cc:	2284      	movs	r2, #132	; 0x84
 80019ce:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 80019d0:	483f      	ldr	r0, [pc, #252]	; (8001ad0 <main+0x330>)
 80019d2:	a91c      	add	r1, sp, #112	; 0x70
	sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80019d4:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
	if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 80019d8:	f003 fd96 	bl	8005508 <HAL_ADCEx_InjectedConfigChannel>
 80019dc:	2800      	cmp	r0, #0
 80019de:	f040 8331 	bne.w	8002044 <main+0x8a4>
	sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 80019e2:	4a3d      	ldr	r2, [pc, #244]	; (8001ad8 <main+0x338>)
	if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 80019e4:	483a      	ldr	r0, [pc, #232]	; (8001ad0 <main+0x330>)
	sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 80019e6:	f240 130f 	movw	r3, #271	; 0x10f
	if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 80019ea:	a91c      	add	r1, sp, #112	; 0x70
	sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 80019ec:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 80019f0:	f003 fd8a 	bl	8005508 <HAL_ADCEx_InjectedConfigChannel>
 80019f4:	2800      	cmp	r0, #0
 80019f6:	f040 8322 	bne.w	800203e <main+0x89e>
	hcomp1.Instance = COMP1;
 80019fa:	4838      	ldr	r0, [pc, #224]	; (8001adc <main+0x33c>)
 80019fc:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <main+0x340>)
 80019fe:	6003      	str	r3, [r0, #0]
	hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001a00:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001a04:	2300      	movs	r3, #0
 8001a06:	e9c0 3201 	strd	r3, r2, [r0, #4]
	hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001a0a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001a0e:	e9c0 3305 	strd	r3, r3, [r0, #20]
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 8001a12:	f004 f8e3 	bl	8005bdc <HAL_COMP_Init>
 8001a16:	2800      	cmp	r0, #0
 8001a18:	f040 830e 	bne.w	8002038 <main+0x898>
	hcomp2.Instance = COMP2;
 8001a1c:	4831      	ldr	r0, [pc, #196]	; (8001ae4 <main+0x344>)
 8001a1e:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <main+0x348>)
 8001a20:	6003      	str	r3, [r0, #0]
	hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001a22:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001a26:	2300      	movs	r3, #0
 8001a28:	e9c0 3201 	strd	r3, r2, [r0, #4]
	hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001a2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
	hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001a30:	e9c0 3305 	strd	r3, r3, [r0, #20]
	if (HAL_COMP_Init(&hcomp2) != HAL_OK) {
 8001a34:	f004 f8d2 	bl	8005bdc <HAL_COMP_Init>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	f040 82fa 	bne.w	8002032 <main+0x892>
	hcomp4.Instance = COMP4;
 8001a3e:	482b      	ldr	r0, [pc, #172]	; (8001aec <main+0x34c>)
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <main+0x350>)
 8001a42:	6003      	str	r3, [r0, #0]
	hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001a44:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e9c0 3201 	strd	r3, r2, [r0, #4]
	hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001a4e:	e9c0 3303 	strd	r3, r3, [r0, #12]
	hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001a52:	e9c0 3305 	strd	r3, r3, [r0, #20]
	if (HAL_COMP_Init(&hcomp4) != HAL_OK) {
 8001a56:	f004 f8c1 	bl	8005bdc <HAL_COMP_Init>
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	f040 82e6 	bne.w	800202c <main+0x88c>
	hcordic.Instance = CORDIC;
 8001a60:	4824      	ldr	r0, [pc, #144]	; (8001af4 <main+0x354>)
 8001a62:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <main+0x358>)
 8001a64:	6003      	str	r3, [r0, #0]
	if (HAL_CORDIC_Init(&hcordic) != HAL_OK) {
 8001a66:	f004 f95d 	bl	8005d24 <HAL_CORDIC_Init>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	f040 82db 	bne.w	8002026 <main+0x886>
	hopamp1.Instance = OPAMP1;
 8001a70:	4822      	ldr	r0, [pc, #136]	; (8001afc <main+0x35c>)
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <main+0x360>)
 8001a74:	6003      	str	r3, [r0, #0]
	hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001a76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001a7a:	2140      	movs	r1, #64	; 0x40
	hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001a7c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
	hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001a80:	6243      	str	r3, [r0, #36]	; 0x24
	hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001a82:	2300      	movs	r3, #0
	hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001a84:	6081      	str	r1, [r0, #8]
	hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001a86:	6282      	str	r2, [r0, #40]	; 0x28
	hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001a88:	6043      	str	r3, [r0, #4]
	hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001a8a:	6103      	str	r3, [r0, #16]
	hopamp1.Init.InternalOutput = DISABLE;
 8001a8c:	7503      	strb	r3, [r0, #20]
	hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001a8e:	6183      	str	r3, [r0, #24]
	hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001a90:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_OPAMP_Init(&hopamp1) != HAL_OK) {
 8001a92:	f004 feaf 	bl	80067f4 <HAL_OPAMP_Init>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	f040 82c2 	bne.w	8002020 <main+0x880>
	hopamp2.Instance = OPAMP2;
 8001a9c:	4819      	ldr	r0, [pc, #100]	; (8001b04 <main+0x364>)
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <main+0x368>)
 8001aa0:	6003      	str	r3, [r0, #0]
	hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001aa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa6:	e031      	b.n	8001b0c <main+0x36c>
 8001aa8:	32601000 	.word	0x32601000
 8001aac:	0000010f 	.word	0x0000010f
 8001ab0:	14f00020 	.word	0x14f00020
 8001ab4:	0000000c 	.word	0x0000000c
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	48000800 	.word	0x48000800
 8001ac0:	10210000 	.word	0x10210000
 8001ac4:	20000944 	.word	0x20000944
 8001ac8:	0c900008 	.word	0x0c900008
 8001acc:	04300002 	.word	0x04300002
 8001ad0:	200007cc 	.word	0x200007cc
 8001ad4:	50000100 	.word	0x50000100
 8001ad8:	cb8c0000 	.word	0xcb8c0000
 8001adc:	20000874 	.word	0x20000874
 8001ae0:	40010200 	.word	0x40010200
 8001ae4:	20000af0 	.word	0x20000af0
 8001ae8:	40010204 	.word	0x40010204
 8001aec:	20000920 	.word	0x20000920
 8001af0:	4001020c 	.word	0x4001020c
 8001af4:	20000a18 	.word	0x20000a18
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	200008e4 	.word	0x200008e4
 8001b00:	40010300 	.word	0x40010300
 8001b04:	20000744 	.word	0x20000744
 8001b08:	40010304 	.word	0x40010304
	hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001b0c:	2140      	movs	r1, #64	; 0x40
	hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001b0e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
	hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001b12:	6243      	str	r3, [r0, #36]	; 0x24
	hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001b14:	2300      	movs	r3, #0
	hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001b16:	6081      	str	r1, [r0, #8]
	hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001b18:	6282      	str	r2, [r0, #40]	; 0x28
	hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001b1a:	6043      	str	r3, [r0, #4]
	hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001b1c:	6103      	str	r3, [r0, #16]
	hopamp2.Init.InternalOutput = DISABLE;
 8001b1e:	7503      	strb	r3, [r0, #20]
	hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001b20:	6183      	str	r3, [r0, #24]
	hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001b22:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_OPAMP_Init(&hopamp2) != HAL_OK) {
 8001b24:	f004 fe66 	bl	80067f4 <HAL_OPAMP_Init>
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	f040 8276 	bne.w	800201a <main+0x87a>
	hopamp3.Instance = OPAMP3;
 8001b2e:	48c0      	ldr	r0, [pc, #768]	; (8001e30 <main+0x690>)
 8001b30:	4bc0      	ldr	r3, [pc, #768]	; (8001e34 <main+0x694>)
 8001b32:	6003      	str	r3, [r0, #0]
	hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001b34:	2240      	movs	r2, #64	; 0x40
	hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	hopamp3.Init.InternalOutput = ENABLE;
 8001b3a:	2101      	movs	r1, #1
	hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001b3c:	6082      	str	r2, [r0, #8]
	hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001b3e:	6243      	str	r3, [r0, #36]	; 0x24
	hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001b40:	f44f 4240 	mov.w	r2, #49152	; 0xc000
	hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001b44:	2300      	movs	r3, #0
	hopamp3.Init.InternalOutput = ENABLE;
 8001b46:	7501      	strb	r1, [r0, #20]
	hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001b48:	6282      	str	r2, [r0, #40]	; 0x28
	hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001b4a:	6043      	str	r3, [r0, #4]
	hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001b4c:	6103      	str	r3, [r0, #16]
	hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001b4e:	6183      	str	r3, [r0, #24]
	hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001b50:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_OPAMP_Init(&hopamp3) != HAL_OK) {
 8001b52:	f004 fe4f 	bl	80067f4 <HAL_OPAMP_Init>
 8001b56:	2800      	cmp	r0, #0
 8001b58:	f040 825c 	bne.w	8002014 <main+0x874>
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001b5c:	2400      	movs	r4, #0
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001b5e:	4621      	mov	r1, r4
 8001b60:	2234      	movs	r2, #52	; 0x34
 8001b62:	a81c      	add	r0, sp, #112	; 0x70
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001b64:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001b68:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b6c:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8001b70:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8001b74:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b78:	e9cd 4407 	strd	r4, r4, [sp, #28]
	TIMEx_BreakInputConfigTypeDef sBreakInputConfig = { 0 };
 8001b7c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001b80:	9412      	str	r4, [sp, #72]	; 0x48
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b82:	9406      	str	r4, [sp, #24]
	TIMEx_BreakInputConfigTypeDef sBreakInputConfig = { 0 };
 8001b84:	940a      	str	r4, [sp, #40]	; 0x28
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b86:	941a      	str	r4, [sp, #104]	; 0x68
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001b88:	f009 f866 	bl	800ac58 <memset>
	htim1.Instance = TIM1;
 8001b8c:	48aa      	ldr	r0, [pc, #680]	; (8001e38 <main+0x698>)
 8001b8e:	4bab      	ldr	r3, [pc, #684]	; (8001e3c <main+0x69c>)
 8001b90:	6003      	str	r3, [r0, #0]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001b92:	2520      	movs	r5, #32
	htim1.Init.Period = ((PWM_PERIOD_CYCLES ) / 2);
 8001b94:	f640 3111 	movw	r1, #2833	; 0xb11
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001b98:	f44f 7280 	mov.w	r2, #256	; 0x100
	htim1.Init.RepetitionCounter = (REP_COUNTER );
 8001b9c:	2301      	movs	r3, #1
	htim1.Init.Period = ((PWM_PERIOD_CYCLES ) / 2);
 8001b9e:	e9c0 5102 	strd	r5, r1, [r0, #8]
	htim1.Init.RepetitionCounter = (REP_COUNTER );
 8001ba2:	e9c0 2304 	strd	r2, r3, [r0, #16]
	htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001ba6:	6044      	str	r4, [r0, #4]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba8:	6184      	str	r4, [r0, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001baa:	f005 fcf9 	bl	80075a0 <HAL_TIM_Base_Init>
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	f040 822d 	bne.w	800200e <main+0x86e>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001bb4:	48a0      	ldr	r0, [pc, #640]	; (8001e38 <main+0x698>)
 8001bb6:	f005 fdcb 	bl	8007750 <HAL_TIM_PWM_Init>
 8001bba:	2800      	cmp	r0, #0
 8001bbc:	f040 8224 	bne.w	8002008 <main+0x868>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001bc0:	2206      	movs	r2, #6
 8001bc2:	2310      	movs	r3, #16
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8001bc4:	489c      	ldr	r0, [pc, #624]	; (8001e38 <main+0x698>)
 8001bc6:	a90e      	add	r1, sp, #56	; 0x38
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001bc8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8001bcc:	f005 ffbc 	bl	8007b48 <HAL_TIM_SlaveConfigSynchro>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	f040 8216 	bne.w	8002002 <main+0x862>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001bd6:	2470      	movs	r4, #112	; 0x70
 8001bd8:	2500      	movs	r5, #0
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bda:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001bdc:	4896      	ldr	r0, [pc, #600]	; (8001e38 <main+0x698>)
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bde:	9308      	str	r3, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001be0:	a906      	add	r1, sp, #24
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001be2:	e9cd 4506 	strd	r4, r5, [sp, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001be6:	f006 fa6d 	bl	80080c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	f040 8206 	bne.w	8001ffc <main+0x85c>
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001bf8:	2300      	movs	r3, #0
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 8001bfa:	488f      	ldr	r0, [pc, #572]	; (8001e38 <main+0x698>)
	sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001bfc:	930c      	str	r3, [sp, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 8001bfe:	aa0a      	add	r2, sp, #40	; 0x28
 8001c00:	2102      	movs	r1, #2
 8001c02:	f006 faf5 	bl	80081f0 <HAL_TIMEx_ConfigBreakInput>
 8001c06:	2800      	cmp	r0, #0
 8001c08:	f040 81f5 	bne.w	8001ff6 <main+0x856>
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001c0c:	2304      	movs	r3, #4
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 8001c0e:	488a      	ldr	r0, [pc, #552]	; (8001e38 <main+0x698>)
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001c10:	930a      	str	r3, [sp, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 8001c12:	aa0a      	add	r2, sp, #40	; 0x28
 8001c14:	2102      	movs	r1, #2
 8001c16:	f006 faeb 	bl	80081f0 <HAL_TIMEx_ConfigBreakInput>
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	f040 81e8 	bne.w	8001ff0 <main+0x850>
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8001c20:	2310      	movs	r3, #16
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 8001c22:	4885      	ldr	r0, [pc, #532]	; (8001e38 <main+0x698>)
	sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8001c24:	930a      	str	r3, [sp, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2,
 8001c26:	aa0a      	add	r2, sp, #40	; 0x28
 8001c28:	2102      	movs	r1, #2
 8001c2a:	f006 fae1 	bl	80081f0 <HAL_TIMEx_ConfigBreakInput>
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	f040 81db 	bne.w	8001fea <main+0x84a>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c34:	2460      	movs	r4, #96	; 0x60
 8001c36:	2500      	movs	r5, #0
 8001c38:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c3c:	2200      	movs	r2, #0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3e:	2400      	movs	r4, #0
 8001c40:	2500      	movs	r5, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001c42:	487d      	ldr	r0, [pc, #500]	; (8001e38 <main+0x698>)
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c44:	921a      	str	r2, [sp, #104]	; 0x68
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001c46:	a914      	add	r1, sp, #80	; 0x50
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c48:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 8001c4c:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001c50:	f006 f93e 	bl	8007ed0 <HAL_TIM_PWM_ConfigChannel>
 8001c54:	2800      	cmp	r0, #0
 8001c56:	f040 81c5 	bne.w	8001fe4 <main+0x844>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8001c5a:	4877      	ldr	r0, [pc, #476]	; (8001e38 <main+0x698>)
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	a914      	add	r1, sp, #80	; 0x50
 8001c60:	f006 f936 	bl	8007ed0 <HAL_TIM_PWM_ConfigChannel>
 8001c64:	2800      	cmp	r0, #0
 8001c66:	f040 81ba 	bne.w	8001fde <main+0x83e>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001c6a:	4873      	ldr	r0, [pc, #460]	; (8001e38 <main+0x698>)
 8001c6c:	2208      	movs	r2, #8
 8001c6e:	a914      	add	r1, sp, #80	; 0x50
 8001c70:	f006 f92e 	bl	8007ed0 <HAL_TIM_PWM_ConfigChannel>
 8001c74:	2800      	cmp	r0, #0
 8001c76:	f040 81af 	bne.w	8001fd8 <main+0x838>
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001c7a:	2370      	movs	r3, #112	; 0x70
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001c7c:	486e      	ldr	r0, [pc, #440]	; (8001e38 <main+0x698>)
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001c7e:	9314      	str	r3, [sp, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001c80:	220c      	movs	r2, #12
 8001c82:	a914      	add	r1, sp, #80	; 0x50
 8001c84:	f006 f924 	bl	8007ed0 <HAL_TIM_PWM_ConfigChannel>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	f040 81a2 	bne.w	8001fd2 <main+0x832>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001c8e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8001c92:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001c96:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 8001c9a:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001c9e:	2544      	movs	r5, #68	; 0x44
 8001ca0:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8001ca4:	2400      	movs	r4, #0
 8001ca6:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8001caa:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 8001cae:	2400      	movs	r4, #0
 8001cb0:	2500      	movs	r5, #0
 8001cb2:	e9cd 4522 	strd	r4, r5, [sp, #136]	; 0x88
 8001cb6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 8001cba:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001cbe:	e9cd 4524 	strd	r4, r5, [sp, #144]	; 0x90
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cc2:	2300      	movs	r3, #0
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001cc4:	2403      	movs	r4, #3
 8001cc6:	2500      	movs	r5, #0
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001cc8:	485b      	ldr	r0, [pc, #364]	; (8001e38 <main+0x698>)
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cca:	9328      	str	r3, [sp, #160]	; 0xa0
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001ccc:	a91c      	add	r1, sp, #112	; 0x70
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001cce:	e9cd 4526 	strd	r4, r5, [sp, #152]	; 0x98
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001cd2:	f006 fa3f 	bl	8008154 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	f040 8178 	bne.w	8001fcc <main+0x82c>
	HAL_TIM_MspPostInit(&htim1);
 8001cdc:	4856      	ldr	r0, [pc, #344]	; (8001e38 <main+0x698>)
 8001cde:	f002 fe39 	bl	8004954 <HAL_TIM_MspPostInit>
	htim4.Instance = TIM4;
 8001ce2:	4857      	ldr	r0, [pc, #348]	; (8001e40 <main+0x6a0>)
 8001ce4:	4b57      	ldr	r3, [pc, #348]	; (8001e44 <main+0x6a4>)
 8001ce6:	6003      	str	r3, [r0, #0]
	htim4.Init.Period = M1_PULSE_NBR;
 8001ce8:	f240 128f 	movw	r2, #399	; 0x18f
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001cec:	2300      	movs	r3, #0
 8001cee:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
	htim4.Init.Period = M1_PULSE_NBR;
 8001cf2:	60c2      	str	r2, [r0, #12]
	htim4.Init.Prescaler = 0;
 8001cf4:	6043      	str	r3, [r0, #4]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cf6:	2203      	movs	r2, #3
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001cf8:	9316      	str	r3, [sp, #88]	; 0x58
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	6083      	str	r3, [r0, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfc:	6103      	str	r3, [r0, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfe:	6183      	str	r3, [r0, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d00:	2300      	movs	r3, #0
 8001d02:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8001d06:	2201      	movs	r2, #1
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8001d0e:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
	sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8001d12:	240c      	movs	r4, #12
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d14:	220c      	movs	r2, #12
 8001d16:	2300      	movs	r3, #0
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001d18:	a91c      	add	r1, sp, #112	; 0x70
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d1a:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
	sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8001d1e:	9424      	str	r4, [sp, #144]	; 0x90
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001d20:	f005 fd9a 	bl	8007858 <HAL_TIM_Encoder_Init>
 8001d24:	2800      	cmp	r0, #0
 8001d26:	f040 814e 	bne.w	8001fc6 <main+0x826>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2a:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001d2c:	4844      	ldr	r0, [pc, #272]	; (8001e40 <main+0x6a0>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2e:	9314      	str	r3, [sp, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001d30:	a914      	add	r1, sp, #80	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d32:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001d34:	f006 f9c6 	bl	80080c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	f040 8141 	bne.w	8001fc0 <main+0x820>
	huart2.Instance = USART2;
 8001d3e:	4842      	ldr	r0, [pc, #264]	; (8001e48 <main+0x6a8>)
 8001d40:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <main+0x6ac>)
 8001d42:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 1843200;
 8001d44:	f44f 13e1 	mov.w	r3, #1843200	; 0x1c2000
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001d48:	220c      	movs	r2, #12
	huart2.Init.BaudRate = 1843200;
 8001d4a:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4c:	2300      	movs	r3, #0
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001d4e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d52:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d56:	e9c0 3308 	strd	r3, r3, [r0, #32]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001d5a:	6142      	str	r2, [r0, #20]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001d5c:	6103      	str	r3, [r0, #16]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d5e:	6283      	str	r3, [r0, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001d60:	f006 fb68 	bl	8008434 <HAL_UART_Init>
 8001d64:	2800      	cmp	r0, #0
 8001d66:	f040 8128 	bne.w	8001fba <main+0x81a>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001d6a:	4837      	ldr	r0, [pc, #220]	; (8001e48 <main+0x6a8>)
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	f006 fd37 	bl	80087e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	f040 811e 	bne.w	8001fb4 <main+0x814>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001d78:	4833      	ldr	r0, [pc, #204]	; (8001e48 <main+0x6a8>)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	f006 fd6e 	bl	800885c <HAL_UARTEx_SetRxFifoThreshold>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	f040 8114 	bne.w	8001fae <main+0x80e>
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8001d86:	4830      	ldr	r0, [pc, #192]	; (8001e48 <main+0x6a8>)
 8001d88:	f006 fd0c 	bl	80087a4 <HAL_UARTEx_DisableFifoMode>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	f040 810b 	bne.w	8001fa8 <main+0x808>
	MX_MotorControl_Init();
 8001d92:	f001 f831 	bl	8002df8 <MX_MotorControl_Init>
	hfdcan1.Instance = FDCAN1;
 8001d96:	482e      	ldr	r0, [pc, #184]	; (8001e50 <main+0x6b0>)
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <main+0x6b4>)
 8001d9a:	6003      	str	r3, [r0, #0]
	hfdcan1.Init.NominalTimeSeg1 = 14;
 8001d9c:	230e      	movs	r3, #14
	hfdcan1.Init.NominalTimeSeg2 = 2;
 8001d9e:	2202      	movs	r2, #2
	hfdcan1.Init.NominalTimeSeg1 = 14;
 8001da0:	61c3      	str	r3, [r0, #28]
	hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001da2:	2300      	movs	r3, #0
	hfdcan1.Init.NominalPrescaler = 20;
 8001da4:	2114      	movs	r1, #20
	hfdcan1.Init.NominalTimeSeg2 = 2;
 8001da6:	6202      	str	r2, [r0, #32]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8001da8:	8203      	strh	r3, [r0, #16]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001daa:	2201      	movs	r2, #1
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001dac:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hfdcan1.Init.ExtFiltersNbr = 0;
 8001db0:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8001db4:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
	hfdcan1.Init.DataTimeSeg2 = 1;
 8001db8:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
	hfdcan1.Init.NominalPrescaler = 20;
 8001dbc:	6141      	str	r1, [r0, #20]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001dbe:	60c3      	str	r3, [r0, #12]
	hfdcan1.Init.ProtocolException = DISABLE;
 8001dc0:	7483      	strb	r3, [r0, #18]
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001dc2:	63c3      	str	r3, [r0, #60]	; 0x3c
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001dc4:	6182      	str	r2, [r0, #24]
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 8001dc6:	f004 f8d9 	bl	8005f7c <HAL_FDCAN_Init>
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	f040 80e9 	bne.w	8001fa2 <main+0x802>
	htim2.Instance = TIM2;
 8001dd0:	4821      	ldr	r0, [pc, #132]	; (8001e58 <main+0x6b8>)
	htim2.Init.Prescaler = 1700 - 1;
 8001dd2:	f240 63a3 	movw	r3, #1699	; 0x6a3
	htim2.Instance = TIM2;
 8001dd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Init.Prescaler = 1700 - 1;
 8001dda:	e9c0 1300 	strd	r1, r3, [r0]
	htim2.Init.Period = 9999;
 8001dde:	f242 720f 	movw	r2, #9999	; 0x270f
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001de2:	2300      	movs	r3, #0
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001de8:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8001dec:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001df0:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8001df4:	9316      	str	r3, [sp, #88]	; 0x58
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df6:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df8:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001dfa:	f005 fbd1 	bl	80075a0 <HAL_TIM_Base_Init>
 8001dfe:	2800      	cmp	r0, #0
 8001e00:	f040 80cc 	bne.w	8001f9c <main+0x7fc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001e08:	4813      	ldr	r0, [pc, #76]	; (8001e58 <main+0x6b8>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0a:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001e0c:	a91c      	add	r1, sp, #112	; 0x70
 8001e0e:	f005 fdd5 	bl	80079bc <HAL_TIM_ConfigClockSource>
 8001e12:	2800      	cmp	r0, #0
 8001e14:	f040 80bf 	bne.w	8001f96 <main+0x7f6>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e18:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001e1a:	480f      	ldr	r0, [pc, #60]	; (8001e58 <main+0x6b8>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1c:	9314      	str	r3, [sp, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001e1e:	a914      	add	r1, sp, #80	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e20:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001e22:	f006 f94f 	bl	80080c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	2800      	cmp	r0, #0
 8001e28:	f040 80b2 	bne.w	8001f90 <main+0x7f0>
	htim3.Instance = TIM3;
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <main+0x6bc>)
 8001e2e:	e017      	b.n	8001e60 <main+0x6c0>
 8001e30:	20000838 	.word	0x20000838
 8001e34:	40010308 	.word	0x40010308
 8001e38:	20000aa4 	.word	0x20000aa4
 8001e3c:	40012c00 	.word	0x40012c00
 8001e40:	20000780 	.word	0x20000780
 8001e44:	40000800 	.word	0x40000800
 8001e48:	20000b60 	.word	0x20000b60
 8001e4c:	40004400 	.word	0x40004400
 8001e50:	20000a40 	.word	0x20000a40
 8001e54:	40006400 	.word	0x40006400
 8001e58:	20000b14 	.word	0x20000b14
 8001e5c:	20000898 	.word	0x20000898
 8001e60:	4b83      	ldr	r3, [pc, #524]	; (8002070 <main+0x8d0>)
 8001e62:	6003      	str	r3, [r0, #0]
	htim3.Init.Prescaler = 1700 - 1;
 8001e64:	f240 63a3 	movw	r3, #1699	; 0x6a3
	htim3.Init.Period = 999;
 8001e68:	f240 32e7 	movw	r2, #999	; 0x3e7
	htim3.Init.Prescaler = 1700 - 1;
 8001e6c:	6043      	str	r3, [r0, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001e6e:	2300      	movs	r3, #0
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	e9c0 3202 	strd	r3, r2, [r0, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001e74:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8001e78:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001e7c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8001e80:	9316      	str	r3, [sp, #88]	; 0x58
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e82:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001e86:	f005 fb8b 	bl	80075a0 <HAL_TIM_Base_Init>
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d17d      	bne.n	8001f8a <main+0x7ea>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001e92:	4878      	ldr	r0, [pc, #480]	; (8002074 <main+0x8d4>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e94:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001e96:	a91c      	add	r1, sp, #112	; 0x70
 8001e98:	f005 fd90 	bl	80079bc <HAL_TIM_ConfigClockSource>
 8001e9c:	2800      	cmp	r0, #0
 8001e9e:	d171      	bne.n	8001f84 <main+0x7e4>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea0:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001ea2:	4874      	ldr	r0, [pc, #464]	; (8002074 <main+0x8d4>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea4:	9314      	str	r3, [sp, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001ea6:	a914      	add	r1, sp, #80	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea8:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001eaa:	f006 f90b 	bl	80080c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d165      	bne.n	8001f7e <main+0x7de>
	HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	2018      	movs	r0, #24
 8001eb8:	f003 ff62 	bl	8005d80 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001ebc:	2018      	movs	r0, #24
 8001ebe:	f003 ff97 	bl	8005df0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	2019      	movs	r0, #25
 8001ec8:	f003 ff5a 	bl	8005d80 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ecc:	2019      	movs	r0, #25
 8001ece:	f003 ff8f 	bl	8005df0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	2012      	movs	r0, #18
 8001ed8:	f003 ff52 	bl	8005d80 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001edc:	2012      	movs	r0, #18
 8001ede:	f003 ff87 	bl	8005df0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2103      	movs	r1, #3
 8001ee6:	201e      	movs	r0, #30
 8001ee8:	f003 ff4a 	bl	8005d80 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eec:	201e      	movs	r0, #30
 8001eee:	f003 ff7f 	bl	8005df0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	2103      	movs	r1, #3
 8001ef6:	2026      	movs	r0, #38	; 0x26
 8001ef8:	f003 ff42 	bl	8005d80 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001efc:	2026      	movs	r0, #38	; 0x26
 8001efe:	f003 ff77 	bl	8005df0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2103      	movs	r1, #3
 8001f06:	2028      	movs	r0, #40	; 0x28
 8001f08:	f003 ff3a 	bl	8005d80 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f0c:	2028      	movs	r0, #40	; 0x28
 8001f0e:	f003 ff6f 	bl	8005df0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	4611      	mov	r1, r2
 8001f16:	2039      	movs	r0, #57	; 0x39
 8001f18:	f003 ff32 	bl	8005d80 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001f1c:	2039      	movs	r0, #57	; 0x39
 8001f1e:	f003 ff67 	bl	8005df0 <HAL_NVIC_EnableIRQ>
	PID_SetKP(&PID_PosParamsM1, 100);
 8001f22:	4855      	ldr	r0, [pc, #340]	; (8002078 <main+0x8d8>)
 8001f24:	2164      	movs	r1, #100	; 0x64
 8001f26:	f007 f95b 	bl	80091e0 <PID_SetKP>
	PID_SetKI(&PID_PosParamsM1, 100);
 8001f2a:	4853      	ldr	r0, [pc, #332]	; (8002078 <main+0x8d8>)
 8001f2c:	2164      	movs	r1, #100	; 0x64
 8001f2e:	f007 f959 	bl	80091e4 <PID_SetKI>
	PID_SetKD(&PID_PosParamsM1, 100);
 8001f32:	4851      	ldr	r0, [pc, #324]	; (8002078 <main+0x8d8>)
 8001f34:	2164      	movs	r1, #100	; 0x64
 8001f36:	f007 f983 	bl	8009240 <PID_SetKD>
	HAL_GPIO_WritePin(GPIOC, CAN_TERM_Pin, GPIO_PIN_SET);
 8001f3a:	4850      	ldr	r0, [pc, #320]	; (800207c <main+0x8dc>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f42:	f004 fc51 	bl	80067e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, STATUS_Pin, GPIO_PIN_RESET);
 8001f46:	484d      	ldr	r0, [pc, #308]	; (800207c <main+0x8dc>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2140      	movs	r1, #64	; 0x40
 8001f4c:	f004 fc4c 	bl	80067e8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim3);
 8001f50:	4848      	ldr	r0, [pc, #288]	; (8002074 <main+0x8d4>)
 8001f52:	f005 fba9 	bl	80076a8 <HAL_TIM_Base_Start_IT>
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001f56:	484a      	ldr	r0, [pc, #296]	; (8002080 <main+0x8e0>)
 8001f58:	f004 f900 	bl	800615c <HAL_FDCAN_Start>
 8001f5c:	b960      	cbnz	r0, 8001f78 <main+0x7d8>
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8001f5e:	4848      	ldr	r0, [pc, #288]	; (8002080 <main+0x8e0>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	2101      	movs	r1, #1
 8001f64:	f004 f9fe 	bl	8006364 <HAL_FDCAN_ActivateNotification>
 8001f68:	b918      	cbnz	r0, 8001f72 <main+0x7d2>
	while (1) {
 8001f6a:	e7fe      	b.n	8001f6a <main+0x7ca>
		Error_Handler();
 8001f6c:	f7ff fbfc 	bl	8001768 <Error_Handler>
 8001f70:	e4a2      	b.n	80018b8 <main+0x118>
		Error_Handler();
 8001f72:	f7ff fbf9 	bl	8001768 <Error_Handler>
 8001f76:	e7f8      	b.n	8001f6a <main+0x7ca>
		Error_Handler();
 8001f78:	f7ff fbf6 	bl	8001768 <Error_Handler>
 8001f7c:	e7ef      	b.n	8001f5e <main+0x7be>
		Error_Handler();
 8001f7e:	f7ff fbf3 	bl	8001768 <Error_Handler>
 8001f82:	e796      	b.n	8001eb2 <main+0x712>
		Error_Handler();
 8001f84:	f7ff fbf0 	bl	8001768 <Error_Handler>
 8001f88:	e78a      	b.n	8001ea0 <main+0x700>
		Error_Handler();
 8001f8a:	f7ff fbed 	bl	8001768 <Error_Handler>
 8001f8e:	e77e      	b.n	8001e8e <main+0x6ee>
		Error_Handler();
 8001f90:	f7ff fbea 	bl	8001768 <Error_Handler>
 8001f94:	e74a      	b.n	8001e2c <main+0x68c>
		Error_Handler();
 8001f96:	f7ff fbe7 	bl	8001768 <Error_Handler>
 8001f9a:	e73d      	b.n	8001e18 <main+0x678>
		Error_Handler();
 8001f9c:	f7ff fbe4 	bl	8001768 <Error_Handler>
 8001fa0:	e730      	b.n	8001e04 <main+0x664>
		Error_Handler();
 8001fa2:	f7ff fbe1 	bl	8001768 <Error_Handler>
 8001fa6:	e713      	b.n	8001dd0 <main+0x630>
		Error_Handler();
 8001fa8:	f7ff fbde 	bl	8001768 <Error_Handler>
 8001fac:	e6f1      	b.n	8001d92 <main+0x5f2>
		Error_Handler();
 8001fae:	f7ff fbdb 	bl	8001768 <Error_Handler>
 8001fb2:	e6e8      	b.n	8001d86 <main+0x5e6>
		Error_Handler();
 8001fb4:	f7ff fbd8 	bl	8001768 <Error_Handler>
 8001fb8:	e6de      	b.n	8001d78 <main+0x5d8>
		Error_Handler();
 8001fba:	f7ff fbd5 	bl	8001768 <Error_Handler>
 8001fbe:	e6d4      	b.n	8001d6a <main+0x5ca>
		Error_Handler();
 8001fc0:	f7ff fbd2 	bl	8001768 <Error_Handler>
 8001fc4:	e6bb      	b.n	8001d3e <main+0x59e>
		Error_Handler();
 8001fc6:	f7ff fbcf 	bl	8001768 <Error_Handler>
 8001fca:	e6ae      	b.n	8001d2a <main+0x58a>
		Error_Handler();
 8001fcc:	f7ff fbcc 	bl	8001768 <Error_Handler>
 8001fd0:	e684      	b.n	8001cdc <main+0x53c>
		Error_Handler();
 8001fd2:	f7ff fbc9 	bl	8001768 <Error_Handler>
 8001fd6:	e65a      	b.n	8001c8e <main+0x4ee>
		Error_Handler();
 8001fd8:	f7ff fbc6 	bl	8001768 <Error_Handler>
 8001fdc:	e64d      	b.n	8001c7a <main+0x4da>
		Error_Handler();
 8001fde:	f7ff fbc3 	bl	8001768 <Error_Handler>
 8001fe2:	e642      	b.n	8001c6a <main+0x4ca>
		Error_Handler();
 8001fe4:	f7ff fbc0 	bl	8001768 <Error_Handler>
 8001fe8:	e637      	b.n	8001c5a <main+0x4ba>
		Error_Handler();
 8001fea:	f7ff fbbd 	bl	8001768 <Error_Handler>
 8001fee:	e621      	b.n	8001c34 <main+0x494>
		Error_Handler();
 8001ff0:	f7ff fbba 	bl	8001768 <Error_Handler>
 8001ff4:	e614      	b.n	8001c20 <main+0x480>
		Error_Handler();
 8001ff6:	f7ff fbb7 	bl	8001768 <Error_Handler>
 8001ffa:	e607      	b.n	8001c0c <main+0x46c>
		Error_Handler();
 8001ffc:	f7ff fbb4 	bl	8001768 <Error_Handler>
 8002000:	e5f6      	b.n	8001bf0 <main+0x450>
		Error_Handler();
 8002002:	f7ff fbb1 	bl	8001768 <Error_Handler>
 8002006:	e5e6      	b.n	8001bd6 <main+0x436>
		Error_Handler();
 8002008:	f7ff fbae 	bl	8001768 <Error_Handler>
 800200c:	e5d8      	b.n	8001bc0 <main+0x420>
		Error_Handler();
 800200e:	f7ff fbab 	bl	8001768 <Error_Handler>
 8002012:	e5cf      	b.n	8001bb4 <main+0x414>
		Error_Handler();
 8002014:	f7ff fba8 	bl	8001768 <Error_Handler>
 8002018:	e5a0      	b.n	8001b5c <main+0x3bc>
		Error_Handler();
 800201a:	f7ff fba5 	bl	8001768 <Error_Handler>
 800201e:	e586      	b.n	8001b2e <main+0x38e>
		Error_Handler();
 8002020:	f7ff fba2 	bl	8001768 <Error_Handler>
 8002024:	e53a      	b.n	8001a9c <main+0x2fc>
		Error_Handler();
 8002026:	f7ff fb9f 	bl	8001768 <Error_Handler>
 800202a:	e521      	b.n	8001a70 <main+0x2d0>
		Error_Handler();
 800202c:	f7ff fb9c 	bl	8001768 <Error_Handler>
 8002030:	e516      	b.n	8001a60 <main+0x2c0>
		Error_Handler();
 8002032:	f7ff fb99 	bl	8001768 <Error_Handler>
 8002036:	e502      	b.n	8001a3e <main+0x29e>
		Error_Handler();
 8002038:	f7ff fb96 	bl	8001768 <Error_Handler>
 800203c:	e4ee      	b.n	8001a1c <main+0x27c>
		Error_Handler();
 800203e:	f7ff fb93 	bl	8001768 <Error_Handler>
 8002042:	e4da      	b.n	80019fa <main+0x25a>
		Error_Handler();
 8002044:	f7ff fb90 	bl	8001768 <Error_Handler>
 8002048:	e4cb      	b.n	80019e2 <main+0x242>
		Error_Handler();
 800204a:	f7ff fb8d 	bl	8001768 <Error_Handler>
 800204e:	e4a8      	b.n	80019a2 <main+0x202>
		Error_Handler();
 8002050:	f7ff fb8a 	bl	8001768 <Error_Handler>
 8002054:	e484      	b.n	8001960 <main+0x1c0>
		Error_Handler();
 8002056:	f7ff fb87 	bl	8001768 <Error_Handler>
 800205a:	e475      	b.n	8001948 <main+0x1a8>
		Error_Handler();
 800205c:	f7ff fb84 	bl	8001768 <Error_Handler>
 8002060:	e45f      	b.n	8001922 <main+0x182>
		Error_Handler();
 8002062:	f7ff fb81 	bl	8001768 <Error_Handler>
 8002066:	e450      	b.n	800190a <main+0x16a>
		Error_Handler();
 8002068:	f7ff fb7e 	bl	8001768 <Error_Handler>
 800206c:	e42d      	b.n	80018ca <main+0x12a>
 800206e:	bf00      	nop
 8002070:	40000400 	.word	0x40000400
 8002074:	20000898 	.word	0x20000898
 8002078:	200001f8 	.word	0x200001f8
 800207c:	48000800 	.word	0x48000800
 8002080:	20000a40 	.word	0x20000a40

08002084 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8002084:	4b01      	ldr	r3, [pc, #4]	; (800208c <MC_StartMotor1+0x8>)
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	f000 b898 	b.w	80021bc <MCI_StartMotor>
 800208c:	20001e84 	.word	0x20001e84

08002090 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8002090:	4b01      	ldr	r3, [pc, #4]	; (8002098 <MC_StopMotor1+0x8>)
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	f000 b89c 	b.w	80021d0 <MCI_StopMotor>
 8002098:	20001e84 	.word	0x20001e84

0800209c <MC_ProgramPositionCommandMotor1>:
  * @param  fDuration Duration of the movement expressed in seconds.
  *         It is possible to set 0 to perform an instantaneous angular change (follow mode).
  */
__weak void MC_ProgramPositionCommandMotor1( float fTargetPosition, float fDuration )
{
	MCI_ExecPositionCommand( pMCI[M1], fTargetPosition, fDuration );
 800209c:	4b01      	ldr	r3, [pc, #4]	; (80020a4 <MC_ProgramPositionCommandMotor1+0x8>)
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	f000 b852 	b.w	8002148 <MCI_ExecPositionCommand>
 80020a4:	20001e84 	.word	0x20001e84

080020a8 <MC_GetIqdMotor1>:
/**
 * @brief returns Iq and Id current values for Motor 1 in qd_t format
 */
__weak qd_t MC_GetIqdMotor1(void)
{
	return MCI_GetIqd( pMCI[M1] );
 80020a8:	4b02      	ldr	r3, [pc, #8]	; (80020b4 <MC_GetIqdMotor1+0xc>)
 80020aa:	6818      	ldr	r0, [r3, #0]
{
 80020ac:	b082      	sub	sp, #8
}
 80020ae:	b002      	add	sp, #8
	return MCI_GetIqd( pMCI[M1] );
 80020b0:	f000 b91a 	b.w	80022e8 <MCI_GetIqd>
 80020b4:	20001e84 	.word	0x20001e84

080020b8 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
	return MCI_FaultAcknowledged( pMCI[M1] );
 80020b8:	4b01      	ldr	r3, [pc, #4]	; (80020c0 <MC_AcknowledgeFaultMotor1+0x8>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	f000 b88c 	b.w	80021d8 <MCI_FaultAcknowledged>
 80020c0:	20001e84 	.word	0x20001e84

080020c4 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 80020c4:	4b01      	ldr	r3, [pc, #4]	; (80020cc <MC_GetSTMStateMotor1+0x8>)
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	f000 b8ca 	b.w	8002260 <MCI_GetSTMState>
 80020cc:	20001e84 	.word	0x20001e84

080020d0 <MC_GetCurrentPosition1>:
/**
 * @brief returns the current position of Motor 1.
 *   */
__weak float MC_GetCurrentPosition1( void )
{
	return MCI_GetCurrentPosition( pMCI[M1] );
 80020d0:	4b01      	ldr	r3, [pc, #4]	; (80020d8 <MC_GetCurrentPosition1+0x8>)
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	f000 b8c8 	b.w	8002268 <MCI_GetCurrentPosition>
 80020d8:	20001e84 	.word	0x20001e84

080020dc <MC_GetTargetPosition1>:
/**
 * @brief returns the target position of Motor 1.
 *   */
__weak float MC_GetTargetPosition1( void )
{
	return MCI_GetTargetPosition( pMCI[M1] );
 80020dc:	4b01      	ldr	r3, [pc, #4]	; (80020e4 <MC_GetTargetPosition1+0x8>)
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	f000 b8c6 	b.w	8002270 <MCI_GetTargetPosition>
 80020e4:	20001e84 	.word	0x20001e84

080020e8 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars, PosCtrl_Handle_t * pPosCtrl )
{
 80020e8:	b410      	push	{r4}
 80020ea:	9c01      	ldr	r4, [sp, #4]
  pHandle->pSTM = pSTM;
 80020ec:	6001      	str	r1, [r0, #0]
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;
  pHandle->pPosCtrl = pPosCtrl;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80020ee:	2100      	movs	r1, #0
  pHandle->pPosCtrl = pPosCtrl;
 80020f0:	60c4      	str	r4, [r0, #12]
  pHandle->pFOCVars = pFOCVars;
 80020f2:	e9c0 2301 	strd	r2, r3, [r0, #4]
  pHandle->hFinalSpeed = 0;
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
  pHandle->CommandState = MCI_BUFFER_EMPTY;
}
 80020f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80020fa:	7401      	strb	r1, [r0, #16]
  pHandle->hFinalSpeed = 0;
 80020fc:	8241      	strh	r1, [r0, #18]
  pHandle->hFinalTorque = 0;
 80020fe:	8281      	strh	r1, [r0, #20]
  pHandle->hDurationms = 0;
 8002100:	8341      	strh	r1, [r0, #26]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8002102:	7701      	strb	r1, [r0, #28]
}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop

08002108 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8002108:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800210a:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800210e:	2401      	movs	r4, #1
 8002110:	7404      	strb	r4, [r0, #16]
  pHandle->hFinalSpeed = hFinalSpeed;
 8002112:	8241      	strh	r1, [r0, #18]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8002114:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8002118:	8342      	strh	r2, [r0, #26]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800211a:	8383      	strh	r3, [r0, #28]
}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop

08002120 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8002120:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002122:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8002124:	2402      	movs	r4, #2
 8002126:	7404      	strb	r4, [r0, #16]
  pHandle->hFinalTorque = hFinalTorque;
 8002128:	8281      	strh	r1, [r0, #20]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 800212a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 800212e:	8342      	strh	r2, [r0, #26]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002130:	8383      	strh	r3, [r0, #28]
}
 8002132:	4770      	bx	lr

08002134 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8002134:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8002136:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002138:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 800213a:	f8c0 1016 	str.w	r1, [r0, #22]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800213e:	7402      	strb	r2, [r0, #16]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002140:	8383      	strh	r3, [r0, #28]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8002142:	b002      	add	sp, #8
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop

08002148 <MCI_ExecPositionCommand>:
  * @param  FinalPosition is the desired rotor position asked.
  * @param  Duration the duration of the movement to reach the final position.
  * @retval none.
  */
__weak void MCI_ExecPositionCommand( MCI_Handle_t * pHandle, float FinalPosition, float Duration )
{
 8002148:	b510      	push	{r4, lr}
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 800214a:	6883      	ldr	r3, [r0, #8]
{
 800214c:	ed2d 8b02 	vpush	{d8}
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
 8002156:	b082      	sub	sp, #8
 8002158:	4604      	mov	r4, r0
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 800215a:	6840      	ldr	r0, [r0, #4]
{
 800215c:	eeb0 8a60 	vmov.f32	s16, s1
 8002160:	eef0 8a40 	vmov.f32	s17, s0
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8002164:	f008 f920 	bl	800a3a8 <STC_GetSpeedSensor>
 8002168:	f008 f8c8 	bl	800a2fc <SPD_GetMecAngle>
  if (Duration > 0) {
 800216c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8002174:	9001      	str	r0, [sp, #4]
  if (Duration > 0) {
 8002176:	dd14      	ble.n	80021a2 <MCI_ExecPositionCommand+0x5a>
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8002178:	ee07 0a90 	vmov	s15, r0
 800217c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80021b8 <MCI_ExecPositionCommand+0x70>
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8002180:	68e0      	ldr	r0, [r4, #12]
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8002182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8002186:	eeb0 1a48 	vmov.f32	s2, s16
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 800218a:	ee27 0a80 	vmul.f32	s0, s15, s0
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 800218e:	ee78 0ac0 	vsub.f32	s1, s17, s0
 8002192:	f008 fa8b 	bl	800a6ac <TC_MoveCommand>
  } else {
    TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
  }

  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8002196:	2300      	movs	r3, #0
 8002198:	7763      	strb	r3, [r4, #29]
}
 800219a:	b002      	add	sp, #8
 800219c:	ecbd 8b02 	vpop	{d8}
 80021a0:	bd10      	pop	{r4, pc}
    TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 80021a2:	68e0      	ldr	r0, [r4, #12]
 80021a4:	eeb0 0a68 	vmov.f32	s0, s17
 80021a8:	f008 faf2 	bl	800a790 <TC_FollowCommand>
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	7763      	strb	r3, [r4, #29]
}
 80021b0:	b002      	add	sp, #8
 80021b2:	ecbd 8b02 	vpop	{d8}
 80021b6:	bd10      	pop	{r4, pc}
 80021b8:	38c90fdb 	.word	0x38c90fdb

080021bc <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80021bc:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80021be:	2103      	movs	r1, #3
{
 80021c0:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80021c2:	6800      	ldr	r0, [r0, #0]
 80021c4:	f008 f9ca 	bl	800a55c <STM_NextState>

  if ( RetVal == true )
 80021c8:	b108      	cbz	r0, 80021ce <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80021ca:	2301      	movs	r3, #1
 80021cc:	7723      	strb	r3, [r4, #28]
  }

  return RetVal;
}
 80021ce:	bd10      	pop	{r4, pc}

080021d0 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80021d0:	6800      	ldr	r0, [r0, #0]
 80021d2:	2107      	movs	r1, #7
 80021d4:	f008 b9c2 	b.w	800a55c <STM_NextState>

080021d8 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 80021d8:	6800      	ldr	r0, [r0, #0]
 80021da:	f008 ba35 	b.w	800a648 <STM_FaultAcknowledged>
 80021de:	bf00      	nop

080021e0 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 80021e0:	6800      	ldr	r0, [r0, #0]
 80021e2:	2101      	movs	r1, #1
 80021e4:	f008 b9ba 	b.w	800a55c <STM_NextState>

080021e8 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 80021e8:	b178      	cbz	r0, 800220a <MCI_ExecBufferedCommands+0x22>
{
 80021ea:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80021ec:	7f03      	ldrb	r3, [r0, #28]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	4604      	mov	r4, r0
 80021f2:	d000      	beq.n	80021f6 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 80021f4:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 80021f6:	7c01      	ldrb	r1, [r0, #16]
 80021f8:	2902      	cmp	r1, #2
 80021fa:	d020      	beq.n	800223e <MCI_ExecBufferedCommands+0x56>
 80021fc:	2903      	cmp	r1, #3
 80021fe:	d005      	beq.n	800220c <MCI_ExecBufferedCommands+0x24>
 8002200:	2901      	cmp	r1, #1
 8002202:	d00c      	beq.n	800221e <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8002204:	2303      	movs	r3, #3
 8002206:	7723      	strb	r3, [r4, #28]
}
 8002208:	bd10      	pop	{r4, pc}
 800220a:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800220c:	6882      	ldr	r2, [r0, #8]
 800220e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8002212:	f8d0 3016 	ldr.w	r3, [r0, #22]
 8002216:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8002218:	2302      	movs	r3, #2
 800221a:	7723      	strb	r3, [r4, #28]
}
 800221c:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800221e:	6883      	ldr	r3, [r0, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8002226:	6840      	ldr	r0, [r0, #4]
 8002228:	f008 f8d8 	bl	800a3dc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 800222c:	8b62      	ldrh	r2, [r4, #26]
 800222e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8002232:	6860      	ldr	r0, [r4, #4]
 8002234:	f008 f8d6 	bl	800a3e4 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8002238:	2800      	cmp	r0, #0
 800223a:	d0e3      	beq.n	8002204 <MCI_ExecBufferedCommands+0x1c>
 800223c:	e7ec      	b.n	8002218 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800223e:	6883      	ldr	r3, [r0, #8]
 8002240:	2100      	movs	r1, #0
 8002242:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8002246:	6840      	ldr	r0, [r0, #4]
 8002248:	f008 f8c8 	bl	800a3dc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 800224c:	8b62      	ldrh	r2, [r4, #26]
 800224e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8002252:	6860      	ldr	r0, [r4, #4]
 8002254:	f008 f8c6 	bl	800a3e4 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8002258:	2800      	cmp	r0, #0
 800225a:	d0d3      	beq.n	8002204 <MCI_ExecBufferedCommands+0x1c>
 800225c:	e7dc      	b.n	8002218 <MCI_ExecBufferedCommands+0x30>
 800225e:	bf00      	nop

08002260 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8002260:	6800      	ldr	r0, [r0, #0]
 8002262:	f008 b9ef 	b.w	800a644 <STM_GetState>
 8002266:	bf00      	nop

08002268 <MCI_GetCurrentPosition>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval float It returns the current mechanical angular position of the rotor.
  */
__weak float MCI_GetCurrentPosition( MCI_Handle_t * pHandle )
{
  return TC_GetCurrentPosition( pHandle->pPosCtrl );
 8002268:	68c0      	ldr	r0, [r0, #12]
 800226a:	f008 bc45 	b.w	800aaf8 <TC_GetCurrentPosition>
 800226e:	bf00      	nop

08002270 <MCI_GetTargetPosition>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval float It returns the target mechanical angular position of the rotor.
  */
__weak float MCI_GetTargetPosition( MCI_Handle_t * pHandle )
{
  return TC_GetTargetPosition( pHandle->pPosCtrl );
 8002270:	68c0      	ldr	r0, [r0, #12]
 8002272:	f008 bc53 	b.w	800ab1c <TC_GetTargetPosition>
 8002276:	bf00      	nop

08002278 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8002278:	7f40      	ldrb	r0, [r0, #29]
 800227a:	4770      	bx	lr

0800227c <MCI_GetLastRampFinalSpeed>:
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
 {
   return  pHandle->hFinalSpeed;
 }
 800227c:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop

08002284 <MCI_GetLastRampFinalTorque>:
  * @retval int16_t last ramp final torque sent by the user expressed in digit
  */
__weak int16_t MCI_GetLastRampFinalTorque( MCI_Handle_t * pHandle )
{
    return pHandle->hFinalTorque;
}
 8002284:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop

0800228c <MCI_GetLastRampFinalDuration>:
  * @retval uint16_t last ramp final torque sent by the user expressed in digit
  */
__weak uint16_t MCI_GetLastRampFinalDuration( MCI_Handle_t * pHandle )
{
    return pHandle->hDurationms;
}
 800228c:	8b40      	ldrh	r0, [r0, #26]
 800228e:	4770      	bx	lr

08002290 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8002290:	6840      	ldr	r0, [r0, #4]
 8002292:	f008 b8ef 	b.w	800a474 <STC_StopRamp>
 8002296:	bf00      	nop

08002298 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8002298:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 800229a:	6840      	ldr	r0, [r0, #4]
 800229c:	f008 f884 	bl	800a3a8 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 80022a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 80022a4:	f008 b82c 	b.w	800a300 <SPD_GetAvrgMecSpeedUnit>

080022a8 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 80022a8:	6840      	ldr	r0, [r0, #4]
 80022aa:	f008 b887 	b.w	800a3bc <STC_GetMecSpeedRefUnit>
 80022ae:	bf00      	nop

080022b0 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 80022b0:	6882      	ldr	r2, [r0, #8]
 80022b2:	6810      	ldr	r0, [r2, #0]
 80022b4:	2300      	movs	r3, #0
 80022b6:	b282      	uxth	r2, r0
 80022b8:	f362 030f 	bfi	r3, r2, #0, #16
 80022bc:	0c00      	lsrs	r0, r0, #16
 80022be:	f360 431f 	bfi	r3, r0, #16, #16
{
 80022c2:	b082      	sub	sp, #8
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	b002      	add	sp, #8
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop

080022cc <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 80022cc:	6882      	ldr	r2, [r0, #8]
 80022ce:	6850      	ldr	r0, [r2, #4]
 80022d0:	2300      	movs	r3, #0
 80022d2:	b282      	uxth	r2, r0
 80022d4:	f362 030f 	bfi	r3, r2, #0, #16
 80022d8:	0c00      	lsrs	r0, r0, #16
 80022da:	f360 431f 	bfi	r3, r0, #16, #16
{
 80022de:	b082      	sub	sp, #8
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	b002      	add	sp, #8
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop

080022e8 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 80022e8:	6882      	ldr	r2, [r0, #8]
 80022ea:	68d0      	ldr	r0, [r2, #12]
 80022ec:	2300      	movs	r3, #0
 80022ee:	b282      	uxth	r2, r0
 80022f0:	f362 030f 	bfi	r3, r2, #0, #16
 80022f4:	0c00      	lsrs	r0, r0, #16
 80022f6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80022fa:	b082      	sub	sp, #8
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	b002      	add	sp, #8
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop

08002304 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8002304:	6882      	ldr	r2, [r0, #8]
 8002306:	6910      	ldr	r0, [r2, #16]
 8002308:	2300      	movs	r3, #0
 800230a:	b282      	uxth	r2, r0
 800230c:	f362 030f 	bfi	r3, r2, #0, #16
 8002310:	0c00      	lsrs	r0, r0, #16
 8002312:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002316:	b082      	sub	sp, #8
}
 8002318:	4618      	mov	r0, r3
 800231a:	b002      	add	sp, #8
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop

08002320 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8002320:	6882      	ldr	r2, [r0, #8]
 8002322:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8002326:	2300      	movs	r3, #0
 8002328:	b282      	uxth	r2, r0
 800232a:	f362 030f 	bfi	r3, r2, #0, #16
 800232e:	0c00      	lsrs	r0, r0, #16
 8002330:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002334:	b082      	sub	sp, #8
}
 8002336:	4618      	mov	r0, r3
 8002338:	b002      	add	sp, #8
 800233a:	4770      	bx	lr

0800233c <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 800233c:	6882      	ldr	r2, [r0, #8]
 800233e:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8002342:	2300      	movs	r3, #0
 8002344:	b282      	uxth	r2, r0
 8002346:	f362 030f 	bfi	r3, r2, #0, #16
 800234a:	0c00      	lsrs	r0, r0, #16
 800234c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002350:	b082      	sub	sp, #8
}
 8002352:	4618      	mov	r0, r3
 8002354:	b002      	add	sp, #8
 8002356:	4770      	bx	lr

08002358 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8002358:	6883      	ldr	r3, [r0, #8]
}
 800235a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800235e:	4770      	bx	lr

08002360 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8002360:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8002362:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8002366:	f008 f8bf 	bl	800a4e8 <STC_GetDefaultIqdref>
 800236a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800236e:	8220      	strh	r0, [r4, #16]
 8002370:	8263      	strh	r3, [r4, #18]
}
 8002372:	bd10      	pop	{r4, pc}

08002374 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8002374:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8002376:	f644 11e6 	movw	r1, #18918	; 0x49e6
 800237a:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 800237e:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8002382:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8002386:	4250      	negs	r0, r2
 8002388:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 800238c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8002390:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8002392:	da05      	bge.n	80023a0 <MCM_Clarke+0x2c>
 8002394:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8002396:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 800239a:	da0c      	bge.n	80023b6 <MCM_Clarke+0x42>
 800239c:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <MCM_Clarke+0x50>)
 800239e:	e001      	b.n	80023a4 <MCM_Clarke+0x30>
 80023a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2000      	movs	r0, #0
 80023a8:	b292      	uxth	r2, r2
 80023aa:	f363 000f 	bfi	r0, r3, #0, #16
 80023ae:	f362 401f 	bfi	r0, r2, #16, #16
}
 80023b2:	b004      	add	sp, #16
 80023b4:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 80023b6:	4803      	ldr	r0, [pc, #12]	; (80023c4 <MCM_Clarke+0x50>)
 80023b8:	b20a      	sxth	r2, r1
 80023ba:	4282      	cmp	r2, r0
 80023bc:	bfb8      	it	lt
 80023be:	4602      	movlt	r2, r0
 80023c0:	e7f0      	b.n	80023a4 <MCM_Clarke+0x30>
 80023c2:	bf00      	nop
 80023c4:	ffff8001 	.word	0xffff8001

080023c8 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <MCM_Trig_Functions+0x28>)
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 80023ca:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 80023ce:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80023d2:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
 80023d6:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 80023d8:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80023da:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 80023dc:	2000      	movs	r0, #0
 80023de:	b29a      	uxth	r2, r3
 80023e0:	f362 000f 	bfi	r0, r2, #0, #16
 80023e4:	0c1b      	lsrs	r3, r3, #16
{
 80023e6:	b082      	sub	sp, #8
  return (CosSin.Components);
 80023e8:	f363 401f 	bfi	r0, r3, #16, #16

}
 80023ec:	b002      	add	sp, #8
 80023ee:	4770      	bx	lr
 80023f0:	40020c00 	.word	0x40020c00

080023f4 <MCM_Park>:
{
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	4605      	mov	r5, r0
 80023fa:	9001      	str	r0, [sp, #4]
 80023fc:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80023fe:	4608      	mov	r0, r1
 8002400:	f7ff ffe2 	bl	80023c8 <MCM_Trig_Functions>
 8002404:	b22d      	sxth	r5, r5
 8002406:	b204      	sxth	r4, r0
 8002408:	1436      	asrs	r6, r6, #16
 800240a:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 800240c:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8002410:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8002414:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002418:	da12      	bge.n	8002440 <MCM_Park+0x4c>
 800241a:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 800241c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002420:	4914      	ldr	r1, [pc, #80]	; (8002474 <MCM_Park+0x80>)
 8002422:	da21      	bge.n	8002468 <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8002424:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8002428:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 800242c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8002430:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8002434:	da07      	bge.n	8002446 <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8002436:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 800243a:	da0f      	bge.n	800245c <MCM_Park+0x68>
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <MCM_Park+0x80>)
 800243e:	e004      	b.n	800244a <MCM_Park+0x56>
 8002440:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002444:	e7ee      	b.n	8002424 <MCM_Park+0x30>
 8002446:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 800244a:	b28a      	uxth	r2, r1
 800244c:	2000      	movs	r0, #0
 800244e:	b29b      	uxth	r3, r3
 8002450:	f362 000f 	bfi	r0, r2, #0, #16
 8002454:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002458:	b004      	add	sp, #16
 800245a:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 800245c:	4805      	ldr	r0, [pc, #20]	; (8002474 <MCM_Park+0x80>)
 800245e:	b213      	sxth	r3, r2
 8002460:	4283      	cmp	r3, r0
 8002462:	bfb8      	it	lt
 8002464:	4603      	movlt	r3, r0
 8002466:	e7f0      	b.n	800244a <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8002468:	b21a      	sxth	r2, r3
 800246a:	4291      	cmp	r1, r2
 800246c:	bfb8      	it	lt
 800246e:	4611      	movlt	r1, r2
 8002470:	e7d8      	b.n	8002424 <MCM_Park+0x30>
 8002472:	bf00      	nop
 8002474:	ffff8001 	.word	0xffff8001

08002478 <MCM_Rev_Park>:
{
 8002478:	b530      	push	{r4, r5, lr}
 800247a:	b085      	sub	sp, #20
 800247c:	4604      	mov	r4, r0
 800247e:	9001      	str	r0, [sp, #4]
 8002480:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8002482:	4608      	mov	r0, r1
 8002484:	f7ff ffa0 	bl	80023c8 <MCM_Trig_Functions>
 8002488:	142d      	asrs	r5, r5, #16
 800248a:	1403      	asrs	r3, r0, #16
 800248c:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 800248e:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8002492:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8002494:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8002498:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 800249c:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 80024a0:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 80024a4:	2000      	movs	r0, #0
 80024a6:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80024aa:	f362 000f 	bfi	r0, r2, #0, #16
 80024ae:	f363 401f 	bfi	r0, r3, #16, #16
}
 80024b2:	b005      	add	sp, #20
 80024b4:	bd30      	pop	{r4, r5, pc}
 80024b6:	bf00      	nop

080024b8 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 80024b8:	2800      	cmp	r0, #0
 80024ba:	dd09      	ble.n	80024d0 <MCM_Sqrt+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80024bc:	b672      	cpsid	i
  {

    /* disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <MCM_Sqrt+0x1c>)
 80024c0:	f240 1269 	movw	r2, #361	; 0x169
 80024c4:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 80024c6:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80024c8:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, (uint32_t) (wInput));
    /* Read sqrt and return */
    wtemprootnew = ((int32_t) (LL_CORDIC_ReadData(CORDIC))>>15);
 80024ca:	13c0      	asrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 80024cc:	b662      	cpsie	i
}
 80024ce:	4770      	bx	lr
	__enable_irq();

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 80024d0:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 80024d2:	4770      	bx	lr
 80024d4:	40020c00 	.word	0x40020c00

080024d8 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80024d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024da:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 80024de:	4b1b      	ldr	r3, [pc, #108]	; (800254c <FOC_Clear+0x74>)
 80024e0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80024e4:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80024e8:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 80024ea:	2500      	movs	r5, #0
{
 80024ec:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 80024ee:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 80024f2:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 80024f4:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 80024f6:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 80024fa:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 80024fe:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8002502:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8002506:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800250a:	4811      	ldr	r0, [pc, #68]	; (8002550 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 800250c:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800250e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002512:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002516:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8002518:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 800251a:	50d5      	str	r5, [r2, r3]
 800251c:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8002520:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002522:	f006 fe69 	bl	80091f8 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <FOC_Clear+0x7c>)
 8002528:	4629      	mov	r1, r5
 800252a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800252e:	f006 fe63 	bl	80091f8 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <FOC_Clear+0x80>)
 8002534:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002538:	f007 ff38 	bl	800a3ac <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800253c:	4b07      	ldr	r3, [pc, #28]	; (800255c <FOC_Clear+0x84>)
 800253e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8002542:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002546:	f000 bda1 	b.w	800308c <PWMC_SwitchOffPWM>
 800254a:	bf00      	nop
 800254c:	20000c38 	.word	0x20000c38
 8002550:	200004ec 	.word	0x200004ec
 8002554:	200004e8 	.word	0x200004e8
 8002558:	200004f4 	.word	0x200004f4
 800255c:	20000c2c 	.word	0x20000c2c

08002560 <MCboot>:
{
 8002560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8002564:	4e45      	ldr	r6, [pc, #276]	; (800267c <MCboot+0x11c>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002566:	4d46      	ldr	r5, [pc, #280]	; (8002680 <MCboot+0x120>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8002568:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80026cc <MCboot+0x16c>
  ENC_Init (&ENCODER_M1);
 800256c:	4f45      	ldr	r7, [pc, #276]	; (8002684 <MCboot+0x124>)
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 800256e:	4c46      	ldr	r4, [pc, #280]	; (8002688 <MCboot+0x128>)
 8002570:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80026d0 <MCboot+0x170>
 8002574:	f8df b15c 	ldr.w	fp, [pc, #348]	; 80026d4 <MCboot+0x174>
  PID_HandleInit(&PID_PosParamsM1);
 8002578:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80026d8 <MCboot+0x178>
{
 800257c:	b087      	sub	sp, #28
 800257e:	4602      	mov	r2, r0
  STM_Init(&STM[M1]);
 8002580:	4630      	mov	r0, r6
{
 8002582:	9203      	str	r2, [sp, #12]
  STM_Init(&STM[M1]);
 8002584:	f007 ffc6 	bl	800a514 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 8002588:	4a40      	ldr	r2, [pc, #256]	; (800268c <MCboot+0x12c>)
  bMCBootCompleted = 0;
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <MCboot+0x130>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800258c:	4841      	ldr	r0, [pc, #260]	; (8002694 <MCboot+0x134>)
  pCLM[M1] = &CircleLimitationM1;
 800258e:	4942      	ldr	r1, [pc, #264]	; (8002698 <MCboot+0x138>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002590:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 8002592:	2500      	movs	r5, #0
 8002594:	701d      	strb	r5, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 8002596:	6011      	str	r1, [r2, #0]
  R3_2_Init(&PWM_Handle_M1);
 8002598:	f007 fa64 	bl	8009a64 <R3_2_Init>
  ASPEP_start (&aspepOverUartA);
 800259c:	483f      	ldr	r0, [pc, #252]	; (800269c <MCboot+0x13c>)
 800259e:	f7fe fb17 	bl	8000bd0 <ASPEP_start>
  startTimers();
 80025a2:	f006 fef9 	bl	8009398 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80025a6:	4648      	mov	r0, r9
 80025a8:	f006 fe12 	bl	80091d0 <PID_HandleInit>
  ENC_Init (&ENCODER_M1);
 80025ac:	4638      	mov	r0, r7
 80025ae:	f006 fa19 	bl	80089e4 <ENC_Init>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80025b2:	6821      	ldr	r1, [r4, #0]
 80025b4:	463b      	mov	r3, r7
 80025b6:	4642      	mov	r2, r8
 80025b8:	4658      	mov	r0, fp
 80025ba:	f006 f9c3 	bl	8008944 <EAC_Init>
  pEAC[M1] = &EncAlignCtrlM1;
 80025be:	4a38      	ldr	r2, [pc, #224]	; (80026a0 <MCboot+0x140>)
  PID_HandleInit(&PID_PosParamsM1);
 80025c0:	4650      	mov	r0, sl
  pEAC[M1] = &EncAlignCtrlM1;
 80025c2:	f8c2 b000 	str.w	fp, [r2]
  PID_HandleInit(&PID_PosParamsM1);
 80025c6:	f006 fe03 	bl	80091d0 <PID_HandleInit>
  TC_Init(&PosCtrlM1, &PID_PosParamsM1, &SpeednTorqCtrlM1, &ENCODER_M1);
 80025ca:	463b      	mov	r3, r7
 80025cc:	4651      	mov	r1, sl
 80025ce:	4a35      	ldr	r2, [pc, #212]	; (80026a4 <MCboot+0x144>)
 80025d0:	4835      	ldr	r0, [pc, #212]	; (80026a8 <MCboot+0x148>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80025d2:	f8df a108 	ldr.w	sl, [pc, #264]	; 80026dc <MCboot+0x17c>
  TC_Init(&PosCtrlM1, &PID_PosParamsM1, &SpeednTorqCtrlM1, &ENCODER_M1);
 80025d6:	f008 f849 	bl	800a66c <TC_Init>
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80025da:	463a      	mov	r2, r7
 80025dc:	4649      	mov	r1, r9
 80025de:	6820      	ldr	r0, [r4, #0]
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 80025e0:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80026e0 <MCboot+0x180>
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80025e4:	f007 feca 	bl	800a37c <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 80025e8:	4640      	mov	r0, r8
 80025ea:	f008 fab9 	bl	800ab60 <VSS_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 80025ee:	482f      	ldr	r0, [pc, #188]	; (80026ac <MCboot+0x14c>)
 80025f0:	f006 fdee 	bl	80091d0 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80025f4:	482e      	ldr	r0, [pc, #184]	; (80026b0 <MCboot+0x150>)
 80025f6:	f006 fdeb 	bl	80091d0 <PID_HandleInit>
  RVBS_Init(&BusVoltageSensor_M1);
 80025fa:	482e      	ldr	r0, [pc, #184]	; (80026b4 <MCboot+0x154>)
 80025fc:	f007 fe24 	bl	800a248 <RVBS_Init>
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002600:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <MCboot+0x158>)
 8002602:	492c      	ldr	r1, [pc, #176]	; (80026b4 <MCboot+0x154>)
 8002604:	681b      	ldr	r3, [r3, #0]
  NTC_Init(&TempSensor_M1);
 8002606:	482d      	ldr	r0, [pc, #180]	; (80026bc <MCboot+0x15c>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002608:	e9c3 a143 	strd	sl, r1, [r3, #268]	; 0x10c
  NTC_Init(&TempSensor_M1);
 800260c:	f006 fd9c 	bl	8009148 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <MCboot+0x160>)
 8002612:	482c      	ldr	r0, [pc, #176]	; (80026c4 <MCboot+0x164>)
 8002614:	6018      	str	r0, [r3, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8002616:	2701      	movs	r7, #1
  REMNG_Init(pREMNG[M1]);
 8002618:	f007 fe64 	bl	800a2e4 <REMNG_Init>
  FOC_Clear(M1);
 800261c:	4628      	mov	r0, r5
 800261e:	f7ff ff5b 	bl	80024d8 <FOC_Clear>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002622:	6820      	ldr	r0, [r4, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8002624:	f88a 7024 	strb.w	r7, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002628:	f007 ff5e 	bl	800a4e8 <STC_GetDefaultIqdref>
 800262c:	4603      	mov	r3, r0
 800262e:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8002632:	f8aa 3010 	strh.w	r3, [sl, #16]
 8002636:	f8aa 2012 	strh.w	r2, [sl, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800263a:	6820      	ldr	r0, [r4, #0]
 800263c:	f007 ff54 	bl	800a4e8 <STC_GetDefaultIqdref>
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <MCboot+0x168>)
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	9300      	str	r3, [sp, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002648:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 800264c:	4653      	mov	r3, sl
 800264e:	4631      	mov	r1, r6
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002650:	f8aa c014 	strh.w	ip, [sl, #20]
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 8002654:	4648      	mov	r0, r9
 8002656:	f7ff fd47 	bl	80020e8 <MCI_Init>
  MCI_ExecSpeedRamp(&Mci[M1],
 800265a:	6820      	ldr	r0, [r4, #0]
 800265c:	f007 ff40 	bl	800a4e0 <STC_GetMecSpeedRefUnitDefault>
 8002660:	462a      	mov	r2, r5
 8002662:	4601      	mov	r1, r0
 8002664:	4648      	mov	r0, r9
 8002666:	f7ff fd4f 	bl	8002108 <MCI_ExecSpeedRamp>
  pMCIList[M1] = &Mci[M1];
 800266a:	9a03      	ldr	r2, [sp, #12]
  bMCBootCompleted = 1;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <MCboot+0x130>)
  pMCIList[M1] = &Mci[M1];
 800266e:	f8c2 9000 	str.w	r9, [r2]
  bMCBootCompleted = 1;
 8002672:	701f      	strb	r7, [r3, #0]
}
 8002674:	b007      	add	sp, #28
 8002676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800267a:	bf00      	nop
 800267c:	20000c14 	.word	0x20000c14
 8002680:	20000c2c 	.word	0x20000c2c
 8002684:	200000dc 	.word	0x200000dc
 8002688:	200004f4 	.word	0x200004f4
 800268c:	20000c60 	.word	0x20000c60
 8002690:	200006d1 	.word	0x200006d1
 8002694:	20000338 	.word	0x20000338
 8002698:	20000028 	.word	0x20000028
 800269c:	20000620 	.word	0x20000620
 80026a0:	20000c30 	.word	0x20000c30
 80026a4:	20000450 	.word	0x20000450
 80026a8:	200003c8 	.word	0x200003c8
 80026ac:	200001a0 	.word	0x200001a0
 80026b0:	20000174 	.word	0x20000174
 80026b4:	20000000 	.word	0x20000000
 80026b8:	200004e4 	.word	0x200004e4
 80026bc:	20000484 	.word	0x20000484
 80026c0:	20000c64 	.word	0x20000c64
 80026c4:	20000438 	.word	0x20000438
 80026c8:	200004f0 	.word	0x200004f0
 80026cc:	200001cc 	.word	0x200001cc
 80026d0:	200004ac 	.word	0x200004ac
 80026d4:	20000158 	.word	0x20000158
 80026d8:	200001f8 	.word	0x200001f8
 80026dc:	20000c38 	.word	0x20000c38
 80026e0:	20000bf4 	.word	0x20000bf4

080026e4 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop

080026e8 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80026e8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <FOC_CalcCurrRef+0x24>)
 80026ec:	2426      	movs	r4, #38	; 0x26
 80026ee:	fb04 3400 	mla	r4, r4, r0, r3
 80026f2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80026f6:	b103      	cbz	r3, 80026fa <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80026f8:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <FOC_CalcCurrRef+0x28>)
 80026fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002700:	f007 febc 	bl	800a47c <STC_CalcTorqueReference>
 8002704:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8002706:	8220      	strh	r0, [r4, #16]
}
 8002708:	bd10      	pop	{r4, pc}
 800270a:	bf00      	nop
 800270c:	20000c38 	.word	0x20000c38
 8002710:	200004f4 	.word	0x200004f4

08002714 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002714:	4b01      	ldr	r3, [pc, #4]	; (800271c <TSK_SetChargeBootCapDelayM1+0x8>)
 8002716:	8018      	strh	r0, [r3, #0]
}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	200006d2 	.word	0x200006d2

08002720 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8002722:	8818      	ldrh	r0, [r3, #0]
 8002724:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002726:	fab0 f080 	clz	r0, r0
 800272a:	0940      	lsrs	r0, r0, #5
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	200006d2 	.word	0x200006d2

08002734 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002734:	4b01      	ldr	r3, [pc, #4]	; (800273c <TSK_SetStopPermanencyTimeM1+0x8>)
 8002736:	8018      	strh	r0, [r3, #0]
}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	200006d6 	.word	0x200006d6

08002740 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002742:	8818      	ldrh	r0, [r3, #0]
 8002744:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002746:	fab0 f080 	clz	r0, r0
 800274a:	0940      	lsrs	r0, r0, #5
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	200006d6 	.word	0x200006d6

08002754 <TSK_MediumFrequencyTaskM1>:
{
 8002754:	b510      	push	{r4, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 8002756:	4c91      	ldr	r4, [pc, #580]	; (800299c <TSK_MediumFrequencyTaskM1+0x248>)
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8002758:	4891      	ldr	r0, [pc, #580]	; (80029a0 <TSK_MediumFrequencyTaskM1+0x24c>)
{
 800275a:	b082      	sub	sp, #8
  int16_t wAux = 0;
 800275c:	2300      	movs	r3, #0
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 800275e:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 8002762:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8002766:	f006 f9ad 	bl	8008ac4 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 800276a:	6820      	ldr	r0, [r4, #0]
 800276c:	f006 fde0 	bl	8009330 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8002770:	488c      	ldr	r0, [pc, #560]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 8002772:	f007 ff67 	bl	800a644 <STM_GetState>
  switch ( StateM1 )
 8002776:	2812      	cmp	r0, #18
 8002778:	d818      	bhi.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
 800277a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800277e:	002a      	.short	0x002a
 8002780:	00440038 	.word	0x00440038
 8002784:	00620053 	.word	0x00620053
 8002788:	007d006b 	.word	0x007d006b
 800278c:	009b0088 	.word	0x009b0088
 8002790:	00170013 	.word	0x00170013
 8002794:	00170017 	.word	0x00170017
 8002798:	00b400a5 	.word	0x00b400a5
 800279c:	00d500c1 	.word	0x00d500c1
 80027a0:	001900e4 	.word	0x001900e4
    STM_NextState( &STM[M1], IDLE );
 80027a4:	487f      	ldr	r0, [pc, #508]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 80027a6:	2100      	movs	r1, #0
 80027a8:	f007 fed8 	bl	800a55c <STM_NextState>
}
 80027ac:	b002      	add	sp, #8
 80027ae:	bd10      	pop	{r4, pc}
    ENC_Clear( &ENCODER_M1 );
 80027b0:	487b      	ldr	r0, [pc, #492]	; (80029a0 <TSK_MediumFrequencyTaskM1+0x24c>)
 80027b2:	f006 f955 	bl	8008a60 <ENC_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80027b6:	487b      	ldr	r0, [pc, #492]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 80027b8:	2104      	movs	r1, #4
 80027ba:	f007 fecf 	bl	800a55c <STM_NextState>
 80027be:	2800      	cmp	r0, #0
 80027c0:	d0f4      	beq.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
      FOC_Clear( M1 );
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7ff fe88 	bl	80024d8 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 80027c8:	4b77      	ldr	r3, [pc, #476]	; (80029a8 <TSK_MediumFrequencyTaskM1+0x254>)
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	f006 ffd8 	bl	8009780 <R3_2_SwitchOnPWM>
 80027d0:	e7ec      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 80027d2:	4876      	ldr	r0, [pc, #472]	; (80029ac <TSK_MediumFrequencyTaskM1+0x258>)
 80027d4:	f006 f904 	bl	80089e0 <EAC_GetRestartState>
 80027d8:	2800      	cmp	r0, #0
 80027da:	d0e7      	beq.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 80027dc:	4873      	ldr	r0, [pc, #460]	; (80029ac <TSK_MediumFrequencyTaskM1+0x258>)
 80027de:	2100      	movs	r1, #0
 80027e0:	f006 f8fc 	bl	80089dc <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_START );
 80027e4:	2103      	movs	r1, #3
 80027e6:	486f      	ldr	r0, [pc, #444]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 80027e8:	f007 feb8 	bl	800a55c <STM_NextState>
 80027ec:	e7de      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 80027ee:	4b6e      	ldr	r3, [pc, #440]	; (80029a8 <TSK_MediumFrequencyTaskM1+0x254>)
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	f006 ff9d 	bl	8009730 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80027f6:	2014      	movs	r0, #20
 80027f8:	f7ff ff8c 	bl	8002714 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 80027fc:	210d      	movs	r1, #13
 80027fe:	4869      	ldr	r0, [pc, #420]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 8002800:	f007 feac 	bl	800a55c <STM_NextState>
    break;
 8002804:	e7d2      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 8002806:	4869      	ldr	r0, [pc, #420]	; (80029ac <TSK_MediumFrequencyTaskM1+0x258>)
 8002808:	f006 f8ce 	bl	80089a8 <EAC_Exec>
 800280c:	4604      	mov	r4, r0
 800280e:	2800      	cmp	r0, #0
 8002810:	f040 80b2 	bne.w	8002978 <TSK_MediumFrequencyTaskM1+0x224>
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 8002814:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <TSK_MediumFrequencyTaskM1+0x25c>)
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	f007 fe30 	bl	800a47c <STC_CalcTorqueReference>
      FOCVars[M1].Iqdref = IqdRef;
 800281c:	4b65      	ldr	r3, [pc, #404]	; (80029b4 <TSK_MediumFrequencyTaskM1+0x260>)
 800281e:	8258      	strh	r0, [r3, #18]
 8002820:	821c      	strh	r4, [r3, #16]
 8002822:	e7c3      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 8002824:	4861      	ldr	r0, [pc, #388]	; (80029ac <TSK_MediumFrequencyTaskM1+0x258>)
 8002826:	f006 f8d7 	bl	80089d8 <EAC_IsAligned>
 800282a:	2800      	cmp	r0, #0
 800282c:	f040 8098 	bne.w	8002960 <TSK_MediumFrequencyTaskM1+0x20c>
      EAC_SetRestartState( &EncAlignCtrlM1, true );
 8002830:	485e      	ldr	r0, [pc, #376]	; (80029ac <TSK_MediumFrequencyTaskM1+0x258>)
 8002832:	2101      	movs	r1, #1
 8002834:	f006 f8d2 	bl	80089dc <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 8002838:	2101      	movs	r1, #1
 800283a:	485a      	ldr	r0, [pc, #360]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 800283c:	f007 fe8e 	bl	800a55c <STM_NextState>
      break;
 8002840:	e7b4      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
        TC_EncAlignmentCommand(pPosCtrl[M1]);
 8002842:	4b5d      	ldr	r3, [pc, #372]	; (80029b8 <TSK_MediumFrequencyTaskM1+0x264>)
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	f008 f8b9 	bl	800a9bc <TC_EncAlignmentCommand>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 800284a:	2105      	movs	r1, #5
 800284c:	4855      	ldr	r0, [pc, #340]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 800284e:	f007 fe85 	bl	800a55c <STM_NextState>
    break;
 8002852:	e7ab      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
	  FOC_InitAdditionalMethods(M1);
 8002854:	2000      	movs	r0, #0
 8002856:	f7ff ff45 	bl	80026e4 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 800285a:	2000      	movs	r0, #0
 800285c:	f7ff ff44 	bl	80026e8 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8002860:	2106      	movs	r1, #6
 8002862:	4850      	ldr	r0, [pc, #320]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 8002864:	f007 fe7a 	bl	800a55c <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8002868:	4b51      	ldr	r3, [pc, #324]	; (80029b0 <TSK_MediumFrequencyTaskM1+0x25c>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	f007 fe4a 	bl	800a504 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8002870:	4852      	ldr	r0, [pc, #328]	; (80029bc <TSK_MediumFrequencyTaskM1+0x268>)
 8002872:	f7ff fcb9 	bl	80021e8 <MCI_ExecBufferedCommands>
    break;
 8002876:	e799      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
    TC_PositionRegulation(pPosCtrl[M1]);
 8002878:	4b4f      	ldr	r3, [pc, #316]	; (80029b8 <TSK_MediumFrequencyTaskM1+0x264>)
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	f008 f85c 	bl	800a938 <TC_PositionRegulation>
    MCI_ExecBufferedCommands( &Mci[M1] );
 8002880:	484e      	ldr	r0, [pc, #312]	; (80029bc <TSK_MediumFrequencyTaskM1+0x268>)
 8002882:	f7ff fcb1 	bl	80021e8 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8002886:	2000      	movs	r0, #0
 8002888:	f7ff ff2e 	bl	80026e8 <FOC_CalcCurrRef>
    break;
 800288c:	e78e      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800288e:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <TSK_MediumFrequencyTaskM1+0x254>)
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	f006 ffc1 	bl	8009818 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 8002896:	2000      	movs	r0, #0
 8002898:	f7ff fe1e 	bl	80024d8 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	f006 fc0f 	bl	80090c0 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80028a2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80028a6:	f7ff ff45 	bl	8002734 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80028aa:	2108      	movs	r1, #8
 80028ac:	483d      	ldr	r0, [pc, #244]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 80028ae:	f007 fe55 	bl	800a55c <STM_NextState>
    break;
 80028b2:	e77b      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80028b4:	f7ff ff44 	bl	8002740 <TSK_StopPermanencyTimeHasElapsedM1>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	f43f af77 	beq.w	80027ac <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], STOP_IDLE );
 80028be:	2109      	movs	r1, #9
 80028c0:	4838      	ldr	r0, [pc, #224]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 80028c2:	f007 fe4b 	bl	800a55c <STM_NextState>
 80028c6:	e771      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80028c8:	f7ff ff2a 	bl	8002720 <TSK_ChargeBootCapDelayHasElapsedM1>
 80028cc:	2800      	cmp	r0, #0
 80028ce:	f43f af6d 	beq.w	80027ac <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80028d2:	4b35      	ldr	r3, [pc, #212]	; (80029a8 <TSK_MediumFrequencyTaskM1+0x254>)
 80028d4:	2100      	movs	r1, #0
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	f000 fbda 	bl	8003090 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 80028dc:	210e      	movs	r1, #14
 80028de:	4831      	ldr	r0, [pc, #196]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 80028e0:	f007 fe3c 	bl	800a55c <STM_NextState>
 80028e4:	e762      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80028e6:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <TSK_MediumFrequencyTaskM1+0x254>)
 80028e8:	2101      	movs	r1, #1
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	f000 fbd0 	bl	8003090 <PWMC_CurrentReadingCalibr>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	f43f af5b 	beq.w	80027ac <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 80028f6:	210f      	movs	r1, #15
 80028f8:	482a      	ldr	r0, [pc, #168]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 80028fa:	f007 fe2f 	bl	800a55c <STM_NextState>
 80028fe:	e755      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002900:	4a2b      	ldr	r2, [pc, #172]	; (80029b0 <TSK_MediumFrequencyTaskM1+0x25c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002902:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <TSK_MediumFrequencyTaskM1+0x260>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002904:	6810      	ldr	r0, [r2, #0]
 8002906:	492e      	ldr	r1, [pc, #184]	; (80029c0 <TSK_MediumFrequencyTaskM1+0x26c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800290e:	f007 fd49 	bl	800a3a4 <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 8002912:	4826      	ldr	r0, [pc, #152]	; (80029ac <TSK_MediumFrequencyTaskM1+0x258>)
 8002914:	f006 f820 	bl	8008958 <EAC_StartAlignment>
    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 8002918:	4822      	ldr	r0, [pc, #136]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 800291a:	2102      	movs	r1, #2
 800291c:	f007 fe1e 	bl	800a55c <STM_NextState>
 8002920:	2800      	cmp	r0, #0
 8002922:	f43f af43 	beq.w	80027ac <TSK_MediumFrequencyTaskM1+0x58>
 8002926:	e74c      	b.n	80027c2 <TSK_MediumFrequencyTaskM1+0x6e>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8002928:	f7ff fefa 	bl	8002720 <TSK_ChargeBootCapDelayHasElapsedM1>
 800292c:	2800      	cmp	r0, #0
 800292e:	f43f af3d 	beq.w	80027ac <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <TSK_MediumFrequencyTaskM1+0x254>)
 8002934:	2100      	movs	r1, #0
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	f000 fbaa 	bl	8003090 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 800293c:	2111      	movs	r1, #17
 800293e:	4819      	ldr	r0, [pc, #100]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 8002940:	f007 fe0c 	bl	800a55c <STM_NextState>
 8002944:	e732      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <TSK_MediumFrequencyTaskM1+0x254>)
 8002948:	2101      	movs	r1, #1
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	f000 fba0 	bl	8003090 <PWMC_CurrentReadingCalibr>
 8002950:	2800      	cmp	r0, #0
 8002952:	f43f af2b 	beq.w	80027ac <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], CLEAR );
 8002956:	2112      	movs	r1, #18
 8002958:	4812      	ldr	r0, [pc, #72]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 800295a:	f007 fdff 	bl	800a55c <STM_NextState>
 800295e:	e725      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <TSK_MediumFrequencyTaskM1+0x254>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	f006 fee4 	bl	8009730 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8002968:	2014      	movs	r0, #20
 800296a:	f7ff fed3 	bl	8002714 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800296e:	2110      	movs	r1, #16
 8002970:	480c      	ldr	r0, [pc, #48]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 8002972:	f007 fdf3 	bl	800a55c <STM_NextState>
    break;
 8002976:	e719      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <TSK_MediumFrequencyTaskM1+0x254>)
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 800297a:	4c0d      	ldr	r4, [pc, #52]	; (80029b0 <TSK_MediumFrequencyTaskM1+0x25c>)
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	f006 ff4b 	bl	8009818 <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8002982:	6820      	ldr	r0, [r4, #0]
 8002984:	2101      	movs	r1, #1
 8002986:	f007 fd29 	bl	800a3dc <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 800298a:	6820      	ldr	r0, [r4, #0]
 800298c:	4904      	ldr	r1, [pc, #16]	; (80029a0 <TSK_MediumFrequencyTaskM1+0x24c>)
 800298e:	f007 fd09 	bl	800a3a4 <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 8002992:	2107      	movs	r1, #7
 8002994:	4803      	ldr	r0, [pc, #12]	; (80029a4 <TSK_MediumFrequencyTaskM1+0x250>)
 8002996:	f007 fde1 	bl	800a55c <STM_NextState>
 800299a:	e707      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x58>
 800299c:	200004e4 	.word	0x200004e4
 80029a0:	200000dc 	.word	0x200000dc
 80029a4:	20000c14 	.word	0x20000c14
 80029a8:	20000c2c 	.word	0x20000c2c
 80029ac:	20000158 	.word	0x20000158
 80029b0:	200004f4 	.word	0x200004f4
 80029b4:	20000c38 	.word	0x20000c38
 80029b8:	200004f0 	.word	0x200004f0
 80029bc:	20000bf4 	.word	0x20000bf4
 80029c0:	200004ac 	.word	0x200004ac

080029c4 <MC_Scheduler>:
  if (bMCBootCompleted == 1)
 80029c4:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <MC_Scheduler+0x7c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d000      	beq.n	80029ce <MC_Scheduler+0xa>
 80029cc:	4770      	bx	lr
{
 80029ce:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 80029d0:	4c1c      	ldr	r4, [pc, #112]	; (8002a44 <MC_Scheduler+0x80>)
 80029d2:	8823      	ldrh	r3, [r4, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b1a3      	cbz	r3, 8002a02 <MC_Scheduler+0x3e>
      hMFTaskCounterM1--;
 80029d8:	8823      	ldrh	r3, [r4, #0]
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29b      	uxth	r3, r3
 80029de:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80029e0:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <MC_Scheduler+0x84>)
 80029e2:	8813      	ldrh	r3, [r2, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	b11b      	cbz	r3, 80029f0 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80029e8:	8813      	ldrh	r3, [r2, #0]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80029f0:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <MC_Scheduler+0x88>)
 80029f2:	8813      	ldrh	r3, [r2, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	b11b      	cbz	r3, 8002a00 <MC_Scheduler+0x3c>
      hStopPermanencyCounterM1--;
 80029f8:	8813      	ldrh	r3, [r2, #0]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	8013      	strh	r3, [r2, #0]
}
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 8002a02:	4d13      	ldr	r5, [pc, #76]	; (8002a50 <MC_Scheduler+0x8c>)
      TSK_MediumFrequencyTaskM1();
 8002a04:	f7ff fea6 	bl	8002754 <TSK_MediumFrequencyTaskM1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 8002a08:	4629      	mov	r1, r5
 8002a0a:	f851 0b0c 	ldr.w	r0, [r1], #12
 8002a0e:	6883      	ldr	r3, [r0, #8]
 8002a10:	4798      	blx	r3
 8002a12:	6068      	str	r0, [r5, #4]
      if (MCP_Over_UartA.rxBuffer)
 8002a14:	b130      	cbz	r0, 8002a24 <MC_Scheduler+0x60>
        if (MCP_Over_UartA.pTransportLayer->fGetBuffer (MCP_Over_UartA.pTransportLayer, (void **) &MCP_Over_UartA.txBuffer, MCTL_SYNC))
 8002a16:	4629      	mov	r1, r5
 8002a18:	220a      	movs	r2, #10
 8002a1a:	f851 0b08 	ldr.w	r0, [r1], #8
 8002a1e:	6803      	ldr	r3, [r0, #0]
 8002a20:	4798      	blx	r3
 8002a22:	b910      	cbnz	r0, 8002a2a <MC_Scheduler+0x66>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8002a24:	2301      	movs	r3, #1
 8002a26:	8023      	strh	r3, [r4, #0]
 8002a28:	e7da      	b.n	80029e0 <MC_Scheduler+0x1c>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	f006 f93a 	bl	8008ca4 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket (MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer, MCP_Over_UartA.txLength, MCTL_SYNC);
 8002a30:	6828      	ldr	r0, [r5, #0]
 8002a32:	89ea      	ldrh	r2, [r5, #14]
 8002a34:	6846      	ldr	r6, [r0, #4]
 8002a36:	68a9      	ldr	r1, [r5, #8]
 8002a38:	230a      	movs	r3, #10
 8002a3a:	47b0      	blx	r6
 8002a3c:	e7f2      	b.n	8002a24 <MC_Scheduler+0x60>
 8002a3e:	bf00      	nop
 8002a40:	200006d1 	.word	0x200006d1
 8002a44:	200006d4 	.word	0x200006d4
 8002a48:	200006d2 	.word	0x200006d2
 8002a4c:	200006d6 	.word	0x200006d6
 8002a50:	200005fc 	.word	0x200005fc

08002a54 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8002a58:	4838      	ldr	r0, [pc, #224]	; (8002b3c <TSK_HighFrequencyTask+0xe8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002a5a:	4f39      	ldr	r7, [pc, #228]	; (8002b40 <TSK_HighFrequencyTask+0xec>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002a5c:	4c39      	ldr	r4, [pc, #228]	; (8002b44 <TSK_HighFrequencyTask+0xf0>)
{
 8002a5e:	b086      	sub	sp, #24
  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8002a60:	f006 f810 	bl	8008a84 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002a64:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <TSK_HighFrequencyTask+0xf4>)
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	f007 fc9e 	bl	800a3a8 <STC_GetSpeedSensor>
 8002a6c:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8002a6e:	f007 fc41 	bl	800a2f4 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002a72:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8002a74:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002a76:	6838      	ldr	r0, [r7, #0]
 8002a78:	f000 f9d2 	bl	8002e20 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8002a7c:	f001 fcec 	bl	8004458 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8002a80:	f001 fca0 	bl	80043c4 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8002a84:	9803      	ldr	r0, [sp, #12]
 8002a86:	f7ff fc75 	bl	8002374 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002a8a:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8002a8c:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002a8e:	f7ff fcb1 	bl	80023f4 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002a92:	4a2e      	ldr	r2, [pc, #184]	; (8002b4c <TSK_HighFrequencyTask+0xf8>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002a94:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002a98:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002a9a:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002a9c:	1ac9      	subs	r1, r1, r3
 8002a9e:	6810      	ldr	r0, [r2, #0]
 8002aa0:	f006 fbdc 	bl	800925c <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002aa4:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  Vqd.d = PI_Controller(pPIDId[M1],
 8002aa8:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <TSK_HighFrequencyTask+0xfc>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002aaa:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002aae:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8002ab0:	1a89      	subs	r1, r1, r2
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	f006 fbd2 	bl	800925c <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002ab8:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <TSK_HighFrequencyTask+0x100>)
 8002aba:	f8ad 8008 	strh.w	r8, [sp, #8]
 8002abe:	f8ad 000a 	strh.w	r0, [sp, #10]
 8002ac2:	9902      	ldr	r1, [sp, #8]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	f005 ff0d 	bl	80088e4 <Circle_Limitation>
 8002aca:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002acc:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002ace:	fa0f f883 	sxth.w	r8, r3
 8002ad2:	141d      	asrs	r5, r3, #16
 8002ad4:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002ad6:	f007 fc17 	bl	800a308 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002ada:	4631      	mov	r1, r6
 8002adc:	9802      	ldr	r0, [sp, #8]
 8002ade:	f7ff fccb 	bl	8002478 <MCM_Rev_Park>
 8002ae2:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002ae4:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002ae6:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002ae8:	f000 f99c 	bl	8002e24 <PWMC_SetPhaseVoltage>
 8002aec:	4601      	mov	r1, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8002aee:	9803      	ldr	r0, [sp, #12]
 8002af0:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002af2:	9804      	ldr	r0, [sp, #16]
 8002af4:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002af6:	9801      	ldr	r0, [sp, #4]
 8002af8:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8002afa:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8002afc:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8002afe:	f8a4 8016 	strh.w	r8, [r4, #22]
 8002b02:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8002b04:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002b06:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8002b0a:	d011      	beq.n	8002b30 <TSK_HighFrequencyTask+0xdc>
  GLOBAL_TIMESTAMP++;
 8002b0c:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <TSK_HighFrequencyTask+0x104>)
  if (MCPA_UART_A.Mark != 0)
 8002b0e:	4813      	ldr	r0, [pc, #76]	; (8002b5c <TSK_HighFrequencyTask+0x108>)
  GLOBAL_TIMESTAMP++;
 8002b10:	6813      	ldr	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 8002b12:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
  GLOBAL_TIMESTAMP++;
 8002b16:	3301      	adds	r3, #1
 8002b18:	6013      	str	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 8002b1a:	b919      	cbnz	r1, 8002b24 <TSK_HighFrequencyTask+0xd0>
}
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	b006      	add	sp, #24
 8002b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8002b24:	f006 f938 	bl	8008d98 <MCPA_dataLog>
}
 8002b28:	2000      	movs	r0, #0
 8002b2a:	b006      	add	sp, #24
 8002b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	480b      	ldr	r0, [pc, #44]	; (8002b60 <TSK_HighFrequencyTask+0x10c>)
 8002b34:	f007 fcf4 	bl	800a520 <STM_FaultProcessing>
 8002b38:	e7e8      	b.n	8002b0c <TSK_HighFrequencyTask+0xb8>
 8002b3a:	bf00      	nop
 8002b3c:	200000dc 	.word	0x200000dc
 8002b40:	20000c2c 	.word	0x20000c2c
 8002b44:	20000c38 	.word	0x20000c38
 8002b48:	200004f4 	.word	0x200004f4
 8002b4c:	200004ec 	.word	0x200004ec
 8002b50:	200004e8 	.word	0x200004e8
 8002b54:	20000c60 	.word	0x20000c60
 8002b58:	200006e0 	.word	0x200006e0
 8002b5c:	20000570 	.word	0x20000570
 8002b60:	20000c14 	.word	0x20000c14

08002b64 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002b66:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <TSK_SafetyTask_PWMOFF+0x90>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002b68:	4e23      	ldr	r6, [pc, #140]	; (8002bf8 <TSK_SafetyTask_PWMOFF+0x94>)
{
 8002b6a:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002b6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002b70:	f006 fafc 	bl	800916c <NTC_CalcAvTemp>
 8002b74:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002b76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002b7a:	f000 fab3 	bl	80030e4 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002b7e:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002b82:	4328      	orrs	r0, r5
 8002b84:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8002b86:	b36c      	cbz	r4, 8002be4 <TSK_SafetyTask_PWMOFF+0x80>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8002b88:	4f1c      	ldr	r7, [pc, #112]	; (8002bfc <TSK_SafetyTask_PWMOFF+0x98>)
 8002b8a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8002b8e:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8002b92:	43ea      	mvns	r2, r5
 8002b94:	b292      	uxth	r2, r2
 8002b96:	4629      	mov	r1, r5
 8002b98:	4638      	mov	r0, r7
 8002b9a:	f007 fcc1 	bl	800a520 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8002b9e:	4638      	mov	r0, r7
 8002ba0:	f007 fd50 	bl	800a644 <STM_GetState>
 8002ba4:	280a      	cmp	r0, #10
 8002ba6:	d002      	beq.n	8002bae <TSK_SafetyTask_PWMOFF+0x4a>
 8002ba8:	280b      	cmp	r0, #11
 8002baa:	d015      	beq.n	8002bd8 <TSK_SafetyTask_PWMOFF+0x74>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pEAC[bMotor] != MC_NULL)
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <TSK_SafetyTask_PWMOFF+0x9c>)
 8002bb0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002bb4:	b110      	cbz	r0, 8002bbc <TSK_SafetyTask_PWMOFF+0x58>
      EAC_SetRestartState( pEAC[bMotor], false );
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	f005 ff10 	bl	80089dc <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002bbc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002bc0:	f000 fa64 	bl	800308c <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7ff fc87 	bl	80024d8 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <TSK_SafetyTask_PWMOFF+0xa0>)
 8002bcc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8002bd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002bd4:	f006 ba74 	b.w	80090c0 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002bd8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 8002bdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002be0:	f000 ba54 	b.w	800308c <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8002be4:	4808      	ldr	r0, [pc, #32]	; (8002c08 <TSK_SafetyTask_PWMOFF+0xa4>)
 8002be6:	f007 fb47 	bl	800a278 <RVBS_CalcAvVbus>
 8002bea:	f000 000e 	and.w	r0, r0, #14
 8002bee:	4305      	orrs	r5, r0
 8002bf0:	e7ca      	b.n	8002b88 <TSK_SafetyTask_PWMOFF+0x24>
 8002bf2:	bf00      	nop
 8002bf4:	200004f8 	.word	0x200004f8
 8002bf8:	20000c2c 	.word	0x20000c2c
 8002bfc:	20000c14 	.word	0x20000c14
 8002c00:	20000c30 	.word	0x20000c30
 8002c04:	200004e4 	.word	0x200004e4
 8002c08:	20000000 	.word	0x20000000

08002c0c <TSK_SafetyTask>:
{
 8002c0c:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <TSK_SafetyTask+0x1c>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d000      	beq.n	8002c18 <TSK_SafetyTask+0xc>
}
 8002c16:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7ff ffa3 	bl	8002b64 <TSK_SafetyTask_PWMOFF>
}
 8002c1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8002c22:	f001 bb9f 	b.w	8004364 <RCM_ExecUserConv>
 8002c26:	bf00      	nop
 8002c28:	200006d1 	.word	0x200006d1

08002c2c <MC_RunMotorControlTasks>:
{
 8002c2c:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <MC_RunMotorControlTasks+0x14>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	b903      	cbnz	r3, 8002c36 <MC_RunMotorControlTasks+0xa>
}
 8002c34:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8002c36:	f7ff fec5 	bl	80029c4 <MC_Scheduler>
    TSK_SafetyTask();
 8002c3a:	f7ff ffe7 	bl	8002c0c <TSK_SafetyTask>
}
 8002c3e:	bd08      	pop	{r3, pc}
 8002c40:	200006d1 	.word	0x200006d1

08002c44 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002c44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <TSK_HardwareFaultTask+0x18>)
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	f006 fde5 	bl	8009818 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002c4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8002c52:	4803      	ldr	r0, [pc, #12]	; (8002c60 <TSK_HardwareFaultTask+0x1c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	f007 bc62 	b.w	800a520 <STM_FaultProcessing>
 8002c5c:	20000c2c 	.word	0x20000c2c
 8002c60:	20000c14 	.word	0x20000c14

08002c64 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002c64:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002c66:	f7ff fa2d 	bl	80020c4 <MC_GetSTMStateMotor1>
 8002c6a:	b918      	cbnz	r0, 8002c74 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002c6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8002c70:	f7ff ba08 	b.w	8002084 <MC_StartMotor1>
}
 8002c74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002c78:	f7ff ba0a 	b.w	8002090 <MC_StopMotor1>

08002c7c <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002c7c:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c7e:	4a55      	ldr	r2, [pc, #340]	; (8002dd4 <mc_lock_pins+0x158>)
 8002c80:	4855      	ldr	r0, [pc, #340]	; (8002dd8 <mc_lock_pins+0x15c>)
 8002c82:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002c84:	2604      	movs	r6, #4
 8002c86:	b094      	sub	sp, #80	; 0x50
 8002c88:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c8a:	61d0      	str	r0, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8002c8c:	69d3      	ldr	r3, [r2, #28]
 8002c8e:	9313      	str	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c90:	4c52      	ldr	r4, [pc, #328]	; (8002ddc <mc_lock_pins+0x160>)
  (void) temp;
 8002c92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c94:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002c96:	2702      	movs	r7, #2
 8002c98:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002c9a:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002c9c:	69d3      	ldr	r3, [r2, #28]
 8002c9e:	9312      	str	r3, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ca0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ca4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
  (void) temp;
 8002ca8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002caa:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cac:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cae:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002cb0:	69d3      	ldr	r3, [r2, #28]
 8002cb2:	9311      	str	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cbc:	2501      	movs	r5, #1
  (void) temp;
 8002cbe:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cc2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cc4:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cc6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002cc8:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8002ccc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  (void) temp;
 8002cd0:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cd4:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cd6:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cd8:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002cda:	69d1      	ldr	r1, [r2, #28]
 8002cdc:	910f      	str	r1, [sp, #60]	; 0x3c
  (void) temp;
 8002cde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ce0:	493f      	ldr	r1, [pc, #252]	; (8002de0 <mc_lock_pins+0x164>)
 8002ce2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ce4:	2580      	movs	r5, #128	; 0x80
 8002ce6:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ce8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002cea:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8002cee:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  (void) temp;
 8002cf2:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cf6:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cf8:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cfa:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002cfc:	69dc      	ldr	r4, [r3, #28]
 8002cfe:	940d      	str	r4, [sp, #52]	; 0x34
  (void) temp;
 8002d00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d02:	4c38      	ldr	r4, [pc, #224]	; (8002de4 <mc_lock_pins+0x168>)
 8002d04:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d06:	2708      	movs	r7, #8
 8002d08:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d0a:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d0c:	69dc      	ldr	r4, [r3, #28]
 8002d0e:	940c      	str	r4, [sp, #48]	; 0x30
  (void) temp;
 8002d10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d12:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d14:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d16:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d18:	69d8      	ldr	r0, [r3, #28]
 8002d1a:	900b      	str	r0, [sp, #44]	; 0x2c
  (void) temp;
 8002d1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d1e:	4832      	ldr	r0, [pc, #200]	; (8002de8 <mc_lock_pins+0x16c>)
 8002d20:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d22:	2440      	movs	r4, #64	; 0x40
 8002d24:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d26:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d28:	69de      	ldr	r6, [r3, #28]
 8002d2a:	960a      	str	r6, [sp, #40]	; 0x28
  (void) temp;
 8002d2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d2e:	4e2f      	ldr	r6, [pc, #188]	; (8002dec <mc_lock_pins+0x170>)
 8002d30:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d32:	2720      	movs	r7, #32
 8002d34:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d36:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d38:	69de      	ldr	r6, [r3, #28]
 8002d3a:	9609      	str	r6, [sp, #36]	; 0x24
  (void) temp;
 8002d3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d3e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d40:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d42:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d44:	69d0      	ldr	r0, [r2, #28]
 8002d46:	9008      	str	r0, [sp, #32]
  (void) temp;
 8002d48:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d4a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d4c:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d4e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d50:	69d1      	ldr	r1, [r2, #28]
 8002d52:	9107      	str	r1, [sp, #28]
  (void) temp;
 8002d54:	9807      	ldr	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d56:	4926      	ldr	r1, [pc, #152]	; (8002df0 <mc_lock_pins+0x174>)
 8002d58:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d5a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d5e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d60:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d62:	69d9      	ldr	r1, [r3, #28]
 8002d64:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d66:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d6a:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 8002d6e:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d70:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d72:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d74:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d76:	69d9      	ldr	r1, [r3, #28]
 8002d78:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d7a:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d7e:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 8002d82:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d84:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d86:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d88:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d8a:	69d9      	ldr	r1, [r3, #28]
 8002d8c:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d92:	f44f 3188 	mov.w	r1, #69632	; 0x11000
  (void) temp;
 8002d96:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d98:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d9a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d9c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002da6:	f44f 33c0 	mov.w	r3, #98304	; 0x18000
  (void) temp;
 8002daa:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dac:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002dae:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002db0:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002db2:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <mc_lock_pins+0x178>)
  temp = READ_REG(GPIOx->LCKR);
 8002db6:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dbc:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 8002dc0:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dc2:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002dc4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dc6:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002dcc:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8002dce:	b014      	add	sp, #80	; 0x50
 8002dd0:	bcf0      	pop	{r4, r5, r6, r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	48000400 	.word	0x48000400
 8002dd8:	00010004 	.word	0x00010004
 8002ddc:	00010002 	.word	0x00010002
 8002de0:	00010080 	.word	0x00010080
 8002de4:	00010008 	.word	0x00010008
 8002de8:	00010040 	.word	0x00010040
 8002dec:	00010020 	.word	0x00010020
 8002df0:	00010100 	.word	0x00010100
 8002df4:	48000800 	.word	0x48000800

08002df8 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002df8:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002dfa:	f004 f99d 	bl	8007138 <HAL_RCC_GetHCLKFreq>
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <MX_MotorControl_Init+0x20>)
 8002e00:	fba3 3000 	umull	r3, r0, r3, r0
 8002e04:	09c0      	lsrs	r0, r0, #7
 8002e06:	f003 f801 	bl	8005e0c <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002e0a:	4804      	ldr	r0, [pc, #16]	; (8002e1c <MX_MotorControl_Init+0x24>)
 8002e0c:	f7ff fba8 	bl	8002560 <MCboot>
  mc_lock_pins();

}
 8002e10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002e14:	f7ff bf32 	b.w	8002c7c <mc_lock_pins>
 8002e18:	10624dd3 	.word	0x10624dd3
 8002e1c:	20001e84 	.word	0x20001e84

08002e20 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8002e20:	6843      	ldr	r3, [r0, #4]
 8002e22:	4718      	bx	r3

08002e24 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8002e24:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002e26:	f8b0 605c 	ldrh.w	r6, [r0, #92]	; 0x5c
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8002e2a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
{
 8002e2c:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002e2e:	140c      	asrs	r4, r1, #16
{
 8002e30:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002e32:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8002e36:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002e38:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8002e3c:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8002e40:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002e44:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8002e48:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002e4c:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002e54:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8002e58:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002e5c:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8002e60:	db7b      	blt.n	8002f5a <PWMC_SetPhaseVoltage+0x136>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8002e62:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002e66:	db50      	blt.n	8002f0a <PWMC_SetPhaseVoltage+0xe6>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8002e68:	1aad      	subs	r5, r5, r2
 8002e6a:	bf44      	itt	mi
 8002e6c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002e70:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8002e74:	2900      	cmp	r1, #0
 8002e76:	bfbc      	itt	lt
 8002e78:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002e7c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bfb8      	it	lt
 8002e84:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8002e88:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002e8c:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002e90:	bfb8      	it	lt
 8002e92:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8002e96:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8002e98:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002e9c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8002ea0:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8002ea4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
      pHandle->lowDuty = wTimePhB;
 8002ea8:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 8002eac:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));

  if ( pHandle->DTTest == 1u )
 8002eb0:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002eb4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002eb8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8002ebc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002ec0:	b292      	uxth	r2, r2
 8002ec2:	b289      	uxth	r1, r1
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8002ec8:	8742      	strh	r2, [r0, #58]	; 0x3a
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8002eca:	8781      	strh	r1, [r0, #60]	; 0x3c
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8002ecc:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if ( pHandle->DTTest == 1u )
 8002ece:	d118      	bne.n	8002f02 <PWMC_SetPhaseVoltage+0xde>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8002ed0:	f9b0 404c 	ldrsh.w	r4, [r0, #76]	; 0x4c
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8002ed4:	f9b0 504e 	ldrsh.w	r5, [r0, #78]	; 0x4e
    if ( pHandle->Ia > 0 )
 8002ed8:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8002eda:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
 8002ede:	bfcc      	ite	gt
 8002ee0:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8002ee2:	1b12      	suble	r2, r2, r4
 8002ee4:	b292      	uxth	r2, r2
 8002ee6:	8742      	strh	r2, [r0, #58]	; 0x3a
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8002ee8:	f9b0 2050 	ldrsh.w	r2, [r0, #80]	; 0x50
    if ( pHandle->Ib > 0 )
 8002eec:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8002eee:	bfcc      	ite	gt
 8002ef0:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8002ef2:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8002ef4:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8002ef6:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8002ef8:	bfcc      	ite	gt
 8002efa:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8002efc:	1b1b      	suble	r3, r3, r4
 8002efe:	8781      	strh	r1, [r0, #60]	; 0x3c
 8002f00:	87c3      	strh	r3, [r0, #62]	; 0x3e
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8002f02:	6983      	ldr	r3, [r0, #24]
}
 8002f04:	b003      	add	sp, #12
 8002f06:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8002f08:	4718      	bx	r3
      if ( wX <= 0 )
 8002f0a:	2c00      	cmp	r4, #0
 8002f0c:	dd4b      	ble.n	8002fa6 <PWMC_SetPhaseVoltage+0x182>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002f0e:	1aa5      	subs	r5, r4, r2
 8002f10:	bf44      	itt	mi
 8002f12:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002f16:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8002f1a:	2900      	cmp	r1, #0
 8002f1c:	bfb8      	it	lt
 8002f1e:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8002f22:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8002f26:	bfb8      	it	lt
 8002f28:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8002f2c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002f30:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8002f32:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002f34:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8002f38:	bfb8      	it	lt
 8002f3a:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8002f3e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8002f42:	bfb8      	it	lt
 8002f44:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002f48:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8002f4c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        pHandle->lowDuty = wTimePhA;
 8002f50:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 8002f54:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhC;
 8002f58:	e7aa      	b.n	8002eb0 <PWMC_SetPhaseVoltage+0x8c>
    if ( wZ < 0 )
 8002f5a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002f5e:	db6f      	blt.n	8003040 <PWMC_SetPhaseVoltage+0x21c>
      if ( wX <= 0 )
 8002f60:	2c00      	cmp	r4, #0
 8002f62:	dd47      	ble.n	8002ff4 <PWMC_SetPhaseVoltage+0x1d0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002f64:	1b2d      	subs	r5, r5, r4
 8002f66:	bf48      	it	mi
 8002f68:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8002f6c:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002f70:	bf48      	it	mi
 8002f72:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bfb8      	it	lt
 8002f7a:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8002f7e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002f82:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002f86:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8002f8a:	bfb8      	it	lt
 8002f8c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8002f90:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002f94:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8002f98:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8002f9c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 8002fa0:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8002fa4:	e784      	b.n	8002eb0 <PWMC_SetPhaseVoltage+0x8c>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002fa6:	1b2d      	subs	r5, r5, r4
 8002fa8:	bf44      	itt	mi
 8002faa:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002fae:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bfb8      	it	lt
 8002fb6:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8002fba:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8002fbe:	bfb8      	it	lt
 8002fc0:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8002fc4:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhB = wTimePhC + wX / 131072;
 8002fc8:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002fca:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002fce:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002fd2:	bfb8      	it	lt
 8002fd4:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8002fd8:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002fdc:	bfb8      	it	lt
 8002fde:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8002fe2:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 8002fe6:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        pHandle->lowDuty = wTimePhA;
 8002fea:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8002fee:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhB;
 8002ff2:	e75d      	b.n	8002eb0 <PWMC_SetPhaseVoltage+0x8c>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002ff4:	1aa5      	subs	r5, r4, r2
 8002ff6:	bf44      	itt	mi
 8002ff8:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002ffc:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8003000:	2900      	cmp	r1, #0
 8003002:	bfb8      	it	lt
 8003004:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8003008:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 800300c:	bfb8      	it	lt
 800300e:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8003012:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8003016:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8003018:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800301a:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800301e:	bfb8      	it	lt
 8003020:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8003024:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8003028:	bfb8      	it	lt
 800302a:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800302e:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8003032:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 8003036:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 800303a:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 800303e:	e737      	b.n	8002eb0 <PWMC_SetPhaseVoltage+0x8c>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8003040:	1aad      	subs	r5, r5, r2
 8003042:	bf44      	itt	mi
 8003044:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8003048:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800304c:	2900      	cmp	r1, #0
 800304e:	bfbc      	itt	lt
 8003050:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8003054:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8003058:	2b00      	cmp	r3, #0
 800305a:	bfb8      	it	lt
 800305c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8003060:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8003064:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8003068:	bfb8      	it	lt
 800306a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 800306e:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8003070:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8003074:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8003078:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhC;
 800307c:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 8003080:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
      pHandle->highDuty = wTimePhB;
 8003084:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
 8003088:	e712      	b.n	8002eb0 <PWMC_SetPhaseVoltage+0x8c>
 800308a:	bf00      	nop

0800308c <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 800308c:	6883      	ldr	r3, [r0, #8]
 800308e:	4718      	bx	r3

08003090 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8003090:	b510      	push	{r4, lr}
 8003092:	4604      	mov	r4, r0
 8003094:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8003096:	b199      	cbz	r1, 80030c0 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8003098:	2901      	cmp	r1, #1
 800309a:	d002      	beq.n	80030a2 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 800309c:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 800309e:	b002      	add	sp, #8
 80030a0:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 80030a2:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 80030a6:	b1cb      	cbz	r3, 80030dc <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	9101      	str	r1, [sp, #4]
 80030ae:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f2      	bne.n	800309c <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 80030b6:	6903      	ldr	r3, [r0, #16]
 80030b8:	4798      	blx	r3
        retVal = true;
 80030ba:	9901      	ldr	r1, [sp, #4]
 80030bc:	4608      	mov	r0, r1
 80030be:	e7ee      	b.n	800309e <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 80030c0:	f7ff ffe4 	bl	800308c <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 80030c4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80030c8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if ( pHandle->OffCalibrWaitTicks == 0u )
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e5      	bne.n	800309c <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 80030d0:	4620      	mov	r0, r4
 80030d2:	6923      	ldr	r3, [r4, #16]
 80030d4:	4798      	blx	r3
      retVal = true;
 80030d6:	2001      	movs	r0, #1
}
 80030d8:	b002      	add	sp, #8
 80030da:	bd10      	pop	{r4, pc}
      retVal = true;
 80030dc:	4608      	mov	r0, r1
}
 80030de:	b002      	add	sp, #8
 80030e0:	bd10      	pop	{r4, pc}
 80030e2:	bf00      	nop

080030e4 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 80030e4:	69c3      	ldr	r3, [r0, #28]
 80030e6:	4718      	bx	r3

080030e8 <RI_SetRegCommandParser>:
static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, uint16_t maxSize);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, uint16_t maxSize);
static uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, uint16_t maxSize);

__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle)
{
 80030e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t * dataElementID;
  uint8_t * rxData = pHandle->rxBuffer+MCP_HEADER_SIZE;
  uint8_t * txData = pHandle->txBuffer;
  int16_t rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80030ec:	8985      	ldrh	r5, [r0, #12]
  uint8_t * txData = pHandle->txBuffer;
 80030ee:	f8d0 b008 	ldr.w	fp, [r0, #8]
  uint8_t * rxData = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80030f2:	e9d0 2400 	ldrd	r2, r4, [r0]
  int16_t rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80030f6:	3d02      	subs	r5, #2
  int16_t txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* 1 Byte must be available for MCP CMD status*/
  uint16_t size;
  uint8_t retVal=MCP_CMD_OK;
  uint8_t accessResult;
  uint8_t number_of_item =0;
  pHandle->txLength = 0;
 80030f8:	2300      	movs	r3, #0
{
 80030fa:	b087      	sub	sp, #28
  int16_t rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80030fc:	b22d      	sxth	r5, r5
  int16_t txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* 1 Byte must be available for MCP CMD status*/
 80030fe:	8992      	ldrh	r2, [r2, #12]
 8003100:	9201      	str	r2, [sp, #4]
  while (rxLength > 0)
 8003102:	429d      	cmp	r5, r3
{
 8003104:	4682      	mov	sl, r0
  pHandle->txLength = 0;
 8003106:	81c3      	strh	r3, [r0, #14]
  while (rxLength > 0)
 8003108:	f340 80dd 	ble.w	80032c6 <RI_SetRegCommandParser+0x1de>
  uint8_t retVal=MCP_CMD_OK;
 800310c:	9302      	str	r3, [sp, #8]
 800310e:	f1cb 0201 	rsb	r2, fp, #1
 8003112:	4bb2      	ldr	r3, [pc, #712]	; (80033dc <RI_SetRegCommandParser+0x2f4>)
 8003114:	9200      	str	r2, [sp, #0]
 8003116:	3402      	adds	r4, #2
  uint8_t * txData = pHandle->txBuffer;
 8003118:	46d9      	mov	r9, fp
 800311a:	462e      	mov	r6, r5
  {
     number_of_item ++;
     dataElementID = (uint16_t *) rxData;
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
     rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 800311c:	4627      	mov	r7, r4
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800311e:	b2b6      	uxth	r6, r6
     accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8003120:	f837 cb02 	ldrh.w	ip, [r7], #2
  uint8_t typeID;
  uint8_t motorID;
  uint8_t retVal = MCP_CMD_OK;
  uint16_t regID = dataID & REG_MASK;
  typeID = dataID & TYPE_MASK;
  motorID = (dataID & MOTOR_MASK)-1;
 8003124:	f00c 0007 	and.w	r0, ip, #7
 8003128:	3801      	subs	r0, #1
 800312a:	f00c 0138 	and.w	r1, ip, #56	; 0x38

  MCI_Handle_t * pMCI = &Mci[motorID];
 800312e:	fa5f f880 	uxtb.w	r8, r0
  uint16_t regID = dataID & REG_MASK;
 8003132:	f02c 0207 	bic.w	r2, ip, #7
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003136:	1eb5      	subs	r5, r6, #2
 8003138:	3908      	subs	r1, #8
  MCI_Handle_t * pMCI = &Mci[motorID];
 800313a:	eb03 1848 	add.w	r8, r3, r8, lsl #5
  motorID = (dataID & MOTOR_MASK)-1;
 800313e:	b2c0      	uxtb	r0, r0
  uint16_t regID = dataID & REG_MASK;
 8003140:	b292      	uxth	r2, r2
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003142:	b2ad      	uxth	r5, r5

  switch (typeID)
 8003144:	2920      	cmp	r1, #32
 8003146:	d812      	bhi.n	800316e <RI_SetRegCommandParser+0x86>
 8003148:	e8df f001 	tbb	[pc, r1]
 800314c:	11111187 	.word	0x11111187
 8003150:	11111111 	.word	0x11111111
 8003154:	11111162 	.word	0x11111162
 8003158:	11111111 	.word	0x11111111
 800315c:	11111152 	.word	0x11111152
 8003160:	11111111 	.word	0x11111111
 8003164:	11111198 	.word	0x11111198
 8003168:	11111111 	.word	0x11111111
 800316c:	30          	.byte	0x30
 800316d:	00          	.byte	0x00
  MCI_Handle_t * pMCI = &Mci[motorID];
 800316e:	2207      	movs	r2, #7
     if (number_of_item == 1 && rxLength == 0)
 8003170:	9900      	ldr	r1, [sp, #0]
 8003172:	4449      	add	r1, r9
 8003174:	b2c9      	uxtb	r1, r1
 8003176:	2901      	cmp	r1, #1
     rxLength = (int16_t) (rxLength - size);
 8003178:	b22e      	sxth	r6, r5
     if (number_of_item == 1 && rxLength == 0)
 800317a:	f000 809f 	beq.w	80032bc <RI_SetRegCommandParser+0x1d4>
       if (txSyncFreeSpace >=0 )
 800317e:	9901      	ldr	r1, [sp, #4]
 8003180:	4459      	add	r1, fp
 8003182:	3901      	subs	r1, #1
 8003184:	eba1 0109 	sub.w	r1, r1, r9
 8003188:	0409      	lsls	r1, r1, #16
 800318a:	f100 8092 	bmi.w	80032b2 <RI_SetRegCommandParser+0x1ca>
         *txData = accessResult;
 800318e:	f809 2b01 	strb.w	r2, [r9], #1
         pHandle->txLength++;
 8003192:	f8ba 100e 	ldrh.w	r1, [sl, #14]
 8003196:	3101      	adds	r1, #1
 8003198:	f8aa 100e 	strh.w	r1, [sl, #14]
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800319c:	2a00      	cmp	r2, #0
 800319e:	f040 8099 	bne.w	80032d4 <RI_SetRegCommandParser+0x1ec>
  while (rxLength > 0)
 80031a2:	2e00      	cmp	r6, #0
 80031a4:	f340 82aa 	ble.w	80036fc <RI_SetRegCommandParser+0x614>
 80031a8:	463c      	mov	r4, r7
 80031aa:	e7b7      	b.n	800311c <RI_SetRegCommandParser+0x34>
    }
    break;
  case TYPE_DATA_RAW:
    {
      uint16_t rawSize = *(uint16_t *) data;
      *size = rawSize+2; /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
 80031ac:	8866      	ldrh	r6, [r4, #2]
 80031ae:	3602      	adds	r6, #2
 80031b0:	b2b6      	uxth	r6, r6
      uint8_t * rawData = data+2; /* rawData points to the first data (after size extraction) */
      if (*size > freeSpace )
 80031b2:	42b5      	cmp	r5, r6
 80031b4:	f0c0 81fb 	bcc.w	80035ae <RI_SetRegCommandParser+0x4c6>
        *size =0;
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
      }
      else
      {
        switch (regID)
 80031b8:	f5b2 7f5a 	cmp.w	r2, #872	; 0x368
 80031bc:	f000 822b 	beq.w	8003616 <RI_SetRegCommandParser+0x52e>
 80031c0:	f200 81d0 	bhi.w	8003564 <RI_SetRegCommandParser+0x47c>
 80031c4:	f5b2 7fb4 	cmp.w	r2, #360	; 0x168
 80031c8:	f000 8230 	beq.w	800362c <RI_SetRegCommandParser+0x544>
 80031cc:	f240 81c3 	bls.w	8003556 <RI_SetRegCommandParser+0x46e>
 80031d0:	f5b2 7fd4 	cmp.w	r2, #424	; 0x1a8
 80031d4:	f040 81db 	bne.w	800358e <RI_SetRegCommandParser+0x4a6>
          {
            uint32_t torque;
            uint16_t duration;
            torque = *(int32_t *)rawData;
            duration = *(uint16_t *)&rawData[4];
            MCI_ExecTorqueRamp(pMCI,torque,duration);
 80031d8:	8922      	ldrh	r2, [r4, #8]
 80031da:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80031de:	4640      	mov	r0, r8
 80031e0:	f7fe ff9e 	bl	8002120 <MCI_ExecTorqueRamp>
          }
          break;
 80031e4:	1bad      	subs	r5, r5, r6
 80031e6:	4b7d      	ldr	r3, [pc, #500]	; (80033dc <RI_SetRegCommandParser+0x2f4>)
 80031e8:	4437      	add	r7, r6
 80031ea:	b2ad      	uxth	r5, r5
  uint8_t retVal = MCP_CMD_OK;
 80031ec:	2200      	movs	r2, #0
          break;
 80031ee:	e7bf      	b.n	8003170 <RI_SetRegCommandParser+0x88>
    switch (regID)
 80031f0:	2a98      	cmp	r2, #152	; 0x98
 80031f2:	f000 81de 	beq.w	80035b2 <RI_SetRegCommandParser+0x4ca>
 80031f6:	d97f      	bls.n	80032f8 <RI_SetRegCommandParser+0x210>
 80031f8:	f5b2 7fac 	cmp.w	r2, #344	; 0x158
 80031fc:	d077      	beq.n	80032ee <RI_SetRegCommandParser+0x206>
 80031fe:	d971      	bls.n	80032e4 <RI_SetRegCommandParser+0x1fc>
 8003200:	f5b2 7fcc 	cmp.w	r2, #408	; 0x198
 8003204:	d073      	beq.n	80032ee <RI_SetRegCommandParser+0x206>
      retVal = MCP_ERROR_UNKNOWN_REG;
 8003206:	1fb5      	subs	r5, r6, #6
 8003208:	b2ad      	uxth	r5, r5
 800320a:	1da7      	adds	r7, r4, #6
 800320c:	2205      	movs	r2, #5
 800320e:	e7af      	b.n	8003170 <RI_SetRegCommandParser+0x88>
    uint16_t regdata16 = *(uint16_t *)data;
 8003210:	f5b2 6f71 	cmp.w	r2, #3856	; 0xf10
 8003214:	8861      	ldrh	r1, [r4, #2]
    switch (regID)
 8003216:	f000 8099 	beq.w	800334c <RI_SetRegCommandParser+0x264>
 800321a:	f200 80e3 	bhi.w	80033e4 <RI_SetRegCommandParser+0x2fc>
 800321e:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 8003222:	f000 8242 	beq.w	80036aa <RI_SetRegCommandParser+0x5c2>
 8003226:	f240 80c5 	bls.w	80033b4 <RI_SetRegCommandParser+0x2cc>
 800322a:	f5b2 6f15 	cmp.w	r2, #2384	; 0x950
 800322e:	f000 822f 	beq.w	8003690 <RI_SetRegCommandParser+0x5a8>
 8003232:	d97c      	bls.n	800332e <RI_SetRegCommandParser+0x246>
 8003234:	f5b2 6f29 	cmp.w	r2, #2704	; 0xa90
 8003238:	f000 8088 	beq.w	800334c <RI_SetRegCommandParser+0x264>
 800323c:	d962      	bls.n	8003304 <RI_SetRegCommandParser+0x21c>
 800323e:	f5b2 6f65 	cmp.w	r2, #3664	; 0xe50
 8003242:	d005      	beq.n	8003250 <RI_SetRegCommandParser+0x168>
 8003244:	f240 816f 	bls.w	8003526 <RI_SetRegCommandParser+0x43e>
 8003248:	f5b2 6f69 	cmp.w	r2, #3728	; 0xe90
 800324c:	f040 8166 	bne.w	800351c <RI_SetRegCommandParser+0x434>
 8003250:	1f35      	subs	r5, r6, #4
 8003252:	b2ad      	uxth	r5, r5
 8003254:	1d27      	adds	r7, r4, #4
  uint8_t retVal = MCP_CMD_OK;
 8003256:	2200      	movs	r2, #0
 8003258:	e78a      	b.n	8003170 <RI_SetRegCommandParser+0x88>
    switch (regID)
 800325a:	2a88      	cmp	r2, #136	; 0x88
 800325c:	f000 81bb 	beq.w	80035d6 <RI_SetRegCommandParser+0x4ee>
 8003260:	f240 816a 	bls.w	8003538 <RI_SetRegCommandParser+0x450>
 8003264:	f5b2 6fa9 	cmp.w	r2, #1352	; 0x548
 8003268:	d003      	beq.n	8003272 <RI_SetRegCommandParser+0x18a>
 800326a:	f5b2 6fb1 	cmp.w	r2, #1416	; 0x588
 800326e:	f040 8166 	bne.w	800353e <RI_SetRegCommandParser+0x456>
 8003272:	1ef5      	subs	r5, r6, #3
 8003274:	b2ad      	uxth	r5, r5
 8003276:	1ce7      	adds	r7, r4, #3
      retVal = MCP_ERROR_RO_REG;
 8003278:	2204      	movs	r2, #4
 800327a:	e779      	b.n	8003170 <RI_SetRegCommandParser+0x88>

uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, uint16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  *size= 1 ; /* /0 is the min String size */
  while ((*srcString != 0) && (*size < maxSize) )
 800327c:	78a2      	ldrb	r2, [r4, #2]
 800327e:	2a00      	cmp	r2, #0
 8003280:	f000 81ee 	beq.w	8003660 <RI_SetRegCommandParser+0x578>
 8003284:	2d01      	cmp	r5, #1
 8003286:	d9f4      	bls.n	8003272 <RI_SetRegCommandParser+0x18a>
 8003288:	3403      	adds	r4, #3
  *size= 1 ; /* /0 is the min String size */
 800328a:	2201      	movs	r2, #1
 800328c:	e002      	b.n	8003294 <RI_SetRegCommandParser+0x1ac>
  while ((*srcString != 0) && (*size < maxSize) )
 800328e:	4295      	cmp	r5, r2
 8003290:	f000 8182 	beq.w	8003598 <RI_SetRegCommandParser+0x4b0>
  {
    *destString = *srcString ;
    srcString = srcString+1;
 8003294:	4621      	mov	r1, r4
  while ((*srcString != 0) && (*size < maxSize) )
 8003296:	f814 0b01 	ldrb.w	r0, [r4], #1
    destString = destString+1;
    *size=*size+1;
 800329a:	3201      	adds	r2, #1
 800329c:	b292      	uxth	r2, r2
  while ((*srcString != 0) && (*size < maxSize) )
 800329e:	2800      	cmp	r0, #0
 80032a0:	d1f5      	bne.n	800328e <RI_SetRegCommandParser+0x1a6>
 80032a2:	4610      	mov	r0, r2
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *destString = 0;
 80032a4:	1aad      	subs	r5, r5, r2
 80032a6:	2200      	movs	r2, #0
 80032a8:	700a      	strb	r2, [r1, #0]
 80032aa:	b2ad      	uxth	r5, r5
 80032ac:	4407      	add	r7, r0
      retVal = MCP_ERROR_RO_REG;
 80032ae:	2204      	movs	r2, #4
 80032b0:	e75e      	b.n	8003170 <RI_SetRegCommandParser+0x88>
         retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80032b2:	2208      	movs	r2, #8
}
 80032b4:	4610      	mov	r0, r2
 80032b6:	b007      	add	sp, #28
 80032b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     if (number_of_item == 1 && rxLength == 0)
 80032bc:	2e00      	cmp	r6, #0
 80032be:	f47f af5e 	bne.w	800317e <RI_SetRegCommandParser+0x96>
  if (retVal == MCP_CMD_OK)
 80032c2:	2a00      	cmp	r2, #0
 80032c4:	d1f6      	bne.n	80032b4 <RI_SetRegCommandParser+0x1cc>
    pHandle->txLength = 0;
 80032c6:	2200      	movs	r2, #0
}
 80032c8:	4610      	mov	r0, r2
    pHandle->txLength = 0;
 80032ca:	f8aa 200e 	strh.w	r2, [sl, #14]
}
 80032ce:	b007      	add	sp, #28
 80032d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80032d4:	2a07      	cmp	r2, #7
 80032d6:	f040 8137 	bne.w	8003548 <RI_SetRegCommandParser+0x460>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80032da:	2201      	movs	r2, #1
}
 80032dc:	4610      	mov	r0, r2
 80032de:	b007      	add	sp, #28
 80032e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032e4:	2ad8      	cmp	r2, #216	; 0xd8
 80032e6:	d002      	beq.n	80032ee <RI_SetRegCommandParser+0x206>
 80032e8:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 80032ec:	d18b      	bne.n	8003206 <RI_SetRegCommandParser+0x11e>
 80032ee:	1fb5      	subs	r5, r6, #6
 80032f0:	b2ad      	uxth	r5, r5
 80032f2:	1da7      	adds	r7, r4, #6
      retVal = MCP_ERROR_RO_REG;
 80032f4:	2204      	movs	r2, #4
 80032f6:	e73b      	b.n	8003170 <RI_SetRegCommandParser+0x88>
 80032f8:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 80032fc:	f1bc 0f18 	cmp.w	ip, #24
 8003300:	d181      	bne.n	8003206 <RI_SetRegCommandParser+0x11e>
 8003302:	e7f4      	b.n	80032ee <RI_SetRegCommandParser+0x206>
 8003304:	f5b2 6f19 	cmp.w	r2, #2448	; 0x990
 8003308:	d125      	bne.n	8003356 <RI_SetRegCommandParser+0x26e>
        currComp = MCI_GetIqdref(pMCI);
 800330a:	4640      	mov	r0, r8
 800330c:	9103      	str	r1, [sp, #12]
 800330e:	f7fe fff9 	bl	8002304 <MCI_GetIqdref>
        currComp.d = regdata16;
 8003312:	9903      	ldr	r1, [sp, #12]
        currComp = MCI_GetIqdref(pMCI);
 8003314:	9005      	str	r0, [sp, #20]
        currComp.d = regdata16;
 8003316:	f8ad 1016 	strh.w	r1, [sp, #22]
        MCI_SetCurrentReferences(pMCI,currComp);
 800331a:	9905      	ldr	r1, [sp, #20]
 800331c:	4640      	mov	r0, r8
 800331e:	f7fe ff09 	bl	8002134 <MCI_SetCurrentReferences>
      break;
 8003322:	1f35      	subs	r5, r6, #4
 8003324:	4b2d      	ldr	r3, [pc, #180]	; (80033dc <RI_SetRegCommandParser+0x2f4>)
 8003326:	1d27      	adds	r7, r4, #4
 8003328:	b2ad      	uxth	r5, r5
  uint8_t retVal = MCP_CMD_OK;
 800332a:	2200      	movs	r2, #0
      break;
 800332c:	e720      	b.n	8003170 <RI_SetRegCommandParser+0x88>
 800332e:	f5b2 6fba 	cmp.w	r2, #1488	; 0x5d0
 8003332:	d00b      	beq.n	800334c <RI_SetRegCommandParser+0x264>
 8003334:	d92f      	bls.n	8003396 <RI_SetRegCommandParser+0x2ae>
 8003336:	f5b2 6f01 	cmp.w	r2, #2064	; 0x810
 800333a:	d007      	beq.n	800334c <RI_SetRegCommandParser+0x264>
 800333c:	d921      	bls.n	8003382 <RI_SetRegCommandParser+0x29a>
 800333e:	f5b2 6f0d 	cmp.w	r2, #2256	; 0x8d0
 8003342:	d003      	beq.n	800334c <RI_SetRegCommandParser+0x264>
 8003344:	d90d      	bls.n	8003362 <RI_SetRegCommandParser+0x27a>
 8003346:	f5b2 6f11 	cmp.w	r2, #2320	; 0x910
 800334a:	d105      	bne.n	8003358 <RI_SetRegCommandParser+0x270>
     break;
 800334c:	1f35      	subs	r5, r6, #4
 800334e:	b2ad      	uxth	r5, r5
 8003350:	1d27      	adds	r7, r4, #4
      retVal = MCP_ERROR_RO_REG;
 8003352:	2204      	movs	r2, #4
     break;
 8003354:	e70c      	b.n	8003170 <RI_SetRegCommandParser+0x88>
 8003356:	d20b      	bcs.n	8003370 <RI_SetRegCommandParser+0x288>
      retVal = MCP_ERROR_UNKNOWN_REG;
 8003358:	1f35      	subs	r5, r6, #4
 800335a:	b2ad      	uxth	r5, r5
 800335c:	1d27      	adds	r7, r4, #4
 800335e:	2205      	movs	r2, #5
 8003360:	e706      	b.n	8003170 <RI_SetRegCommandParser+0x88>
 8003362:	f5b2 6f05 	cmp.w	r2, #2128	; 0x850
 8003366:	d0f1      	beq.n	800334c <RI_SetRegCommandParser+0x264>
 8003368:	f5b2 6f09 	cmp.w	r2, #2192	; 0x890
 800336c:	d0ee      	beq.n	800334c <RI_SetRegCommandParser+0x264>
 800336e:	e7f3      	b.n	8003358 <RI_SetRegCommandParser+0x270>
 8003370:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 8003374:	f5bc 6f21 	cmp.w	ip, #2576	; 0xa10
 8003378:	d0e8      	beq.n	800334c <RI_SetRegCommandParser+0x264>
 800337a:	f5b2 6f1d 	cmp.w	r2, #2512	; 0x9d0
 800337e:	d0e5      	beq.n	800334c <RI_SetRegCommandParser+0x264>
 8003380:	e7ea      	b.n	8003358 <RI_SetRegCommandParser+0x270>
 8003382:	f5b2 6fc2 	cmp.w	r2, #1552	; 0x610
 8003386:	d0e1      	beq.n	800334c <RI_SetRegCommandParser+0x264>
 8003388:	d3e6      	bcc.n	8003358 <RI_SetRegCommandParser+0x270>
 800338a:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 800338e:	f5bc 6ff2 	cmp.w	ip, #1936	; 0x790
 8003392:	d1e1      	bne.n	8003358 <RI_SetRegCommandParser+0x270>
 8003394:	e7da      	b.n	800334c <RI_SetRegCommandParser+0x264>
 8003396:	f5b2 7f44 	cmp.w	r2, #784	; 0x310
 800339a:	d13e      	bne.n	800341a <RI_SetRegCommandParser+0x332>
      PID_SetKD(pPIDId[motorID], regdata16);
 800339c:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <RI_SetRegCommandParser+0x2f8>)
 800339e:	b209      	sxth	r1, r1
 80033a0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80033a4:	f005 ff4c 	bl	8009240 <PID_SetKD>
      break;
 80033a8:	1f35      	subs	r5, r6, #4
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <RI_SetRegCommandParser+0x2f4>)
 80033ac:	b2ad      	uxth	r5, r5
 80033ae:	1d27      	adds	r7, r4, #4
  uint8_t retVal = MCP_CMD_OK;
 80033b0:	2200      	movs	r2, #0
      break;
 80033b2:	e6dd      	b.n	8003170 <RI_SetRegCommandParser+0x88>
 80033b4:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 80033b8:	f000 8163 	beq.w	8003682 <RI_SetRegCommandParser+0x59a>
 80033bc:	f240 808b 	bls.w	80034d6 <RI_SetRegCommandParser+0x3ee>
 80033c0:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 80033c4:	f000 818b 	beq.w	80036de <RI_SetRegCommandParser+0x5f6>
 80033c8:	f5b2 7f24 	cmp.w	r2, #656	; 0x290
 80033cc:	d178      	bne.n	80034c0 <RI_SetRegCommandParser+0x3d8>
      PID_SetKP(pPIDId[motorID], regdata16);
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <RI_SetRegCommandParser+0x2f8>)
 80033d0:	b209      	sxth	r1, r1
 80033d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80033d6:	f005 ff03 	bl	80091e0 <PID_SetKP>
     break;
 80033da:	e7e5      	b.n	80033a8 <RI_SetRegCommandParser+0x2c0>
 80033dc:	20000bf4 	.word	0x20000bf4
 80033e0:	200004e8 	.word	0x200004e8
 80033e4:	f241 5550 	movw	r5, #5456	; 0x1550
 80033e8:	42aa      	cmp	r2, r5
 80033ea:	f000 8172 	beq.w	80036d2 <RI_SetRegCommandParser+0x5ea>
 80033ee:	d931      	bls.n	8003454 <RI_SetRegCommandParser+0x36c>
 80033f0:	f241 6550 	movw	r5, #5712	; 0x1650
 80033f4:	42aa      	cmp	r2, r5
 80033f6:	f000 817f 	beq.w	80036f8 <RI_SetRegCommandParser+0x610>
 80033fa:	d91c      	bls.n	8003436 <RI_SetRegCommandParser+0x34e>
 80033fc:	f241 65d0 	movw	r5, #5840	; 0x16d0
 8003400:	42aa      	cmp	r2, r5
 8003402:	f000 8173 	beq.w	80036ec <RI_SetRegCommandParser+0x604>
 8003406:	f241 7510 	movw	r5, #5904	; 0x1710
 800340a:	42aa      	cmp	r2, r5
 800340c:	d109      	bne.n	8003422 <RI_SetRegCommandParser+0x33a>
      PID_SetKDDivisorPOW2(pPIDPosCtrl[motorID], regdata16);
 800340e:	4abe      	ldr	r2, [pc, #760]	; (8003708 <RI_SetRegCommandParser+0x620>)
 8003410:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8003414:	f005 ff1c 	bl	8009250 <PID_SetKDDivisorPOW2>
 8003418:	e783      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
 800341a:	f5b2 6fb2 	cmp.w	r2, #1424	; 0x590
 800341e:	d095      	beq.n	800334c <RI_SetRegCommandParser+0x264>
 8003420:	e79a      	b.n	8003358 <RI_SetRegCommandParser+0x270>
 8003422:	f241 6590 	movw	r5, #5776	; 0x1690
 8003426:	42aa      	cmp	r2, r5
 8003428:	d196      	bne.n	8003358 <RI_SetRegCommandParser+0x270>
      PID_SetKPDivisorPOW2(pPIDPosCtrl[motorID], regdata16);
 800342a:	4ab7      	ldr	r2, [pc, #732]	; (8003708 <RI_SetRegCommandParser+0x620>)
 800342c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8003430:	f005 fee6 	bl	8009200 <PID_SetKPDivisorPOW2>
      break;
 8003434:	e775      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
 8003436:	f241 55d0 	movw	r5, #5584	; 0x15d0
 800343a:	42aa      	cmp	r2, r5
 800343c:	f000 8114 	beq.w	8003668 <RI_SetRegCommandParser+0x580>
 8003440:	f241 6510 	movw	r5, #5648	; 0x1610
 8003444:	42aa      	cmp	r2, r5
 8003446:	d119      	bne.n	800347c <RI_SetRegCommandParser+0x394>
      PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8003448:	4ab0      	ldr	r2, [pc, #704]	; (800370c <RI_SetRegCommandParser+0x624>)
 800344a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800344e:	f005 fee3 	bl	8009218 <PID_SetKIDivisorPOW2>
      break;
 8003452:	e766      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
 8003454:	f241 4550 	movw	r5, #5200	; 0x1450
 8003458:	42aa      	cmp	r2, r5
 800345a:	f000 8134 	beq.w	80036c6 <RI_SetRegCommandParser+0x5de>
 800345e:	d91f      	bls.n	80034a0 <RI_SetRegCommandParser+0x3b8>
 8003460:	f241 45d0 	movw	r5, #5328	; 0x14d0
 8003464:	42aa      	cmp	r2, r5
 8003466:	d019      	beq.n	800349c <RI_SetRegCommandParser+0x3b4>
 8003468:	f241 5510 	movw	r5, #5392	; 0x1510
 800346c:	42aa      	cmp	r2, r5
 800346e:	d110      	bne.n	8003492 <RI_SetRegCommandParser+0x3aa>
      PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8003470:	4ba7      	ldr	r3, [pc, #668]	; (8003710 <RI_SetRegCommandParser+0x628>)
 8003472:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003476:	f005 fec3 	bl	8009200 <PID_SetKPDivisorPOW2>
      break;
 800347a:	e795      	b.n	80033a8 <RI_SetRegCommandParser+0x2c0>
 800347c:	f241 5590 	movw	r5, #5520	; 0x1590
 8003480:	42aa      	cmp	r2, r5
 8003482:	f47f af69 	bne.w	8003358 <RI_SetRegCommandParser+0x270>
      PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8003486:	4ba2      	ldr	r3, [pc, #648]	; (8003710 <RI_SetRegCommandParser+0x628>)
 8003488:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800348c:	f005 fee0 	bl	8009250 <PID_SetKDDivisorPOW2>
 8003490:	e78a      	b.n	80033a8 <RI_SetRegCommandParser+0x2c0>
 8003492:	f241 4590 	movw	r5, #5264	; 0x1490
 8003496:	42aa      	cmp	r2, r5
 8003498:	f47f af5e 	bne.w	8003358 <RI_SetRegCommandParser+0x270>
      PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800349c:	4a9d      	ldr	r2, [pc, #628]	; (8003714 <RI_SetRegCommandParser+0x62c>)
 800349e:	e7b7      	b.n	8003410 <RI_SetRegCommandParser+0x328>
 80034a0:	f241 35d0 	movw	r5, #5072	; 0x13d0
 80034a4:	42aa      	cmp	r2, r5
 80034a6:	f000 8107 	beq.w	80036b8 <RI_SetRegCommandParser+0x5d0>
 80034aa:	f241 4510 	movw	r5, #5136	; 0x1410
 80034ae:	42aa      	cmp	r2, r5
 80034b0:	d11e      	bne.n	80034f0 <RI_SetRegCommandParser+0x408>
      PID_SetKD(pPIDPosCtrl[motorID], regdata16);
 80034b2:	4a95      	ldr	r2, [pc, #596]	; (8003708 <RI_SetRegCommandParser+0x620>)
 80034b4:	b209      	sxth	r1, r1
 80034b6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80034ba:	f005 fec1 	bl	8009240 <PID_SetKD>
     break;
 80034be:	e730      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
 80034c0:	f5b2 7fe8 	cmp.w	r2, #464	; 0x1d0
 80034c4:	f47f af48 	bne.w	8003358 <RI_SetRegCommandParser+0x270>
      PID_SetKI(pPIDIq[motorID], regdata16);
 80034c8:	4a90      	ldr	r2, [pc, #576]	; (800370c <RI_SetRegCommandParser+0x624>)
 80034ca:	b209      	sxth	r1, r1
 80034cc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80034d0:	f005 fe88 	bl	80091e4 <PID_SetKI>
     break;
 80034d4:	e725      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
 80034d6:	2ad0      	cmp	r2, #208	; 0xd0
 80034d8:	f000 80cc 	beq.w	8003674 <RI_SetRegCommandParser+0x58c>
 80034dc:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 80034e0:	d112      	bne.n	8003508 <RI_SetRegCommandParser+0x420>
      PID_SetKD(pPIDSpeed[motorID], regdata16);
 80034e2:	4a8c      	ldr	r2, [pc, #560]	; (8003714 <RI_SetRegCommandParser+0x62c>)
 80034e4:	b209      	sxth	r1, r1
 80034e6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80034ea:	f005 fea9 	bl	8009240 <PID_SetKD>
     break;
 80034ee:	e718      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
 80034f0:	f241 3590 	movw	r5, #5008	; 0x1390
 80034f4:	42aa      	cmp	r2, r5
 80034f6:	f47f af2f 	bne.w	8003358 <RI_SetRegCommandParser+0x270>
      PID_SetKP(pPIDPosCtrl[motorID], regdata16);
 80034fa:	4a83      	ldr	r2, [pc, #524]	; (8003708 <RI_SetRegCommandParser+0x620>)
 80034fc:	b209      	sxth	r1, r1
 80034fe:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8003502:	f005 fe6d 	bl	80091e0 <PID_SetKP>
     break;
 8003506:	e70c      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
 8003508:	2a90      	cmp	r2, #144	; 0x90
 800350a:	f47f af25 	bne.w	8003358 <RI_SetRegCommandParser+0x270>
      PID_SetKP(pPIDSpeed[motorID], regdata16);
 800350e:	4a81      	ldr	r2, [pc, #516]	; (8003714 <RI_SetRegCommandParser+0x62c>)
 8003510:	b209      	sxth	r1, r1
 8003512:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8003516:	f005 fe63 	bl	80091e0 <PID_SetKP>
      break;
 800351a:	e702      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
 800351c:	f5b2 6f6d 	cmp.w	r2, #3792	; 0xed0
 8003520:	f43f af14 	beq.w	800334c <RI_SetRegCommandParser+0x264>
 8003524:	e718      	b.n	8003358 <RI_SetRegCommandParser+0x270>
 8003526:	f5b2 6f2d 	cmp.w	r2, #2768	; 0xad0
 800352a:	f43f af0f 	beq.w	800334c <RI_SetRegCommandParser+0x264>
 800352e:	f5b2 6f31 	cmp.w	r2, #2832	; 0xb10
 8003532:	f43f af0b 	beq.w	800334c <RI_SetRegCommandParser+0x264>
 8003536:	e70f      	b.n	8003358 <RI_SetRegCommandParser+0x270>
 8003538:	2a48      	cmp	r2, #72	; 0x48
 800353a:	f43f ae9a 	beq.w	8003272 <RI_SetRegCommandParser+0x18a>
      retVal = MCP_ERROR_UNKNOWN_REG;
 800353e:	1ef5      	subs	r5, r6, #3
 8003540:	b2ad      	uxth	r5, r5
 8003542:	1ce7      	adds	r7, r4, #3
 8003544:	2205      	movs	r2, #5
 8003546:	e613      	b.n	8003170 <RI_SetRegCommandParser+0x88>
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8003548:	2a0a      	cmp	r2, #10
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800354a:	f04f 0201 	mov.w	r2, #1
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800354e:	f43f aeb1 	beq.w	80032b4 <RI_SetRegCommandParser+0x1cc>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8003552:	9202      	str	r2, [sp, #8]
 8003554:	e625      	b.n	80031a2 <RI_SetRegCommandParser+0xba>
 8003556:	2aa8      	cmp	r2, #168	; 0xa8
 8003558:	d114      	bne.n	8003584 <RI_SetRegCommandParser+0x49c>
 800355a:	1bad      	subs	r5, r5, r6
 800355c:	b2ad      	uxth	r5, r5
 800355e:	4437      	add	r7, r6
          retVal = MCP_ERROR_RO_REG;
 8003560:	2204      	movs	r2, #4
 8003562:	e605      	b.n	8003170 <RI_SetRegCommandParser+0x88>
 8003564:	f5b2 7f6a 	cmp.w	r2, #936	; 0x3a8
 8003568:	d04d      	beq.n	8003606 <RI_SetRegCommandParser+0x51e>
 800356a:	f5b2 6fa5 	cmp.w	r2, #1320	; 0x528
 800356e:	d10e      	bne.n	800358e <RI_SetRegCommandParser+0x4a6>
           retVal =  MCPA_cfgLog ( &MCPA_UART_A, rawData );
 8003570:	4869      	ldr	r0, [pc, #420]	; (8003718 <RI_SetRegCommandParser+0x630>)
 8003572:	1d21      	adds	r1, r4, #4
 8003574:	f005 fd32 	bl	8008fdc <MCPA_cfgLog>
 8003578:	1bad      	subs	r5, r5, r6
          break;
 800357a:	4b68      	ldr	r3, [pc, #416]	; (800371c <RI_SetRegCommandParser+0x634>)
 800357c:	4437      	add	r7, r6
           retVal =  MCPA_cfgLog ( &MCPA_UART_A, rawData );
 800357e:	4602      	mov	r2, r0
          break;
 8003580:	b2ad      	uxth	r5, r5
 8003582:	e5f5      	b.n	8003170 <RI_SetRegCommandParser+0x88>
 8003584:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 8003588:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 800358c:	d0e5      	beq.n	800355a <RI_SetRegCommandParser+0x472>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800358e:	1bad      	subs	r5, r5, r6
 8003590:	b2ad      	uxth	r5, r5
 8003592:	4437      	add	r7, r6
 8003594:	2205      	movs	r2, #5
 8003596:	e5eb      	b.n	8003170 <RI_SetRegCommandParser+0x88>
     if (number_of_item == 1 && rxLength == 0)
 8003598:	9a00      	ldr	r2, [sp, #0]
 800359a:	444a      	add	r2, r9
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	2a01      	cmp	r2, #1
 80035a0:	442f      	add	r7, r5
      retVal = MCP_ERROR_RO_REG;
 80035a2:	f04f 0204 	mov.w	r2, #4
     if (number_of_item == 1 && rxLength == 0)
 80035a6:	f43f ae85 	beq.w	80032b4 <RI_SetRegCommandParser+0x1cc>
     rxLength = (int16_t) (rxLength - size);
 80035aa:	2600      	movs	r6, #0
 80035ac:	e5e7      	b.n	800317e <RI_SetRegCommandParser+0x96>
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 80035ae:	220a      	movs	r2, #10
 80035b0:	e5de      	b.n	8003170 <RI_SetRegCommandParser+0x88>
      MCI_ExecSpeedRamp(pMCI,(int16_t)((regdata32*SPEED_UNIT)/_RPM),0);
 80035b2:	f8d4 2002 	ldr.w	r2, [r4, #2]
 80035b6:	4b5a      	ldr	r3, [pc, #360]	; (8003720 <RI_SetRegCommandParser+0x638>)
 80035b8:	fb83 3102 	smull	r3, r1, r3, r2
 80035bc:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 80035c0:	4640      	mov	r0, r8
 80035c2:	2200      	movs	r2, #0
 80035c4:	b209      	sxth	r1, r1
 80035c6:	1fb5      	subs	r5, r6, #6
 80035c8:	f7fe fd9e 	bl	8002108 <MCI_ExecSpeedRamp>
      break;
 80035cc:	1da7      	adds	r7, r4, #6
 80035ce:	4b53      	ldr	r3, [pc, #332]	; (800371c <RI_SetRegCommandParser+0x634>)
 80035d0:	b2ad      	uxth	r5, r5
  uint8_t retVal = MCP_CMD_OK;
 80035d2:	2200      	movs	r2, #0
      break;
 80035d4:	e5cc      	b.n	8003170 <RI_SetRegCommandParser+0x88>
    uint8_t regdata8 = *data;
 80035d6:	78a2      	ldrb	r2, [r4, #2]
        if ((STC_Modality_t)regdata8 == STC_TORQUE_MODE)
 80035d8:	b132      	cbz	r2, 80035e8 <RI_SetRegCommandParser+0x500>
        if ((STC_Modality_t)regdata8 == STC_SPEED_MODE)
 80035da:	2a01      	cmp	r2, #1
 80035dc:	d032      	beq.n	8003644 <RI_SetRegCommandParser+0x55c>
 80035de:	1ef5      	subs	r5, r6, #3
 80035e0:	b2ad      	uxth	r5, r5
 80035e2:	1ce7      	adds	r7, r4, #3
  uint8_t retVal = MCP_CMD_OK;
 80035e4:	2200      	movs	r2, #0
 80035e6:	e5c3      	b.n	8003170 <RI_SetRegCommandParser+0x88>
          MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80035e8:	4640      	mov	r0, r8
 80035ea:	9203      	str	r2, [sp, #12]
 80035ec:	f7fe feb4 	bl	8002358 <MCI_GetTeref>
 80035f0:	1ef5      	subs	r5, r6, #3
 80035f2:	9a03      	ldr	r2, [sp, #12]
 80035f4:	4601      	mov	r1, r0
 80035f6:	4640      	mov	r0, r8
 80035f8:	f7fe fd92 	bl	8002120 <MCI_ExecTorqueRamp>
        if ((STC_Modality_t)regdata8 == STC_SPEED_MODE)
 80035fc:	1ce7      	adds	r7, r4, #3
 80035fe:	9a03      	ldr	r2, [sp, #12]
 8003600:	4b46      	ldr	r3, [pc, #280]	; (800371c <RI_SetRegCommandParser+0x634>)
 8003602:	b2ad      	uxth	r5, r5
 8003604:	e5b4      	b.n	8003170 <RI_SetRegCommandParser+0x88>
            MCI_ExecPositionCommand(pMCI, Position.Float_Val, Duration.Float_Val);
 8003606:	edd4 0a02 	vldr	s1, [r4, #8]
 800360a:	ed94 0a01 	vldr	s0, [r4, #4]
 800360e:	4640      	mov	r0, r8
 8003610:	f7fe fd9a 	bl	8002148 <MCI_ExecPositionCommand>
          break;
 8003614:	e5e6      	b.n	80031e4 <RI_SetRegCommandParser+0xfc>
            currComp.q = *((uint16_t *) rawData);
 8003616:	6861      	ldr	r1, [r4, #4]
 8003618:	9105      	str	r1, [sp, #20]
            MCI_SetCurrentReferences(pMCI,currComp);
 800361a:	4640      	mov	r0, r8
 800361c:	1bad      	subs	r5, r5, r6
 800361e:	f7fe fd89 	bl	8002134 <MCI_SetCurrentReferences>
          break;
 8003622:	b2ad      	uxth	r5, r5
 8003624:	4b3d      	ldr	r3, [pc, #244]	; (800371c <RI_SetRegCommandParser+0x634>)
 8003626:	4437      	add	r7, r6
  uint8_t retVal = MCP_CMD_OK;
 8003628:	2200      	movs	r2, #0
          break;
 800362a:	e5a1      	b.n	8003170 <RI_SetRegCommandParser+0x88>
            MCI_ExecSpeedRamp(pMCI,(int16_t)((rpm*SPEED_UNIT)/_RPM),duration);
 800362c:	6860      	ldr	r0, [r4, #4]
 800362e:	4b3c      	ldr	r3, [pc, #240]	; (8003720 <RI_SetRegCommandParser+0x638>)
 8003630:	8922      	ldrh	r2, [r4, #8]
 8003632:	fb83 3100 	smull	r3, r1, r3, r0
 8003636:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 800363a:	b209      	sxth	r1, r1
 800363c:	4640      	mov	r0, r8
 800363e:	f7fe fd63 	bl	8002108 <MCI_ExecSpeedRamp>
          break;
 8003642:	e5cf      	b.n	80031e4 <RI_SetRegCommandParser+0xfc>
          MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8003644:	4640      	mov	r0, r8
 8003646:	f7fe fe2f 	bl	80022a8 <MCI_GetMecSpeedRefUnit>
 800364a:	1ef5      	subs	r5, r6, #3
 800364c:	4601      	mov	r1, r0
 800364e:	2200      	movs	r2, #0
 8003650:	4640      	mov	r0, r8
 8003652:	f7fe fd59 	bl	8002108 <MCI_ExecSpeedRamp>
 8003656:	1ce7      	adds	r7, r4, #3
 8003658:	4b30      	ldr	r3, [pc, #192]	; (800371c <RI_SetRegCommandParser+0x634>)
 800365a:	b2ad      	uxth	r5, r5
  uint8_t retVal = MCP_CMD_OK;
 800365c:	2200      	movs	r2, #0
 800365e:	e587      	b.n	8003170 <RI_SetRegCommandParser+0x88>
  while ((*srcString != 0) && (*size < maxSize) )
 8003660:	2001      	movs	r0, #1
  *size= 1 ; /* /0 is the min String size */
 8003662:	4602      	mov	r2, r0
  while ((*srcString != 0) && (*size < maxSize) )
 8003664:	4639      	mov	r1, r7
 8003666:	e61d      	b.n	80032a4 <RI_SetRegCommandParser+0x1bc>
      PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8003668:	4a28      	ldr	r2, [pc, #160]	; (800370c <RI_SetRegCommandParser+0x624>)
 800366a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800366e:	f005 fdc7 	bl	8009200 <PID_SetKPDivisorPOW2>
      break;
 8003672:	e656      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
      PID_SetKI(pPIDSpeed[motorID], regdata16);
 8003674:	4a27      	ldr	r2, [pc, #156]	; (8003714 <RI_SetRegCommandParser+0x62c>)
 8003676:	b209      	sxth	r1, r1
 8003678:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800367c:	f005 fdb2 	bl	80091e4 <PID_SetKI>
      break;
 8003680:	e64f      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
      PID_SetKP(pPIDIq[motorID], regdata16);
 8003682:	4a22      	ldr	r2, [pc, #136]	; (800370c <RI_SetRegCommandParser+0x624>)
 8003684:	b209      	sxth	r1, r1
 8003686:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800368a:	f005 fda9 	bl	80091e0 <PID_SetKP>
     break;
 800368e:	e648      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
        currComp = MCI_GetIqdref(pMCI);
 8003690:	4640      	mov	r0, r8
 8003692:	9103      	str	r1, [sp, #12]
 8003694:	f7fe fe36 	bl	8002304 <MCI_GetIqdref>
        currComp.q = (int16_t)regdata16;
 8003698:	9903      	ldr	r1, [sp, #12]
        currComp = MCI_GetIqdref(pMCI);
 800369a:	9005      	str	r0, [sp, #20]
        currComp.q = (int16_t)regdata16;
 800369c:	f8ad 1014 	strh.w	r1, [sp, #20]
        MCI_SetCurrentReferences(pMCI,currComp);
 80036a0:	9905      	ldr	r1, [sp, #20]
 80036a2:	4640      	mov	r0, r8
 80036a4:	f7fe fd46 	bl	8002134 <MCI_SetCurrentReferences>
      break;
 80036a8:	e63b      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
      PID_SetKI(pPIDId[motorID], regdata16);
 80036aa:	4b19      	ldr	r3, [pc, #100]	; (8003710 <RI_SetRegCommandParser+0x628>)
 80036ac:	b209      	sxth	r1, r1
 80036ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80036b2:	f005 fd97 	bl	80091e4 <PID_SetKI>
     break;
 80036b6:	e677      	b.n	80033a8 <RI_SetRegCommandParser+0x2c0>
      PID_SetKI(pPIDPosCtrl[motorID], regdata16);
 80036b8:	4a13      	ldr	r2, [pc, #76]	; (8003708 <RI_SetRegCommandParser+0x620>)
 80036ba:	b209      	sxth	r1, r1
 80036bc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80036c0:	f005 fd90 	bl	80091e4 <PID_SetKI>
     break;
 80036c4:	e62d      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
      PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80036c6:	4a13      	ldr	r2, [pc, #76]	; (8003714 <RI_SetRegCommandParser+0x62c>)
 80036c8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80036cc:	f005 fd98 	bl	8009200 <PID_SetKPDivisorPOW2>
     break;
 80036d0:	e627      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
      PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 80036d2:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <RI_SetRegCommandParser+0x628>)
 80036d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80036d8:	f005 fd9e 	bl	8009218 <PID_SetKIDivisorPOW2>
      break;
 80036dc:	e664      	b.n	80033a8 <RI_SetRegCommandParser+0x2c0>
      PID_SetKD(pPIDIq[motorID], regdata16);
 80036de:	4a0b      	ldr	r2, [pc, #44]	; (800370c <RI_SetRegCommandParser+0x624>)
 80036e0:	b209      	sxth	r1, r1
 80036e2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80036e6:	f005 fdab 	bl	8009240 <PID_SetKD>
     break;
 80036ea:	e61a      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
      PID_SetKIDivisorPOW2(pPIDPosCtrl[motorID], regdata16);
 80036ec:	4a06      	ldr	r2, [pc, #24]	; (8003708 <RI_SetRegCommandParser+0x620>)
 80036ee:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80036f2:	f005 fd91 	bl	8009218 <PID_SetKIDivisorPOW2>
      break;
 80036f6:	e614      	b.n	8003322 <RI_SetRegCommandParser+0x23a>
      PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 80036f8:	4a04      	ldr	r2, [pc, #16]	; (800370c <RI_SetRegCommandParser+0x624>)
 80036fa:	e689      	b.n	8003410 <RI_SetRegCommandParser+0x328>
 80036fc:	9a02      	ldr	r2, [sp, #8]
  if (retVal == MCP_CMD_OK)
 80036fe:	2a00      	cmp	r2, #0
 8003700:	f43f ade1 	beq.w	80032c6 <RI_SetRegCommandParser+0x1de>
 8003704:	e5d6      	b.n	80032b4 <RI_SetRegCommandParser+0x1cc>
 8003706:	bf00      	nop
 8003708:	20000694 	.word	0x20000694
 800370c:	200004ec 	.word	0x200004ec
 8003710:	200004e8 	.word	0x200004e8
 8003714:	20000698 	.word	0x20000698
 8003718:	20000570 	.word	0x20000570
 800371c:	20000bf4 	.word	0x20000bf4
 8003720:	2aaaaaab 	.word	0x2aaaaaab

08003724 <RI_GetRegCommandParser>:
{
 8003724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8003728:	f8b0 900c 	ldrh.w	r9, [r0, #12]
  uint16_t txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* 1 Byte must be available for MCP CMD status*/
 800372c:	6803      	ldr	r3, [r0, #0]
  uint16_t rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800372e:	f1a9 0902 	sub.w	r9, r9, #2
  pHandle->txLength = 0;
 8003732:	f04f 0c00 	mov.w	ip, #0
  uint16_t rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8003736:	fa1f f989 	uxth.w	r9, r9
  uint16_t txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* 1 Byte must be available for MCP CMD status*/
 800373a:	899d      	ldrh	r5, [r3, #12]
  pHandle->txLength = 0;
 800373c:	f8a0 c00e 	strh.w	ip, [r0, #14]
  uint8_t * txData = pHandle->txBuffer;
 8003740:	e9d0 2701 	ldrd	r2, r7, [r0, #4]
{
 8003744:	b091      	sub	sp, #68	; 0x44
  while (rxLength > 0)
 8003746:	f1b9 0f00 	cmp.w	r9, #0
 800374a:	f000 8307 	beq.w	8003d5c <RI_GetRegCommandParser+0x638>
 800374e:	3d01      	subs	r5, #1
 8003750:	f102 0a02 	add.w	sl, r2, #2
 8003754:	f8df b3f0 	ldr.w	fp, [pc, #1008]	; 8003b48 <RI_GetRegCommandParser+0x424>
 8003758:	4680      	mov	r8, r0
 800375a:	b2ad      	uxth	r5, r5
  uint8_t * rxData = pHandle->rxBuffer+MCP_HEADER_SIZE;
 800375c:	4656      	mov	r6, sl
     retVal = RI_GetReg (*dataElementID,txData, &size, txSyncFreeSpace);
 800375e:	f836 3b02 	ldrh.w	r3, [r6], #2
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8003762:	f003 0407 	and.w	r4, r3, #7
 8003766:	3c01      	subs	r4, #1
 8003768:	f003 0238 	and.w	r2, r3, #56	; 0x38
  MCI_Handle_t * pMCI = &Mci[motorID];
 800376c:	fa5f fe84 	uxtb.w	lr, r4
  uint16_t regID = dataID & REG_MASK;
 8003770:	f023 0307 	bic.w	r3, r3, #7
 8003774:	3a08      	subs	r2, #8
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8003776:	4674      	mov	r4, lr
  MCI_Handle_t * pMCI = &Mci[motorID];
 8003778:	eb0b 114e 	add.w	r1, fp, lr, lsl #5
  uint16_t regID = dataID & REG_MASK;
 800377c:	b29b      	uxth	r3, r3
  switch (typeID)
 800377e:	2a20      	cmp	r2, #32
 8003780:	d812      	bhi.n	80037a8 <RI_GetRegCommandParser+0x84>
 8003782:	e8df f002 	tbb	[pc, r2]
 8003786:	118d      	.short	0x118d
 8003788:	11111111 	.word	0x11111111
 800378c:	11681111 	.word	0x11681111
 8003790:	11111111 	.word	0x11111111
 8003794:	11a11111 	.word	0x11a11111
 8003798:	11111111 	.word	0x11111111
 800379c:	112c1111 	.word	0x112c1111
 80037a0:	11111111 	.word	0x11111111
 80037a4:	1111      	.short	0x1111
 80037a6:	15          	.byte	0x15
 80037a7:	00          	.byte	0x00
  MCI_Handle_t * pMCI = &Mci[motorID];
 80037a8:	2007      	movs	r0, #7
}
 80037aa:	b011      	add	sp, #68	; 0x44
 80037ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uint8_t * rawData = data+2;
 80037b0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80037b4:	f107 0202 	add.w	r2, r7, #2
      switch (regID)
 80037b8:	f000 82b1 	beq.w	8003d1e <RI_GetRegCommandParser+0x5fa>
 80037bc:	f200 80af 	bhi.w	800391e <RI_GetRegCommandParser+0x1fa>
 80037c0:	2b68      	cmp	r3, #104	; 0x68
 80037c2:	f000 82bf 	beq.w	8003d44 <RI_GetRegCommandParser+0x620>
 80037c6:	2ba8      	cmp	r3, #168	; 0xa8
 80037c8:	f040 809a 	bne.w	8003900 <RI_GetRegCommandParser+0x1dc>
        *rawSize = sizeof(FOCFwConfig_reg_t);
 80037cc:	230e      	movs	r3, #14
        if ((*rawSize) +2  > freeSpace)
 80037ce:	2d0f      	cmp	r5, #15
        *rawSize = sizeof(FOCFwConfig_reg_t);
 80037d0:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 80037d2:	f200 8273 	bhi.w	8003cbc <RI_GetRegCommandParser+0x598>
        retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80037d6:	2008      	movs	r0, #8
}
 80037d8:	b011      	add	sp, #68	; 0x44
 80037da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (regID)
 80037de:	2ba0      	cmp	r3, #160	; 0xa0
 80037e0:	f000 824f 	beq.w	8003c82 <RI_GetRegCommandParser+0x55e>
 80037e4:	f200 80bf 	bhi.w	8003966 <RI_GetRegCommandParser+0x242>
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	f000 8246 	beq.w	8003c7a <RI_GetRegCommandParser+0x556>
 80037ee:	2b60      	cmp	r3, #96	; 0x60
 80037f0:	f040 8084 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
  while ((*srcString != 0) && (*size < maxSize) )
 80037f4:	48cc      	ldr	r0, [pc, #816]	; (8003b28 <RI_GetRegCommandParser+0x404>)
 80037f6:	7801      	ldrb	r1, [r0, #0]
 80037f8:	2900      	cmp	r1, #0
 80037fa:	f000 82aa 	beq.w	8003d52 <RI_GetRegCommandParser+0x62e>
 80037fe:	2d01      	cmp	r5, #1
 8003800:	f240 823d 	bls.w	8003c7e <RI_GetRegCommandParser+0x55a>
 8003804:	1eac      	subs	r4, r5, #2
 8003806:	b2a4      	uxth	r4, r4
 8003808:	3401      	adds	r4, #1
 800380a:	443c      	add	r4, r7
 800380c:	463b      	mov	r3, r7
 800380e:	f1c7 0201 	rsb	r2, r7, #1
 8003812:	e002      	b.n	800381a <RI_GetRegCommandParser+0xf6>
 8003814:	42a3      	cmp	r3, r4
 8003816:	f000 8232 	beq.w	8003c7e <RI_GetRegCommandParser+0x55a>
    *destString = *srcString ;
 800381a:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*srcString != 0) && (*size < maxSize) )
 800381e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8003822:	eb03 0c02 	add.w	ip, r3, r2
 8003826:	fa1f fc8c 	uxth.w	ip, ip
 800382a:	2900      	cmp	r1, #0
 800382c:	d1f2      	bne.n	8003814 <RI_GetRegCommandParser+0xf0>
 800382e:	4662      	mov	r2, ip
    *destString = 0;
 8003830:	2100      	movs	r1, #0
 8003832:	7019      	strb	r1, [r3, #0]
       pHandle->txLength += size;
 8003834:	f8b8 100e 	ldrh.w	r1, [r8, #14]
  while (rxLength > 0)
 8003838:	eb0a 0309 	add.w	r3, sl, r9
 800383c:	b29b      	uxth	r3, r3
       txData = txData+size;
 800383e:	4417      	add	r7, r2
  while (rxLength > 0)
 8003840:	b2b2      	uxth	r2, r6
       txSyncFreeSpace = txSyncFreeSpace-size;
 8003842:	eba5 050c 	sub.w	r5, r5, ip
       pHandle->txLength += size;
 8003846:	4461      	add	r1, ip
  while (rxLength > 0)
 8003848:	429a      	cmp	r2, r3
       txSyncFreeSpace = txSyncFreeSpace-size;
 800384a:	b2ad      	uxth	r5, r5
       pHandle->txLength += size;
 800384c:	f8a8 100e 	strh.w	r1, [r8, #14]
  while (rxLength > 0)
 8003850:	d185      	bne.n	800375e <RI_GetRegCommandParser+0x3a>
     retVal = RI_GetReg (*dataElementID,txData, &size, txSyncFreeSpace);
 8003852:	2000      	movs	r0, #0
 8003854:	e7a9      	b.n	80037aa <RI_GetRegCommandParser+0x86>
      if (freeSpace >= 2 )
 8003856:	2d01      	cmp	r5, #1
 8003858:	d9bd      	bls.n	80037d6 <RI_GetRegCommandParser+0xb2>
        switch (regID)
 800385a:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 800385e:	f000 82bb 	beq.w	8003dd8 <RI_GetRegCommandParser+0x6b4>
 8003862:	f200 80f8 	bhi.w	8003a56 <RI_GetRegCommandParser+0x332>
 8003866:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 800386a:	f000 82ac 	beq.w	8003dc6 <RI_GetRegCommandParser+0x6a2>
 800386e:	f240 80d9 	bls.w	8003a24 <RI_GetRegCommandParser+0x300>
 8003872:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8003876:	f000 8273 	beq.w	8003d60 <RI_GetRegCommandParser+0x63c>
 800387a:	f240 80bc 	bls.w	80039f6 <RI_GetRegCommandParser+0x2d2>
 800387e:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8003882:	f000 82d2 	beq.w	8003e2a <RI_GetRegCommandParser+0x706>
 8003886:	f240 80a7 	bls.w	80039d8 <RI_GetRegCommandParser+0x2b4>
 800388a:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 800388e:	d135      	bne.n	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdata16 = MCI_GetVqd(pMCI).q;
 8003890:	4608      	mov	r0, r1
 8003892:	f7fe fd45 	bl	8002320 <MCI_GetVqd>
         break;
 8003896:	2202      	movs	r2, #2
          *regdata16 = MCI_GetVqd(pMCI).q;
 8003898:	9007      	str	r0, [sp, #28]
        *size = 2;
 800389a:	4694      	mov	ip, r2
          *regdata16 = MCI_GetVqd(pMCI).q;
 800389c:	8038      	strh	r0, [r7, #0]
         break;
 800389e:	e7c9      	b.n	8003834 <RI_GetRegCommandParser+0x110>
      if (freeSpace > 0 )
 80038a0:	2d00      	cmp	r5, #0
 80038a2:	d098      	beq.n	80037d6 <RI_GetRegCommandParser+0xb2>
        switch (regID)
 80038a4:	f5b3 6fa9 	cmp.w	r3, #1352	; 0x548
 80038a8:	f000 8225 	beq.w	8003cf6 <RI_GetRegCommandParser+0x5d2>
 80038ac:	f200 81b2 	bhi.w	8003c14 <RI_GetRegCommandParser+0x4f0>
 80038b0:	2b48      	cmp	r3, #72	; 0x48
 80038b2:	f000 8229 	beq.w	8003d08 <RI_GetRegCommandParser+0x5e4>
 80038b6:	2b88      	cmp	r3, #136	; 0x88
 80038b8:	d120      	bne.n	80038fc <RI_GetRegCommandParser+0x1d8>
          *data =  MCI_GetControlMode(pMCI);
 80038ba:	4608      	mov	r0, r1
 80038bc:	f7fe fcdc 	bl	8002278 <MCI_GetControlMode>
          break;
 80038c0:	2201      	movs	r2, #1
          *data =  MCI_GetControlMode(pMCI);
 80038c2:	7038      	strb	r0, [r7, #0]
        *size = 1;
 80038c4:	4694      	mov	ip, r2
          break;
 80038c6:	e7b5      	b.n	8003834 <RI_GetRegCommandParser+0x110>
      if ( freeSpace >= 4)
 80038c8:	2d03      	cmp	r5, #3
 80038ca:	d984      	bls.n	80037d6 <RI_GetRegCommandParser+0xb2>
        switch (regID)
 80038cc:	2b98      	cmp	r3, #152	; 0x98
 80038ce:	f000 8203 	beq.w	8003cd8 <RI_GetRegCommandParser+0x5b4>
 80038d2:	f200 81ac 	bhi.w	8003c2e <RI_GetRegCommandParser+0x50a>
 80038d6:	2b18      	cmp	r3, #24
 80038d8:	f000 8202 	beq.w	8003ce0 <RI_GetRegCommandParser+0x5bc>
 80038dc:	2b58      	cmp	r3, #88	; 0x58
 80038de:	d10d      	bne.n	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80038e0:	4608      	mov	r0, r1
 80038e2:	f7fe fcd9 	bl	8002298 <MCI_GetAvrgMecSpeedUnit>
          *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 80038e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80038ea:	0040      	lsls	r0, r0, #1
 80038ec:	2204      	movs	r2, #4
 80038ee:	6038      	str	r0, [r7, #0]
        *size = 4;
 80038f0:	4694      	mov	ip, r2
 80038f2:	e79f      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 80038f4:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 80038f8:	f000 8113 	beq.w	8003b22 <RI_GetRegCommandParser+0x3fe>
 80038fc:	2005      	movs	r0, #5
 80038fe:	e754      	b.n	80037aa <RI_GetRegCommandParser+0x86>
 8003900:	2b28      	cmp	r3, #40	; 0x28
 8003902:	d1fb      	bne.n	80038fc <RI_GetRegCommandParser+0x1d8>
        *rawSize = sizeof(GlobalConfig_reg_t);
 8003904:	2306      	movs	r3, #6
        if ((*rawSize) +2  > freeSpace)
 8003906:	2d07      	cmp	r5, #7
        *rawSize = sizeof(GlobalConfig_reg_t);
 8003908:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 800390a:	f67f af64 	bls.w	80037d6 <RI_GetRegCommandParser+0xb2>
          memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t) );
 800390e:	4b87      	ldr	r3, [pc, #540]	; (8003b2c <RI_GetRegCommandParser+0x408>)
 8003910:	6819      	ldr	r1, [r3, #0]
 8003912:	6011      	str	r1, [r2, #0]
 8003914:	889b      	ldrh	r3, [r3, #4]
 8003916:	8093      	strh	r3, [r2, #4]
 8003918:	2208      	movs	r2, #8
      *size = (*rawSize)+2;
 800391a:	4694      	mov	ip, r2
 800391c:	e78a      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 800391e:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8003922:	f000 8193 	beq.w	8003c4c <RI_GetRegCommandParser+0x528>
 8003926:	f5b3 7f6a 	cmp.w	r3, #936	; 0x3a8
 800392a:	d13e      	bne.n	80039aa <RI_GetRegCommandParser+0x286>
            *rawSize = 8;
 800392c:	f04f 0308 	mov.w	r3, #8
 8003930:	803b      	strh	r3, [r7, #0]
            Position = TC_GetMoveDuration(pPosCtrl[motorID]);   /* Does this duration make sense ? */
 8003932:	4b7f      	ldr	r3, [pc, #508]	; (8003b30 <RI_GetRegCommandParser+0x40c>)
 8003934:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8003938:	f007 f8f4 	bl	800ab24 <TC_GetMoveDuration>
            Duration = TC_GetTargetPosition(pPosCtrl[motorID]);
 800393c:	4b7c      	ldr	r3, [pc, #496]	; (8003b30 <RI_GetRegCommandParser+0x40c>)
 800393e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
            Position = TC_GetMoveDuration(pPosCtrl[motorID]);   /* Does this duration make sense ? */
 8003942:	ee10 4a10 	vmov	r4, s0
            Duration = TC_GetTargetPosition(pPosCtrl[motorID]);
 8003946:	f007 f8e9 	bl	800ab1c <TC_GetTargetPosition>
      *size = (*rawSize)+2;
 800394a:	f8b7 c000 	ldrh.w	ip, [r7]
            memcpy(rawData, &Position, 4 );
 800394e:	f8c7 4002 	str.w	r4, [r7, #2]
            memcpy(&rawData[4], &Duration, 4 );
 8003952:	ee10 3a10 	vmov	r3, s0
      *size = (*rawSize)+2;
 8003956:	f10c 0c02 	add.w	ip, ip, #2
 800395a:	fa1f fc8c 	uxth.w	ip, ip
 800395e:	4662      	mov	r2, ip
            memcpy(&rawData[4], &Duration, 4 );
 8003960:	f8c7 3006 	str.w	r3, [r7, #6]
     if (retVal == MCP_CMD_OK )
 8003964:	e766      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 8003966:	2be0      	cmp	r3, #224	; 0xe0
 8003968:	d1c8      	bne.n	80038fc <RI_GetRegCommandParser+0x1d8>
        retVal = RI_MovString (MOTOR_NAME[motorID] ,charData, size, freeSpace);
 800396a:	4b72      	ldr	r3, [pc, #456]	; (8003b34 <RI_GetRegCommandParser+0x410>)
 800396c:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 8003970:	7801      	ldrb	r1, [r0, #0]
 8003972:	2900      	cmp	r1, #0
 8003974:	f000 81ed 	beq.w	8003d52 <RI_GetRegCommandParser+0x62e>
 8003978:	2d01      	cmp	r5, #1
 800397a:	f240 8180 	bls.w	8003c7e <RI_GetRegCommandParser+0x55a>
 800397e:	1eac      	subs	r4, r5, #2
 8003980:	b2a4      	uxth	r4, r4
 8003982:	3401      	adds	r4, #1
 8003984:	443c      	add	r4, r7
 8003986:	463b      	mov	r3, r7
 8003988:	f1c7 0201 	rsb	r2, r7, #1
 800398c:	e002      	b.n	8003994 <RI_GetRegCommandParser+0x270>
 800398e:	42a3      	cmp	r3, r4
 8003990:	f000 8175 	beq.w	8003c7e <RI_GetRegCommandParser+0x55a>
    *destString = *srcString ;
 8003994:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8003998:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800399c:	eb03 0c02 	add.w	ip, r3, r2
 80039a0:	fa1f fc8c 	uxth.w	ip, ip
 80039a4:	2900      	cmp	r1, #0
 80039a6:	d1f2      	bne.n	800398e <RI_GetRegCommandParser+0x26a>
 80039a8:	e741      	b.n	800382e <RI_GetRegCommandParser+0x10a>
 80039aa:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 80039ae:	d1a5      	bne.n	80038fc <RI_GetRegCommandParser+0x1d8>
          *rawSize = 4;
 80039b0:	2304      	movs	r3, #4
 80039b2:	803b      	strh	r3, [r7, #0]
          *torque = MCI_GetLastRampFinalTorque(pMCI);
 80039b4:	4608      	mov	r0, r1
 80039b6:	9101      	str	r1, [sp, #4]
 80039b8:	f7fe fc64 	bl	8002284 <MCI_GetLastRampFinalTorque>
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 80039bc:	9901      	ldr	r1, [sp, #4]
          *torque = MCI_GetLastRampFinalTorque(pMCI);
 80039be:	8078      	strh	r0, [r7, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 80039c0:	4608      	mov	r0, r1
 80039c2:	f7fe fc63 	bl	800228c <MCI_GetLastRampFinalDuration>
      *size = (*rawSize)+2;
 80039c6:	f8b7 c000 	ldrh.w	ip, [r7]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 80039ca:	80b8      	strh	r0, [r7, #4]
      *size = (*rawSize)+2;
 80039cc:	f10c 0c02 	add.w	ip, ip, #2
 80039d0:	fa1f fc8c 	uxth.w	ip, ip
     if (retVal == MCP_CMD_OK )
 80039d4:	4662      	mov	r2, ip
 80039d6:	e72d      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 80039d8:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80039dc:	f000 8210 	beq.w	8003e00 <RI_GetRegCommandParser+0x6dc>
 80039e0:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80039e4:	d18a      	bne.n	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdata16 = MCI_GetIqdref(pMCI).q;
 80039e6:	4608      	mov	r0, r1
 80039e8:	f7fe fc8c 	bl	8002304 <MCI_GetIqdref>
         break;
 80039ec:	2202      	movs	r2, #2
          *regdata16 = MCI_GetIqdref(pMCI).q;
 80039ee:	9009      	str	r0, [sp, #36]	; 0x24
        *size = 2;
 80039f0:	4694      	mov	ip, r2
          *regdata16 = MCI_GetIqdref(pMCI).q;
 80039f2:	8038      	strh	r0, [r7, #0]
         break;
 80039f4:	e71e      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 80039f6:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80039fa:	f000 81f7 	beq.w	8003dec <RI_GetRegCommandParser+0x6c8>
 80039fe:	d94a      	bls.n	8003a96 <RI_GetRegCommandParser+0x372>
 8003a00:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8003a04:	f000 821b 	beq.w	8003e3e <RI_GetRegCommandParser+0x71a>
 8003a08:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003a0c:	f47f af76 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 8003a10:	4608      	mov	r0, r1
 8003a12:	f7fe fc5b 	bl	80022cc <MCI_GetIalphabeta>
         break;
 8003a16:	2202      	movs	r2, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 8003a18:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003a1c:	900c      	str	r0, [sp, #48]	; 0x30
        *size = 2;
 8003a1e:	4694      	mov	ip, r2
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 8003a20:	803b      	strh	r3, [r7, #0]
         break;
 8003a22:	e707      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 8003a24:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8003a28:	f000 81f4 	beq.w	8003e14 <RI_GetRegCommandParser+0x6f0>
 8003a2c:	f240 809f 	bls.w	8003b6e <RI_GetRegCommandParser+0x44a>
 8003a30:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003a34:	f000 8239 	beq.w	8003eaa <RI_GetRegCommandParser+0x786>
 8003a38:	f240 8088 	bls.w	8003b4c <RI_GetRegCommandParser+0x428>
 8003a3c:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8003a40:	f47f af5c 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8003a44:	4b3c      	ldr	r3, [pc, #240]	; (8003b38 <RI_GetRegCommandParser+0x414>)
 8003a46:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8003a4a:	f004 ff45 	bl	80088d8 <VBS_GetAvBusVoltage_V>
         break;
 8003a4e:	2202      	movs	r2, #2
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8003a50:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003a52:	4694      	mov	ip, r2
         break;
 8003a54:	e6ee      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 8003a56:	f241 4290 	movw	r2, #5264	; 0x1490
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	f000 8223 	beq.w	8003ea6 <RI_GetRegCommandParser+0x782>
 8003a60:	d94e      	bls.n	8003b00 <RI_GetRegCommandParser+0x3dc>
 8003a62:	f241 6210 	movw	r2, #5648	; 0x1610
 8003a66:	4293      	cmp	r3, r2
 8003a68:	f000 821b 	beq.w	8003ea2 <RI_GetRegCommandParser+0x77e>
 8003a6c:	d936      	bls.n	8003adc <RI_GetRegCommandParser+0x3b8>
 8003a6e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8003a72:	4293      	cmp	r3, r2
 8003a74:	f000 8213 	beq.w	8003e9e <RI_GetRegCommandParser+0x77a>
 8003a78:	d91d      	bls.n	8003ab6 <RI_GetRegCommandParser+0x392>
 8003a7a:	f241 7210 	movw	r2, #5904	; 0x1710
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	f47f af3c 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdataU16 = PID_GetKDDivisor(pPIDPosCtrl[motorID]);
 8003a84:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <RI_GetRegCommandParser+0x418>)
          *regdataU16 = PID_GetKDDivisor(pPIDId[motorID]);
 8003a86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003a8a:	f005 fbdf 	bl	800924c <PID_GetKDDivisor>
 8003a8e:	2202      	movs	r2, #2
 8003a90:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003a92:	4694      	mov	ip, r2
 8003a94:	e6ce      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 8003a96:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8003a9a:	f000 81bd 	beq.w	8003e18 <RI_GetRegCommandParser+0x6f4>
 8003a9e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003aa2:	f47f af2b 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdata16 = MCI_GetIab(pMCI).a;
 8003aa6:	4608      	mov	r0, r1
 8003aa8:	f7fe fc02 	bl	80022b0 <MCI_GetIab>
         break;
 8003aac:	2202      	movs	r2, #2
          *regdata16 = MCI_GetIab(pMCI).a;
 8003aae:	900f      	str	r0, [sp, #60]	; 0x3c
        *size = 2;
 8003ab0:	4694      	mov	ip, r2
          *regdata16 = MCI_GetIab(pMCI).a;
 8003ab2:	8038      	strh	r0, [r7, #0]
         break;
 8003ab4:	e6be      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 8003ab6:	f241 6250 	movw	r2, #5712	; 0x1650
 8003aba:	4293      	cmp	r3, r2
 8003abc:	f000 8181 	beq.w	8003dc2 <RI_GetRegCommandParser+0x69e>
 8003ac0:	f241 6290 	movw	r2, #5776	; 0x1690
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	f47f af19 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdataU16 = PID_GetKPDivisor(pPIDPosCtrl[motorID]);
 8003aca:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <RI_GetRegCommandParser+0x418>)
          *regdataU16 = PID_GetKPDivisor(pPIDId[motorID]);
 8003acc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003ad0:	f005 fb94 	bl	80091fc <PID_GetKPDivisor>
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003ad8:	4694      	mov	ip, r2
 8003ada:	e6ab      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 8003adc:	f241 5250 	movw	r2, #5456	; 0x1550
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	f000 81d3 	beq.w	8003e8c <RI_GetRegCommandParser+0x768>
 8003ae6:	d951      	bls.n	8003b8c <RI_GetRegCommandParser+0x468>
 8003ae8:	f241 5290 	movw	r2, #5520	; 0x1590
 8003aec:	4293      	cmp	r3, r2
 8003aee:	f000 81b2 	beq.w	8003e56 <RI_GetRegCommandParser+0x732>
 8003af2:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8003af6:	4293      	cmp	r3, r2
 8003af8:	f47f af00 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdataU16 = PID_GetKPDivisor(pPIDIq[motorID]);
 8003afc:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <RI_GetRegCommandParser+0x41c>)
 8003afe:	e7e5      	b.n	8003acc <RI_GetRegCommandParser+0x3a8>
 8003b00:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8003b04:	d00d      	beq.n	8003b22 <RI_GetRegCommandParser+0x3fe>
 8003b06:	d959      	bls.n	8003bbc <RI_GetRegCommandParser+0x498>
 8003b08:	f241 4210 	movw	r2, #5136	; 0x1410
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f000 81a0 	beq.w	8003e52 <RI_GetRegCommandParser+0x72e>
 8003b12:	d947      	bls.n	8003ba4 <RI_GetRegCommandParser+0x480>
 8003b14:	f241 4250 	movw	r2, #5200	; 0x1450
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	f47f aeef 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdataU16 = PID_GetKPDivisor(pPIDSpeed[motorID]);
 8003b1e:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <RI_GetRegCommandParser+0x420>)
 8003b20:	e7d4      	b.n	8003acc <RI_GetRegCommandParser+0x3a8>
 8003b22:	2202      	movs	r2, #2
 8003b24:	4694      	mov	ip, r2
 8003b26:	e685      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 8003b28:	200004fc 	.word	0x200004fc
 8003b2c:	20000568 	.word	0x20000568
 8003b30:	200004f0 	.word	0x200004f0
 8003b34:	2000055c 	.word	0x2000055c
 8003b38:	2000068c 	.word	0x2000068c
 8003b3c:	20000694 	.word	0x20000694
 8003b40:	200004ec 	.word	0x200004ec
 8003b44:	20000698 	.word	0x20000698
 8003b48:	20000bf4 	.word	0x20000bf4
 8003b4c:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8003b50:	f000 817d 	beq.w	8003e4e <RI_GetRegCommandParser+0x72a>
 8003b54:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8003b58:	f47f aed0 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8003b5c:	4bbf      	ldr	r3, [pc, #764]	; (8003e5c <RI_GetRegCommandParser+0x738>)
          *regdata16 = PID_GetKI( pPIDPosCtrl[motorID]);
 8003b5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003b62:	f005 fb45 	bl	80091f0 <PID_GetKI>
 8003b66:	2202      	movs	r2, #2
 8003b68:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003b6a:	4694      	mov	ip, r2
 8003b6c:	e662      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 8003b6e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8003b72:	f000 811d 	beq.w	8003db0 <RI_GetRegCommandParser+0x68c>
 8003b76:	d933      	bls.n	8003be0 <RI_GetRegCommandParser+0x4bc>
 8003b78:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003b7c:	f000 8116 	beq.w	8003dac <RI_GetRegCommandParser+0x688>
 8003b80:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8003b84:	f47f aeba 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8003b88:	4bb5      	ldr	r3, [pc, #724]	; (8003e60 <RI_GetRegCommandParser+0x73c>)
 8003b8a:	e7e8      	b.n	8003b5e <RI_GetRegCommandParser+0x43a>
 8003b8c:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8003b90:	4293      	cmp	r3, r2
 8003b92:	f000 8109 	beq.w	8003da8 <RI_GetRegCommandParser+0x684>
 8003b96:	f241 5210 	movw	r2, #5392	; 0x1510
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	f47f aeae 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdataU16 = PID_GetKPDivisor(pPIDId[motorID]);
 8003ba0:	4bae      	ldr	r3, [pc, #696]	; (8003e5c <RI_GetRegCommandParser+0x738>)
 8003ba2:	e793      	b.n	8003acc <RI_GetRegCommandParser+0x3a8>
 8003ba4:	f241 3290 	movw	r2, #5008	; 0x1390
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	f000 80fb 	beq.w	8003da4 <RI_GetRegCommandParser+0x680>
 8003bae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	f47f aea2 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdata16 = PID_GetKI( pPIDPosCtrl[motorID]);
 8003bb8:	4baa      	ldr	r3, [pc, #680]	; (8003e64 <RI_GetRegCommandParser+0x740>)
 8003bba:	e7d0      	b.n	8003b5e <RI_GetRegCommandParser+0x43a>
 8003bbc:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 8003bc0:	f000 80e7 	beq.w	8003d92 <RI_GetRegCommandParser+0x66e>
 8003bc4:	d914      	bls.n	8003bf0 <RI_GetRegCommandParser+0x4cc>
 8003bc6:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 8003bca:	f47f ae93 	bne.w	80038f4 <RI_GetRegCommandParser+0x1d0>
          *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) pEncoder[motorID]);
 8003bce:	4ba6      	ldr	r3, [pc, #664]	; (8003e68 <RI_GetRegCommandParser+0x744>)
 8003bd0:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8003bd4:	f006 fbc8 	bl	800a368 <SPD_GetS16Speed>
 8003bd8:	2202      	movs	r2, #2
 8003bda:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003bdc:	4694      	mov	ip, r2
 8003bde:	e629      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 8003be0:	2b90      	cmp	r3, #144	; 0x90
 8003be2:	f000 80cd 	beq.w	8003d80 <RI_GetRegCommandParser+0x65c>
 8003be6:	2bd0      	cmp	r3, #208	; 0xd0
 8003be8:	f47f ae88 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003bec:	4b9f      	ldr	r3, [pc, #636]	; (8003e6c <RI_GetRegCommandParser+0x748>)
 8003bee:	e7b6      	b.n	8003b5e <RI_GetRegCommandParser+0x43a>
 8003bf0:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003bf4:	f000 80bc 	beq.w	8003d70 <RI_GetRegCommandParser+0x64c>
 8003bf8:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003bfc:	f47f ae7e 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *regdata16 = MCI_GetValphabeta(pMCI).beta;
 8003c00:	4608      	mov	r0, r1
 8003c02:	f7fe fb9b 	bl	800233c <MCI_GetValphabeta>
 8003c06:	2202      	movs	r2, #2
 8003c08:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003c0c:	9004      	str	r0, [sp, #16]
        *size = 2;
 8003c0e:	4694      	mov	ip, r2
          *regdata16 = MCI_GetValphabeta(pMCI).beta;
 8003c10:	803b      	strh	r3, [r7, #0]
     if (retVal == MCP_CMD_OK )
 8003c12:	e60f      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 8003c14:	f5b3 6fb1 	cmp.w	r3, #1416	; 0x588
 8003c18:	f47f ae70 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
          *data = (uint8_t) TC_GetAlignmentStatus(pPosCtrl[motorID]);
 8003c1c:	4b94      	ldr	r3, [pc, #592]	; (8003e70 <RI_GetRegCommandParser+0x74c>)
 8003c1e:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8003c22:	f006 ff87 	bl	800ab34 <TC_GetAlignmentStatus>
          break;
 8003c26:	2201      	movs	r2, #1
          *data = (uint8_t) TC_GetAlignmentStatus(pPosCtrl[motorID]);
 8003c28:	7038      	strb	r0, [r7, #0]
        *size = 1;
 8003c2a:	4694      	mov	ip, r2
          break;
 8003c2c:	e602      	b.n	8003834 <RI_GetRegCommandParser+0x110>
 8003c2e:	f640 2258 	movw	r2, #2648	; 0xa58
 8003c32:	4293      	cmp	r3, r2
 8003c34:	f47f ae62 	bne.w	80038fc <RI_GetRegCommandParser+0x1d8>
            ReadVal.Float_Val = MCI_GetCurrentPosition(pMCI);
 8003c38:	4608      	mov	r0, r1
 8003c3a:	f7fe fb15 	bl	8002268 <MCI_GetCurrentPosition>
 8003c3e:	ed8d 0a01 	vstr	s0, [sp, #4]
            *regdataU32 = ReadVal.U32_Val;
 8003c42:	9b01      	ldr	r3, [sp, #4]
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	2204      	movs	r2, #4
        *size = 4;
 8003c48:	4694      	mov	ip, r2
 8003c4a:	e5f3      	b.n	8003834 <RI_GetRegCommandParser+0x110>
        *rawSize = 4;
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	803b      	strh	r3, [r7, #0]
        *iqref = MCI_GetIqdref(pMCI).q;
 8003c50:	4608      	mov	r0, r1
 8003c52:	9101      	str	r1, [sp, #4]
 8003c54:	f7fe fb56 	bl	8002304 <MCI_GetIqdref>
        *idref = MCI_GetIqdref(pMCI).d;
 8003c58:	9901      	ldr	r1, [sp, #4]
        *iqref = MCI_GetIqdref(pMCI).q;
 8003c5a:	8078      	strh	r0, [r7, #2]
 8003c5c:	4603      	mov	r3, r0
        *idref = MCI_GetIqdref(pMCI).d;
 8003c5e:	4608      	mov	r0, r1
        *iqref = MCI_GetIqdref(pMCI).q;
 8003c60:	9303      	str	r3, [sp, #12]
        *idref = MCI_GetIqdref(pMCI).d;
 8003c62:	f7fe fb4f 	bl	8002304 <MCI_GetIqdref>
      *size = (*rawSize)+2;
 8003c66:	f8b7 c000 	ldrh.w	ip, [r7]
        *idref = MCI_GetIqdref(pMCI).d;
 8003c6a:	9002      	str	r0, [sp, #8]
      *size = (*rawSize)+2;
 8003c6c:	f10c 0c02 	add.w	ip, ip, #2
        *idref = MCI_GetIqdref(pMCI).d;
 8003c70:	f3c0 430f 	ubfx	r3, r0, #16, #16
      *size = (*rawSize)+2;
 8003c74:	fa1f fc8c 	uxth.w	ip, ip
        *idref = MCI_GetIqdref(pMCI).d;
 8003c78:	80bb      	strh	r3, [r7, #4]
     if (retVal == MCP_CMD_OK )
 8003c7a:	4662      	mov	r2, ip
 8003c7c:	e5da      	b.n	8003834 <RI_GetRegCommandParser+0x110>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003c7e:	2006      	movs	r0, #6
 8003c80:	e593      	b.n	80037aa <RI_GetRegCommandParser+0x86>
        retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 8003c82:	4b7c      	ldr	r3, [pc, #496]	; (8003e74 <RI_GetRegCommandParser+0x750>)
 8003c84:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 8003c88:	7801      	ldrb	r1, [r0, #0]
 8003c8a:	2900      	cmp	r1, #0
 8003c8c:	d061      	beq.n	8003d52 <RI_GetRegCommandParser+0x62e>
 8003c8e:	2d01      	cmp	r5, #1
 8003c90:	d9f5      	bls.n	8003c7e <RI_GetRegCommandParser+0x55a>
 8003c92:	1eac      	subs	r4, r5, #2
 8003c94:	b2a4      	uxth	r4, r4
 8003c96:	3401      	adds	r4, #1
 8003c98:	443c      	add	r4, r7
 8003c9a:	463b      	mov	r3, r7
 8003c9c:	f1c7 0201 	rsb	r2, r7, #1
 8003ca0:	e001      	b.n	8003ca6 <RI_GetRegCommandParser+0x582>
 8003ca2:	42a3      	cmp	r3, r4
 8003ca4:	d0eb      	beq.n	8003c7e <RI_GetRegCommandParser+0x55a>
    *destString = *srcString ;
 8003ca6:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8003caa:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8003cae:	eb03 0c02 	add.w	ip, r3, r2
 8003cb2:	fa1f fc8c 	uxth.w	ip, ip
 8003cb6:	2900      	cmp	r1, #0
 8003cb8:	d1f3      	bne.n	8003ca2 <RI_GetRegCommandParser+0x57e>
 8003cba:	e5b8      	b.n	800382e <RI_GetRegCommandParser+0x10a>
          memcpy(rawData, FOCConfig_reg[motorID], sizeof(FOCFwConfig_reg_t) );
 8003cbc:	4b6e      	ldr	r3, [pc, #440]	; (8003e78 <RI_GetRegCommandParser+0x754>)
 8003cbe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	689c      	ldr	r4, [r3, #8]
 8003cc8:	6094      	str	r4, [r2, #8]
 8003cca:	6010      	str	r0, [r2, #0]
 8003ccc:	6051      	str	r1, [r2, #4]
 8003cce:	899b      	ldrh	r3, [r3, #12]
 8003cd0:	8193      	strh	r3, [r2, #12]
 8003cd2:	2210      	movs	r2, #16
      *size = (*rawSize)+2;
 8003cd4:	4694      	mov	ip, r2
 8003cd6:	e5ad      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003cd8:	4608      	mov	r0, r1
 8003cda:	f7fe fae5 	bl	80022a8 <MCI_GetMecSpeedRefUnit>
 8003cde:	e602      	b.n	80038e6 <RI_GetRegCommandParser+0x1c2>
          *regdataU32 = STM_GetFaultState(&STM[motorID]);
 8003ce0:	4866      	ldr	r0, [pc, #408]	; (8003e7c <RI_GetRegCommandParser+0x758>)
 8003ce2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8003ce6:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 8003cea:	f006 fcb9 	bl	800a660 <STM_GetFaultState>
 8003cee:	2204      	movs	r2, #4
 8003cf0:	6038      	str	r0, [r7, #0]
        *size = 4;
 8003cf2:	4694      	mov	ip, r2
 8003cf4:	e59e      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *data = (uint8_t) TC_GetControlPositionStatus(pPosCtrl[motorID]);
 8003cf6:	4b5e      	ldr	r3, [pc, #376]	; (8003e70 <RI_GetRegCommandParser+0x74c>)
 8003cf8:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8003cfc:	f006 ff16 	bl	800ab2c <TC_GetControlPositionStatus>
          break;
 8003d00:	2201      	movs	r2, #1
          *data = (uint8_t) TC_GetControlPositionStatus(pPosCtrl[motorID]);
 8003d02:	7038      	strb	r0, [r7, #0]
        *size = 1;
 8003d04:	4694      	mov	ip, r2
          break;
 8003d06:	e595      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *data = STM_GetState(&STM[motorID]);
 8003d08:	4b5c      	ldr	r3, [pc, #368]	; (8003e7c <RI_GetRegCommandParser+0x758>)
 8003d0a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8003d0e:	eb03 004e 	add.w	r0, r3, lr, lsl #1
 8003d12:	f006 fc97 	bl	800a644 <STM_GetState>
 8003d16:	2201      	movs	r2, #1
 8003d18:	7038      	strb	r0, [r7, #0]
        *size = 1;
 8003d1a:	4694      	mov	ip, r2
 8003d1c:	e58a      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *rpm = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003d1e:	4608      	mov	r0, r1
 8003d20:	9101      	str	r1, [sp, #4]
 8003d22:	f7fe faab 	bl	800227c <MCI_GetLastRampFinalSpeed>
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8003d26:	9901      	ldr	r1, [sp, #4]
          *rpm = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003d28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003d2c:	0040      	lsls	r0, r0, #1
 8003d2e:	f8c7 0002 	str.w	r0, [r7, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8003d32:	4608      	mov	r0, r1
 8003d34:	f7fe faaa 	bl	800228c <MCI_GetLastRampFinalDuration>
          *rawSize = 6;
 8003d38:	2306      	movs	r3, #6
 8003d3a:	2208      	movs	r2, #8
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8003d3c:	80f8      	strh	r0, [r7, #6]
          *rawSize = 6;
 8003d3e:	803b      	strh	r3, [r7, #0]
      *size = (*rawSize)+2;
 8003d40:	4694      	mov	ip, r2
 8003d42:	e577      	b.n	8003834 <RI_GetRegCommandParser+0x110>
        *rawSize = sizeof(MotorConfig_reg_t);
 8003d44:	230e      	movs	r3, #14
        if ((*rawSize) +2  > freeSpace)
 8003d46:	2d0f      	cmp	r5, #15
        *rawSize = sizeof(MotorConfig_reg_t);
 8003d48:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 8003d4a:	f67f ad44 	bls.w	80037d6 <RI_GetRegCommandParser+0xb2>
          memcpy(rawData, MotorConfig_reg[motorID], sizeof(MotorConfig_reg_t) );
 8003d4e:	4b4c      	ldr	r3, [pc, #304]	; (8003e80 <RI_GetRegCommandParser+0x75c>)
 8003d50:	e7b5      	b.n	8003cbe <RI_GetRegCommandParser+0x59a>
  while ((*srcString != 0) && (*size < maxSize) )
 8003d52:	f04f 0c01 	mov.w	ip, #1
  *size= 1 ; /* /0 is the min String size */
 8003d56:	4662      	mov	r2, ip
  while ((*srcString != 0) && (*size < maxSize) )
 8003d58:	463b      	mov	r3, r7
 8003d5a:	e569      	b.n	8003830 <RI_GetRegCommandParser+0x10c>
  uint8_t retVal = MCP_CMD_NOK;
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	e524      	b.n	80037aa <RI_GetRegCommandParser+0x86>
          *regdata16 = MCI_GetIqd(pMCI).q;
 8003d60:	4608      	mov	r0, r1
 8003d62:	f7fe fac1 	bl	80022e8 <MCI_GetIqd>
         break;
 8003d66:	2202      	movs	r2, #2
          *regdata16 = MCI_GetIqd(pMCI).q;
 8003d68:	900b      	str	r0, [sp, #44]	; 0x2c
        *size = 2;
 8003d6a:	4694      	mov	ip, r2
          *regdata16 = MCI_GetIqd(pMCI).q;
 8003d6c:	8038      	strh	r0, [r7, #0]
         break;
 8003d6e:	e561      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8003d70:	4608      	mov	r0, r1
 8003d72:	f7fe fae3 	bl	800233c <MCI_GetValphabeta>
         break;
 8003d76:	2202      	movs	r2, #2
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8003d78:	9005      	str	r0, [sp, #20]
        *size = 2;
 8003d7a:	4694      	mov	ip, r2
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8003d7c:	8038      	strh	r0, [r7, #0]
         break;
 8003d7e:	e559      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8003d80:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <RI_GetRegCommandParser+0x748>)
          *regdata16 = PID_GetKP( pPIDPosCtrl[motorID]);
 8003d82:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003d86:	f005 fa2f 	bl	80091e8 <PID_GetKP>
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003d8e:	4694      	mov	ip, r2
 8003d90:	e550      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) pEncoder[motorID]);
 8003d92:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <RI_GetRegCommandParser+0x744>)
 8003d94:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8003d98:	f006 faac 	bl	800a2f4 <SPD_GetElAngle>
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003da0:	4694      	mov	ip, r2
 8003da2:	e547      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdata16 = PID_GetKP( pPIDPosCtrl[motorID]);
 8003da4:	4b2f      	ldr	r3, [pc, #188]	; (8003e64 <RI_GetRegCommandParser+0x740>)
 8003da6:	e7ec      	b.n	8003d82 <RI_GetRegCommandParser+0x65e>
          *regdataU16 = PID_GetKDDivisor(pPIDSpeed[motorID]);
 8003da8:	4b30      	ldr	r3, [pc, #192]	; (8003e6c <RI_GetRegCommandParser+0x748>)
 8003daa:	e66c      	b.n	8003a86 <RI_GetRegCommandParser+0x362>
          *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8003dac:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <RI_GetRegCommandParser+0x73c>)
 8003dae:	e7e8      	b.n	8003d82 <RI_GetRegCommandParser+0x65e>
          *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8003db0:	4b2e      	ldr	r3, [pc, #184]	; (8003e6c <RI_GetRegCommandParser+0x748>)
          *regdata16 = PID_GetKD( pPIDPosCtrl[motorID]);
 8003db2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003db6:	f005 fa45 	bl	8009244 <PID_GetKD>
 8003dba:	2202      	movs	r2, #2
 8003dbc:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003dbe:	4694      	mov	ip, r2
 8003dc0:	e538      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdataU16 = PID_GetKDDivisor(pPIDIq[motorID]);
 8003dc2:	4b27      	ldr	r3, [pc, #156]	; (8003e60 <RI_GetRegCommandParser+0x73c>)
 8003dc4:	e65f      	b.n	8003a86 <RI_GetRegCommandParser+0x362>
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <RI_GetRegCommandParser+0x760>)
 8003dc8:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8003dcc:	f005 f9ea 	bl	80091a4 <NTC_GetAvTemp_C>
         break;
 8003dd0:	2202      	movs	r2, #2
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8003dd2:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003dd4:	4694      	mov	ip, r2
         break;
 8003dd6:	e52d      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdata16 = MCI_GetVqd(pMCI).d;
 8003dd8:	4608      	mov	r0, r1
 8003dda:	f7fe faa1 	bl	8002320 <MCI_GetVqd>
         break;
 8003dde:	2202      	movs	r2, #2
          *regdata16 = MCI_GetVqd(pMCI).d;
 8003de0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003de4:	9006      	str	r0, [sp, #24]
        *size = 2;
 8003de6:	4694      	mov	ip, r2
          *regdata16 = MCI_GetVqd(pMCI).d;
 8003de8:	803b      	strh	r3, [r7, #0]
         break;
 8003dea:	e523      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdata16 = MCI_GetIab(pMCI).b;
 8003dec:	4608      	mov	r0, r1
 8003dee:	f7fe fa5f 	bl	80022b0 <MCI_GetIab>
         break;
 8003df2:	2202      	movs	r2, #2
          *regdata16 = MCI_GetIab(pMCI).b;
 8003df4:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003df8:	900e      	str	r0, [sp, #56]	; 0x38
        *size = 2;
 8003dfa:	4694      	mov	ip, r2
          *regdata16 = MCI_GetIab(pMCI).b;
 8003dfc:	803b      	strh	r3, [r7, #0]
         break;
 8003dfe:	e519      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdata16 = MCI_GetIqd(pMCI).d;
 8003e00:	4608      	mov	r0, r1
 8003e02:	f7fe fa71 	bl	80022e8 <MCI_GetIqd>
         break;
 8003e06:	2202      	movs	r2, #2
          *regdata16 = MCI_GetIqd(pMCI).d;
 8003e08:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003e0c:	900a      	str	r0, [sp, #40]	; 0x28
        *size = 2;
 8003e0e:	4694      	mov	ip, r2
          *regdata16 = MCI_GetIqd(pMCI).d;
 8003e10:	803b      	strh	r3, [r7, #0]
         break;
 8003e12:	e50f      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <RI_GetRegCommandParser+0x73c>)
 8003e16:	e7cc      	b.n	8003db2 <RI_GetRegCommandParser+0x68e>
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <RI_GetRegCommandParser+0x764>)
 8003e1a:	f853 002e 	ldr.w	r0, [r3, lr, lsl #2]
 8003e1e:	f005 f97d 	bl	800911c <MPM_GetAvrgElMotorPowerW>
         break;
 8003e22:	2202      	movs	r2, #2
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 8003e24:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003e26:	4694      	mov	ip, r2
         break;
 8003e28:	e504      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdata16 = MCI_GetIqdref(pMCI).d;
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	f7fe fa6a 	bl	8002304 <MCI_GetIqdref>
         break;
 8003e30:	2202      	movs	r2, #2
          *regdata16 = MCI_GetIqdref(pMCI).d;
 8003e32:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003e36:	9008      	str	r0, [sp, #32]
        *size = 2;
 8003e38:	4694      	mov	ip, r2
          *regdata16 = MCI_GetIqdref(pMCI).d;
 8003e3a:	803b      	strh	r3, [r7, #0]
         break;
 8003e3c:	e4fa      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8003e3e:	4608      	mov	r0, r1
 8003e40:	f7fe fa44 	bl	80022cc <MCI_GetIalphabeta>
         break;
 8003e44:	2202      	movs	r2, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8003e46:	900d      	str	r0, [sp, #52]	; 0x34
        *size = 2;
 8003e48:	4694      	mov	ip, r2
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8003e4a:	8038      	strh	r0, [r7, #0]
         break;
 8003e4c:	e4f2      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 8003e4e:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <RI_GetRegCommandParser+0x738>)
 8003e50:	e797      	b.n	8003d82 <RI_GetRegCommandParser+0x65e>
          *regdata16 = PID_GetKD( pPIDPosCtrl[motorID]);
 8003e52:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <RI_GetRegCommandParser+0x740>)
 8003e54:	e7ad      	b.n	8003db2 <RI_GetRegCommandParser+0x68e>
          *regdataU16 = PID_GetKDDivisor(pPIDId[motorID]);
 8003e56:	4b01      	ldr	r3, [pc, #4]	; (8003e5c <RI_GetRegCommandParser+0x738>)
 8003e58:	e615      	b.n	8003a86 <RI_GetRegCommandParser+0x362>
 8003e5a:	bf00      	nop
 8003e5c:	200004e8 	.word	0x200004e8
 8003e60:	200004ec 	.word	0x200004ec
 8003e64:	20000694 	.word	0x20000694
 8003e68:	20000690 	.word	0x20000690
 8003e6c:	20000698 	.word	0x20000698
 8003e70:	200004f0 	.word	0x200004f0
 8003e74:	20000564 	.word	0x20000564
 8003e78:	2000050c 	.word	0x2000050c
 8003e7c:	20000c14 	.word	0x20000c14
 8003e80:	20000560 	.word	0x20000560
 8003e84:	200004f8 	.word	0x200004f8
 8003e88:	200004e4 	.word	0x200004e4
          *regdataU16 = PID_GetKIDivisor(pPIDId[motorID]);
 8003e8c:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <RI_GetRegCommandParser+0x78c>)
 8003e8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003e92:	f005 f9bb 	bl	800920c <PID_GetKIDivisor>
 8003e96:	2202      	movs	r2, #2
 8003e98:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003e9a:	4694      	mov	ip, r2
 8003e9c:	e4ca      	b.n	8003834 <RI_GetRegCommandParser+0x110>
          *regdataU16 = PID_GetKIDivisor(pPIDPosCtrl[motorID]);
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <RI_GetRegCommandParser+0x790>)
 8003ea0:	e7f5      	b.n	8003e8e <RI_GetRegCommandParser+0x76a>
          *regdataU16 = PID_GetKIDivisor(pPIDIq[motorID]);
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <RI_GetRegCommandParser+0x794>)
 8003ea4:	e7f3      	b.n	8003e8e <RI_GetRegCommandParser+0x76a>
          *regdataU16 = PID_GetKIDivisor(pPIDSpeed[motorID]);
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <RI_GetRegCommandParser+0x798>)
 8003ea8:	e7f1      	b.n	8003e8e <RI_GetRegCommandParser+0x76a>
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003eaa:	4b01      	ldr	r3, [pc, #4]	; (8003eb0 <RI_GetRegCommandParser+0x78c>)
 8003eac:	e781      	b.n	8003db2 <RI_GetRegCommandParser+0x68e>
 8003eae:	bf00      	nop
 8003eb0:	200004e8 	.word	0x200004e8
 8003eb4:	20000694 	.word	0x20000694
 8003eb8:	200004ec 	.word	0x200004ec
 8003ebc:	20000698 	.word	0x20000698

08003ec0 <RI_GetIDSize>:
return retVal;
}

uint8_t RI_GetIDSize (uint16_t dataID)
{
  uint8_t typeID = dataID & TYPE_MASK;
 8003ec0:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003ec4:	3808      	subs	r0, #8
 8003ec6:	b2c0      	uxtb	r0, r0
 8003ec8:	2810      	cmp	r0, #16
 8003eca:	bf9a      	itte	ls
 8003ecc:	4b01      	ldrls	r3, [pc, #4]	; (8003ed4 <RI_GetIDSize+0x14>)
 8003ece:	5c18      	ldrbls	r0, [r3, r0]
 8003ed0:	2000      	movhi	r0, #0
    default:
      result=0;
      break;
  }
  return result;
}
 8003ed2:	4770      	bx	lr
 8003ed4:	0800aed0 	.word	0x0800aed0

08003ed8 <RI_GetPtrReg>:
  uint16_t regID = dataID & REG_MASK;
  uint8_t retVal = MCP_CMD_OK;

  MCI_Handle_t * pMCI = &Mci[motorID];

  switch (typeID)
 8003ed8:	f000 0238 	and.w	r2, r0, #56	; 0x38
 8003edc:	2a10      	cmp	r2, #16
  uint8_t typeID = dataID & TYPE_MASK;
 8003ede:	b2c3      	uxtb	r3, r0
  switch (typeID)
 8003ee0:	d003      	beq.n	8003eea <RI_GetPtrReg+0x12>
      break;
      case MC_REG_ENCODER_EL_ANGLE:
        *dataPtr = &(pEncoder[motorID]->_Super.hElAngle);
      break;
      default:
        *dataPtr = &nullData16;
 8003ee2:	4b52      	ldr	r3, [pc, #328]	; (800402c <RI_GetPtrReg+0x154>)
 8003ee4:	600b      	str	r3, [r1, #0]
        retVal = MCP_ERROR_UNKNOWN_REG;
 8003ee6:	2005      	movs	r0, #5
      *dataPtr = &nullData16;
      retVal = MCP_ERROR_UNKNOWN_REG;
      break;
  }
  return retVal;
}
 8003ee8:	4770      	bx	lr
  uint16_t regID = dataID & REG_MASK;
 8003eea:	f020 0007 	bic.w	r0, r0, #7
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
  MCI_Handle_t * pMCI = &Mci[motorID];
 8003ef8:	b2da      	uxtb	r2, r3
  uint16_t regID = dataID & REG_MASK;
 8003efa:	b283      	uxth	r3, r0
 8003efc:	d05f      	beq.n	8003fbe <RI_GetPtrReg+0xe6>
 8003efe:	d811      	bhi.n	8003f24 <RI_GetPtrReg+0x4c>
 8003f00:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003f04:	d063      	beq.n	8003fce <RI_GetPtrReg+0xf6>
 8003f06:	d929      	bls.n	8003f5c <RI_GetPtrReg+0x84>
 8003f08:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8003f0c:	d067      	beq.n	8003fde <RI_GetPtrReg+0x106>
 8003f0e:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8003f12:	d118      	bne.n	8003f46 <RI_GetPtrReg+0x6e>
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 8003f14:	4b46      	ldr	r3, [pc, #280]	; (8004030 <RI_GetPtrReg+0x158>)
 8003f16:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  uint8_t retVal = MCP_CMD_OK;
 8003f1a:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	3310      	adds	r3, #16
 8003f20:	600b      	str	r3, [r1, #0]
       break;
 8003f22:	4770      	bx	lr
 8003f24:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003f28:	d061      	beq.n	8003fee <RI_GetPtrReg+0x116>
 8003f2a:	d925      	bls.n	8003f78 <RI_GetPtrReg+0xa0>
 8003f2c:	f5b3 6f2d 	cmp.w	r3, #2768	; 0xad0
 8003f30:	d075      	beq.n	800401e <RI_GetPtrReg+0x146>
 8003f32:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 8003f36:	d1d4      	bne.n	8003ee2 <RI_GetPtrReg+0xa>
        *dataPtr = &(pEncoder[motorID]->_Super.hAvrMecSpeedUnit);
 8003f38:	4b3e      	ldr	r3, [pc, #248]	; (8004034 <RI_GetPtrReg+0x15c>)
 8003f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003f42:	2000      	movs	r0, #0
      break;
 8003f44:	4770      	bx	lr
 8003f46:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8003f4a:	d1ca      	bne.n	8003ee2 <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 8003f4c:	4b38      	ldr	r3, [pc, #224]	; (8004030 <RI_GetPtrReg+0x158>)
 8003f4e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  uint8_t retVal = MCP_CMD_OK;
 8003f52:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	330c      	adds	r3, #12
 8003f58:	600b      	str	r3, [r1, #0]
       break;
 8003f5a:	4770      	bx	lr
 8003f5c:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003f60:	d04d      	beq.n	8003ffe <RI_GetPtrReg+0x126>
 8003f62:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8003f66:	d115      	bne.n	8003f94 <RI_GetPtrReg+0xbc>
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 8003f68:	4b31      	ldr	r3, [pc, #196]	; (8004030 <RI_GetPtrReg+0x158>)
 8003f6a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  uint8_t retVal = MCP_CMD_OK;
 8003f6e:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	3304      	adds	r3, #4
 8003f74:	600b      	str	r3, [r1, #0]
       break;
 8003f76:	4770      	bx	lr
 8003f78:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003f7c:	d047      	beq.n	800400e <RI_GetPtrReg+0x136>
 8003f7e:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003f82:	d111      	bne.n	8003fa8 <RI_GetPtrReg+0xd0>
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 8003f84:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <RI_GetPtrReg+0x158>)
 8003f86:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  uint8_t retVal = MCP_CMD_OK;
 8003f8a:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	331a      	adds	r3, #26
 8003f90:	600b      	str	r3, [r1, #0]
       break;
 8003f92:	4770      	bx	lr
 8003f94:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003f98:	d1a3      	bne.n	8003ee2 <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 8003f9a:	4b25      	ldr	r3, [pc, #148]	; (8004030 <RI_GetPtrReg+0x158>)
 8003f9c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  uint8_t retVal = MCP_CMD_OK;
 8003fa0:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	600b      	str	r3, [r1, #0]
       break;
 8003fa6:	4770      	bx	lr
 8003fa8:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8003fac:	d199      	bne.n	8003ee2 <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 8003fae:	4b20      	ldr	r3, [pc, #128]	; (8004030 <RI_GetPtrReg+0x158>)
 8003fb0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  uint8_t retVal = MCP_CMD_OK;
 8003fb4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	3316      	adds	r3, #22
 8003fba:	600b      	str	r3, [r1, #0]
       break;
 8003fbc:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <RI_GetPtrReg+0x158>)
 8003fc0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  uint8_t retVal = MCP_CMD_OK;
 8003fc4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	3312      	adds	r3, #18
 8003fca:	600b      	str	r3, [r1, #0]
       break;
 8003fcc:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8003fce:	4b18      	ldr	r3, [pc, #96]	; (8004030 <RI_GetPtrReg+0x158>)
 8003fd0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  uint8_t retVal = MCP_CMD_OK;
 8003fd4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	3306      	adds	r3, #6
 8003fda:	600b      	str	r3, [r1, #0]
       break;
 8003fdc:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 8003fde:	4b14      	ldr	r3, [pc, #80]	; (8004030 <RI_GetPtrReg+0x158>)
 8003fe0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  uint8_t retVal = MCP_CMD_OK;
 8003fe4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	330e      	adds	r3, #14
 8003fea:	600b      	str	r3, [r1, #0]
       break;
 8003fec:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <RI_GetPtrReg+0x158>)
 8003ff0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  uint8_t retVal = MCP_CMD_OK;
 8003ff4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	331c      	adds	r3, #28
 8003ffa:	600b      	str	r3, [r1, #0]
       break;
 8003ffc:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 8003ffe:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <RI_GetPtrReg+0x158>)
 8004000:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  uint8_t retVal = MCP_CMD_OK;
 8004004:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	3302      	adds	r3, #2
 800400a:	600b      	str	r3, [r1, #0]
       break;
 800400c:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 800400e:	4b08      	ldr	r3, [pc, #32]	; (8004030 <RI_GetPtrReg+0x158>)
 8004010:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  uint8_t retVal = MCP_CMD_OK;
 8004014:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	3318      	adds	r3, #24
 800401a:	600b      	str	r3, [r1, #0]
       break;
 800401c:	4770      	bx	lr
        *dataPtr = &(pEncoder[motorID]->_Super.hElAngle);
 800401e:	4b05      	ldr	r3, [pc, #20]	; (8004034 <RI_GetPtrReg+0x15c>)
 8004020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004024:	3304      	adds	r3, #4
 8004026:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8004028:	2000      	movs	r0, #0
      break;
 800402a:	4770      	bx	lr
 800402c:	200006d8 	.word	0x200006d8
 8004030:	20000bf4 	.word	0x20000bf4
 8004034:	20000690 	.word	0x20000690

08004038 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004038:	4a65      	ldr	r2, [pc, #404]	; (80041d0 <RCM_RegisterRegConv+0x198>)
 800403a:	6813      	ldr	r3, [r2, #0]
{
 800403c:	b470      	push	{r4, r5, r6}
 800403e:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004040:	2b00      	cmp	r3, #0
 8004042:	d07e      	beq.n	8004142 <RCM_RegisterRegConv+0x10a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004044:	7904      	ldrb	r4, [r0, #4]
 8004046:	7918      	ldrb	r0, [r3, #4]
 8004048:	4284      	cmp	r4, r0
 800404a:	d01e      	beq.n	800408a <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800404c:	6855      	ldr	r5, [r2, #4]
 800404e:	2d00      	cmp	r5, #0
 8004050:	f000 808b 	beq.w	800416a <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004054:	792b      	ldrb	r3, [r5, #4]
 8004056:	42a3      	cmp	r3, r4
  uint8_t handle=255;
 8004058:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800405c:	d079      	beq.n	8004152 <RCM_RegisterRegConv+0x11a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800405e:	6893      	ldr	r3, [r2, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80a2 	beq.w	80041aa <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004066:	791d      	ldrb	r5, [r3, #4]
 8004068:	42a5      	cmp	r5, r4
 800406a:	d078      	beq.n	800415e <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800406c:	68d3      	ldr	r3, [r2, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80a0 	beq.w	80041b4 <RCM_RegisterRegConv+0x17c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004074:	791d      	ldrb	r5, [r3, #4]
 8004076:	42a5      	cmp	r5, r4
 8004078:	f000 8082 	beq.w	8004180 <RCM_RegisterRegConv+0x148>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 800407c:	2803      	cmp	r0, #3
 800407e:	bf88      	it	hi
 8004080:	20ff      	movhi	r0, #255	; 0xff
 8004082:	f240 80a0 	bls.w	80041c6 <RCM_RegisterRegConv+0x18e>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8004086:	bc70      	pop	{r4, r5, r6}
 8004088:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	680b      	ldr	r3, [r1, #0]
 800408e:	4283      	cmp	r3, r0
 8004090:	d1dc      	bne.n	800404c <RCM_RegisterRegConv+0x14>
  uint8_t i=0;
 8004092:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004094:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8004096:	4d4f      	ldr	r5, [pc, #316]	; (80041d4 <RCM_RegisterRegConv+0x19c>)
      RCM_handle_array [handle] = regConv;
 8004098:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800409c:	2200      	movs	r2, #0
 800409e:	f845 2030 	str.w	r2, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 80040a2:	07e5      	lsls	r5, r4, #31
 80040a4:	d422      	bmi.n	80040ec <RCM_RegisterRegConv+0xb4>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80040a6:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80040a8:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80040aa:	f022 0204 	bic.w	r2, r2, #4
 80040ae:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80040b0:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80040b2:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80040b4:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80040b6:	f022 0220 	bic.w	r2, r2, #32
 80040ba:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80040bc:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80040c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80040c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040cc:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	dbfc      	blt.n	80040ce <RCM_RegisterRegConv+0x96>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80040d4:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 80040d6:	07d4      	lsls	r4, r2, #31
 80040d8:	d408      	bmi.n	80040ec <RCM_RegisterRegConv+0xb4>
  MODIFY_REG(ADCx->CR,
 80040da:	4c3f      	ldr	r4, [pc, #252]	; (80041d8 <RCM_RegisterRegConv+0x1a0>)
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	4022      	ands	r2, r4
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	07d2      	lsls	r2, r2, #31
 80040ea:	d5f7      	bpl.n	80040dc <RCM_RegisterRegConv+0xa4>
      RCM_NoInj_array [handle].enable = false;
 80040ec:	4d3b      	ldr	r5, [pc, #236]	; (80041dc <RCM_RegisterRegConv+0x1a4>)
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80040ee:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80040f0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80040f4:	0056      	lsls	r6, r2, #1
 80040f6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80040fa:	f024 040f 	bic.w	r4, r4, #15
      RCM_NoInj_array [handle].next = handle;
 80040fe:	7150      	strb	r0, [r2, #5]
      RCM_NoInj_array [handle].prev = handle;
 8004100:	7110      	strb	r0, [r2, #4]
      RCM_NoInj_array [handle].enable = false;
 8004102:	2200      	movs	r2, #0
 8004104:	55aa      	strb	r2, [r5, r6]
 8004106:	631c      	str	r4, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8004108:	790c      	ldrb	r4, [r1, #4]
 800410a:	2c09      	cmp	r4, #9
 800410c:	d83f      	bhi.n	800418e <RCM_RegisterRegConv+0x156>
 800410e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8004112:	06a2      	lsls	r2, r4, #26
 8004114:	2501      	movs	r5, #1
 8004116:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 800411a:	fa05 f404 	lsl.w	r4, r5, r4
 800411e:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004120:	0dd4      	lsrs	r4, r2, #23
 8004122:	f004 0404 	and.w	r4, r4, #4
 8004126:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8004128:	688d      	ldr	r5, [r1, #8]
 800412a:	58e1      	ldr	r1, [r4, r3]
 800412c:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004130:	2607      	movs	r6, #7
 8004132:	4096      	lsls	r6, r2
 8004134:	4095      	lsls	r5, r2
 8004136:	ea21 0206 	bic.w	r2, r1, r6
 800413a:	432a      	orrs	r2, r5
 800413c:	50e2      	str	r2, [r4, r3]
}
 800413e:	bc70      	pop	{r4, r5, r6}
 8004140:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004142:	6855      	ldr	r5, [r2, #4]
 8004144:	2d00      	cmp	r5, #0
 8004146:	d039      	beq.n	80041bc <RCM_RegisterRegConv+0x184>
 8004148:	7904      	ldrb	r4, [r0, #4]
  uint8_t i=0;
 800414a:	4618      	mov	r0, r3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800414c:	792b      	ldrb	r3, [r5, #4]
 800414e:	42a3      	cmp	r3, r4
 8004150:	d185      	bne.n	800405e <RCM_RegisterRegConv+0x26>
 8004152:	682d      	ldr	r5, [r5, #0]
 8004154:	680b      	ldr	r3, [r1, #0]
 8004156:	429d      	cmp	r5, r3
 8004158:	d181      	bne.n	800405e <RCM_RegisterRegConv+0x26>
 800415a:	2001      	movs	r0, #1
 800415c:	e79a      	b.n	8004094 <RCM_RegisterRegConv+0x5c>
 800415e:	681d      	ldr	r5, [r3, #0]
 8004160:	680b      	ldr	r3, [r1, #0]
 8004162:	429d      	cmp	r5, r3
 8004164:	d182      	bne.n	800406c <RCM_RegisterRegConv+0x34>
      i++;
 8004166:	2002      	movs	r0, #2
 8004168:	e794      	b.n	8004094 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800416a:	6893      	ldr	r3, [r2, #8]
 800416c:	2001      	movs	r0, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	f47f af79 	bne.w	8004066 <RCM_RegisterRegConv+0x2e>
 8004174:	68d3      	ldr	r3, [r2, #12]
 8004176:	b333      	cbz	r3, 80041c6 <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004178:	791d      	ldrb	r5, [r3, #4]
 800417a:	790c      	ldrb	r4, [r1, #4]
 800417c:	42a5      	cmp	r5, r4
 800417e:	d122      	bne.n	80041c6 <RCM_RegisterRegConv+0x18e>
 8004180:	681c      	ldr	r4, [r3, #0]
 8004182:	680b      	ldr	r3, [r1, #0]
 8004184:	429c      	cmp	r4, r3
 8004186:	f47f af79 	bne.w	800407c <RCM_RegisterRegConv+0x44>
      i++;
 800418a:	2003      	movs	r0, #3
 800418c:	e782      	b.n	8004094 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800418e:	2503      	movs	r5, #3
 8004190:	f06f 061d 	mvn.w	r6, #29
 8004194:	2201      	movs	r2, #1
 8004196:	fb15 6504 	smlabb	r5, r5, r4, r6
 800419a:	40a2      	lsls	r2, r4
 800419c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 80041a0:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 80041a4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80041a8:	e7ba      	b.n	8004120 <RCM_RegisterRegConv+0xe8>
      i++;
 80041aa:	2805      	cmp	r0, #5
 80041ac:	bf34      	ite	cc
 80041ae:	2000      	movcc	r0, #0
 80041b0:	2002      	movcs	r0, #2
 80041b2:	e7df      	b.n	8004174 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80041b4:	2804      	cmp	r0, #4
 80041b6:	680b      	ldr	r3, [r1, #0]
 80041b8:	d8e7      	bhi.n	800418a <RCM_RegisterRegConv+0x152>
 80041ba:	e76b      	b.n	8004094 <RCM_RegisterRegConv+0x5c>
 80041bc:	6893      	ldr	r3, [r2, #8]
 80041be:	b123      	cbz	r3, 80041ca <RCM_RegisterRegConv+0x192>
 80041c0:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 80041c2:	4628      	mov	r0, r5
 80041c4:	e74f      	b.n	8004066 <RCM_RegisterRegConv+0x2e>
 80041c6:	680b      	ldr	r3, [r1, #0]
 80041c8:	e764      	b.n	8004094 <RCM_RegisterRegConv+0x5c>
 80041ca:	4618      	mov	r0, r3
 80041cc:	e7d2      	b.n	8004174 <RCM_RegisterRegConv+0x13c>
 80041ce:	bf00      	nop
 80041d0:	20001ec8 	.word	0x20001ec8
 80041d4:	20001ea4 	.word	0x20001ea4
 80041d8:	7fffffc0 	.word	0x7fffffc0
 80041dc:	20001e8c 	.word	0x20001e8c

080041e0 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 80041e0:	4b5c      	ldr	r3, [pc, #368]	; (8004354 <RCM_ExecRegularConv+0x174>)
 80041e2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 80041e6:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_NoInj_array [handle].enable == false)
 80041e8:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80041ec:	0044      	lsls	r4, r0, #1
 80041ee:	2a00      	cmp	r2, #0
 80041f0:	d136      	bne.n	8004260 <RCM_ExecRegularConv+0x80>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 80041f2:	7819      	ldrb	r1, [r3, #0]
 80041f4:	2900      	cmp	r1, #0
 80041f6:	d179      	bne.n	80042ec <RCM_ExecRegularConv+0x10c>
 80041f8:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 80041fa:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 80041fc:	2900      	cmp	r1, #0
 80041fe:	d07b      	beq.n	80042f8 <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array [i].next > handle)
 8004200:	7ade      	ldrb	r6, [r3, #11]
 8004202:	42b0      	cmp	r0, r6
 8004204:	f0c0 8098 	bcc.w	8004338 <RCM_ExecRegularConv+0x158>
      if (RCM_NoInj_array [i].enable == true)
 8004208:	7b1a      	ldrb	r2, [r3, #12]
 800420a:	2a00      	cmp	r2, #0
 800420c:	f000 8097 	beq.w	800433e <RCM_ExecRegularConv+0x15e>
        if (RCM_NoInj_array [i].next > handle)
 8004210:	7c5e      	ldrb	r6, [r3, #17]
 8004212:	42b0      	cmp	r0, r6
 8004214:	d305      	bcc.n	8004222 <RCM_ExecRegularConv+0x42>
      if (RCM_NoInj_array [i].enable == true)
 8004216:	7c9a      	ldrb	r2, [r3, #18]
 8004218:	2a00      	cmp	r2, #0
 800421a:	f040 8094 	bne.w	8004346 <RCM_ExecRegularConv+0x166>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 800421e:	2202      	movs	r2, #2
 8004220:	e071      	b.n	8004306 <RCM_ExecRegularConv+0x126>
 8004222:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 8004224:	4611      	mov	r1, r2
          RCM_NoInj_array [i].next = handle;
 8004226:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 800422a:	1821      	adds	r1, r4, r0
 800422c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8004230:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 8004234:	714e      	strb	r6, [r1, #5]
          RCM_NoInj_array [handle].prev = i;
 8004236:	4e48      	ldr	r6, [pc, #288]	; (8004358 <RCM_ExecRegularConv+0x178>)
 8004238:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array [i].next = handle;
 800423a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 800423e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8004242:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array [i].next = handle;
 8004244:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 8004246:	7138      	strb	r0, [r7, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 8004248:	1821      	adds	r1, r4, r0
 800424a:	2501      	movs	r5, #1
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800424c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 8004250:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8004254:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004258:	7852      	ldrb	r2, [r2, #1]
 800425a:	42aa      	cmp	r2, r5
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 800425c:	bf18      	it	ne
 800425e:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8004260:	4a3e      	ldr	r2, [pc, #248]	; (800435c <RCM_ExecRegularConv+0x17c>)
 8004262:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8004266:	bb8a      	cbnz	r2, 80042cc <RCM_ExecRegularConv+0xec>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8004268:	4a3d      	ldr	r2, [pc, #244]	; (8004360 <RCM_ExecRegularConv+0x180>)
 800426a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800426e:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8004270:	6811      	ldr	r1, [r2, #0]
 8004272:	2d09      	cmp	r5, #9
 8004274:	d930      	bls.n	80042d8 <RCM_ExecRegularConv+0xf8>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8004276:	2603      	movs	r6, #3
 8004278:	f06f 071d 	mvn.w	r7, #29
 800427c:	2201      	movs	r2, #1
 800427e:	fb16 7605 	smlabb	r6, r6, r5, r7
 8004282:	40aa      	lsls	r2, r5
 8004284:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 8004288:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800428c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8004290:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8004292:	0d12      	lsrs	r2, r2, #20
 8004294:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8004298:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 800429c:	432a      	orrs	r2, r5
 800429e:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80042a0:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80042a2:	688a      	ldr	r2, [r1, #8]
 80042a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042a8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80042ac:	f042 0204 	orr.w	r2, r2, #4
 80042b0:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80042b2:	680a      	ldr	r2, [r1, #0]
 80042b4:	0752      	lsls	r2, r2, #29
 80042b6:	d5fc      	bpl.n	80042b2 <RCM_ExecRegularConv+0xd2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 80042b8:	1822      	adds	r2, r4, r0
 80042ba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80042be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042c0:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 80042c2:	4d25      	ldr	r5, [pc, #148]	; (8004358 <RCM_ExecRegularConv+0x178>)
    RCM_NoInj_array [handle].status = valid;
 80042c4:	2102      	movs	r1, #2
 80042c6:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 80042c8:	7952      	ldrb	r2, [r2, #5]
 80042ca:	702a      	strb	r2, [r5, #0]
  }
  retVal = RCM_NoInj_array [handle].value;
 80042cc:	4420      	add	r0, r4
 80042ce:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 80042d2:	bcf0      	pop	{r4, r5, r6, r7}
 80042d4:	8858      	ldrh	r0, [r3, #2]
 80042d6:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80042d8:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80042dc:	06aa      	lsls	r2, r5, #26
 80042de:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80042e0:	ea42 5207 	orr.w	r2, r2, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80042e4:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80042e8:	432a      	orrs	r2, r5
 80042ea:	e7d1      	b.n	8004290 <RCM_ExecRegularConv+0xb0>
        if (RCM_NoInj_array [i].next > handle)
 80042ec:	795e      	ldrb	r6, [r3, #5]
 80042ee:	4286      	cmp	r6, r0
 80042f0:	d898      	bhi.n	8004224 <RCM_ExecRegularConv+0x44>
      if (RCM_NoInj_array [i].enable == true)
 80042f2:	7999      	ldrb	r1, [r3, #6]
 80042f4:	2900      	cmp	r1, #0
 80042f6:	d183      	bne.n	8004200 <RCM_ExecRegularConv+0x20>
 80042f8:	7b19      	ldrb	r1, [r3, #12]
 80042fa:	2900      	cmp	r1, #0
 80042fc:	d188      	bne.n	8004210 <RCM_ExecRegularConv+0x30>
 80042fe:	7c99      	ldrb	r1, [r3, #18]
 8004300:	bb09      	cbnz	r1, 8004346 <RCM_ExecRegularConv+0x166>
       if (LastEnable != RCM_MAX_CONV )
 8004302:	2a04      	cmp	r2, #4
 8004304:	d014      	beq.n	8004330 <RCM_ExecRegularConv+0x150>
         formerNext = RCM_NoInj_array [LastEnable].next;
 8004306:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800430a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 800430e:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 8004310:	f895 c005 	ldrb.w	ip, [r5, #5]
         RCM_NoInj_array [handle].next = formerNext;
 8004314:	4e10      	ldr	r6, [pc, #64]	; (8004358 <RCM_ExecRegularConv+0x178>)
         RCM_NoInj_array [formerNext].prev = handle;
 8004316:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 800431a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 800431e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8004322:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array [handle].next = formerNext;
 8004324:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 8004328:	7832      	ldrb	r2, [r6, #0]
 800432a:	7168      	strb	r0, [r5, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 800432c:	7138      	strb	r0, [r7, #4]
    while (i < RCM_MAX_CONV)
 800432e:	e78b      	b.n	8004248 <RCM_ExecRegularConv+0x68>
         RCM_currentHandle = handle;
 8004330:	4e09      	ldr	r6, [pc, #36]	; (8004358 <RCM_ExecRegularConv+0x178>)
 8004332:	4602      	mov	r2, r0
 8004334:	7030      	strb	r0, [r6, #0]
    while (i < RCM_MAX_CONV)
 8004336:	e787      	b.n	8004248 <RCM_ExecRegularConv+0x68>
      i++;
 8004338:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 800433a:	4611      	mov	r1, r2
 800433c:	e773      	b.n	8004226 <RCM_ExecRegularConv+0x46>
 800433e:	7c9a      	ldrb	r2, [r3, #18]
 8004340:	b90a      	cbnz	r2, 8004346 <RCM_ExecRegularConv+0x166>
      i++;
 8004342:	2201      	movs	r2, #1
 8004344:	e7df      	b.n	8004306 <RCM_ExecRegularConv+0x126>
        if (RCM_NoInj_array [i].next > handle)
 8004346:	7dde      	ldrb	r6, [r3, #23]
 8004348:	4286      	cmp	r6, r0
      i++;
 800434a:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 800434e:	d9da      	bls.n	8004306 <RCM_ExecRegularConv+0x126>
 8004350:	e768      	b.n	8004224 <RCM_ExecRegularConv+0x44>
 8004352:	bf00      	nop
 8004354:	20001e8c 	.word	0x20001e8c
 8004358:	20001e88 	.word	0x20001e88
 800435c:	20000338 	.word	0x20000338
 8004360:	20001ec8 	.word	0x20001ec8

08004364 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8004364:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8004366:	4c12      	ldr	r4, [pc, #72]	; (80043b0 <RCM_ExecUserConv+0x4c>)
 8004368:	7823      	ldrb	r3, [r4, #0]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d000      	beq.n	8004370 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 800436e:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8004370:	4d10      	ldr	r5, [pc, #64]	; (80043b4 <RCM_ExecUserConv+0x50>)
 8004372:	7828      	ldrb	r0, [r5, #0]
 8004374:	f7ff ff34 	bl	80041e0 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8004378:	782b      	ldrb	r3, [r5, #0]
 800437a:	4a0f      	ldr	r2, [pc, #60]	; (80043b8 <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800437c:	490f      	ldr	r1, [pc, #60]	; (80043bc <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800437e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8004382:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8004386:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8004388:	7852      	ldrb	r2, [r2, #1]
 800438a:	b10a      	cbz	r2, 8004390 <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 800438c:	2202      	movs	r2, #2
 800438e:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8004390:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <RCM_ExecUserConv+0x5c>)
 8004392:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8004396:	2d00      	cmp	r5, #0
 8004398:	d0e9      	beq.n	800436e <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800439a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800439e:	2100      	movs	r1, #0
 80043a0:	7021      	strb	r1, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80043a2:	6852      	ldr	r2, [r2, #4]
 80043a4:	4601      	mov	r1, r0
 80043a6:	4618      	mov	r0, r3
 80043a8:	462b      	mov	r3, r5
}
 80043aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80043ae:	4718      	bx	r3
 80043b0:	20001ec4 	.word	0x20001ec4
 80043b4:	20001e89 	.word	0x20001e89
 80043b8:	20001e8c 	.word	0x20001e8c
 80043bc:	20001ed8 	.word	0x20001ed8
 80043c0:	20001ea4 	.word	0x20001ea4

080043c4 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 80043c4:	4b21      	ldr	r3, [pc, #132]	; (800444c <RCM_ExecNextConv+0x88>)
 80043c6:	4822      	ldr	r0, [pc, #136]	; (8004450 <RCM_ExecNextConv+0x8c>)
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80043ce:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80043d2:	b383      	cbz	r3, 8004436 <RCM_ExecNextConv+0x72>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80043d4:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <RCM_ExecNextConv+0x90>)
{
 80043d6:	b4f0      	push	{r4, r5, r6, r7}
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 80043d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043dc:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80043de:	2504      	movs	r5, #4
 80043e0:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80043e2:	791d      	ldrb	r5, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80043e4:	2d09      	cmp	r5, #9
 80043e6:	ea4f 0442 	mov.w	r4, r2, lsl #1
 80043ea:	d925      	bls.n	8004438 <RCM_ExecNextConv+0x74>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80043ec:	2603      	movs	r6, #3
 80043ee:	f06f 071d 	mvn.w	r7, #29
 80043f2:	2301      	movs	r3, #1
 80043f4:	fb16 7605 	smlabb	r6, r6, r5, r7
 80043f8:	40ab      	lsls	r3, r5
 80043fa:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 80043fe:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8004402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8004406:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8004408:	0d1b      	lsrs	r3, r3, #20
 800440a:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 800440e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004412:	432b      	orrs	r3, r5
 8004414:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8004416:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8004418:	688b      	ldr	r3, [r1, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 800441a:	4422      	add	r2, r4
 800441c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004420:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8004424:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004428:	f043 0304 	orr.w	r3, r3, #4
 800442c:	2201      	movs	r2, #1
 800442e:	608b      	str	r3, [r1, #8]
 8004430:	7042      	strb	r2, [r0, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8004432:	bcf0      	pop	{r4, r5, r6, r7}
 8004434:	4770      	bx	lr
 8004436:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8004438:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 800443c:	06ab      	lsls	r3, r5, #26
 800443e:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8004440:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8004444:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8004448:	432b      	orrs	r3, r5
 800444a:	e7dc      	b.n	8004406 <RCM_ExecNextConv+0x42>
 800444c:	20001e88 	.word	0x20001e88
 8004450:	20001e8c 	.word	0x20001e8c
 8004454:	20001ec8 	.word	0x20001ec8

08004458 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8004458:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 800445a:	4c0f      	ldr	r4, [pc, #60]	; (8004498 <RCM_ReadOngoingConv+0x40>)
 800445c:	4a0f      	ldr	r2, [pc, #60]	; (800449c <RCM_ReadOngoingConv+0x44>)
 800445e:	7823      	ldrb	r3, [r4, #0]
 8004460:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004464:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004468:	0058      	lsls	r0, r3, #1
 800446a:	784d      	ldrb	r5, [r1, #1]
 800446c:	2d01      	cmp	r5, #1
 800446e:	d006      	beq.n	800447e <RCM_ReadOngoingConv+0x26>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8004470:	4403      	add	r3, r0
 8004472:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004476:	7953      	ldrb	r3, [r2, #5]
 8004478:	7023      	strb	r3, [r4, #0]
}
 800447a:	bc70      	pop	{r4, r5, r6}
 800447c:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 800447e:	4d08      	ldr	r5, [pc, #32]	; (80044a0 <RCM_ReadOngoingConv+0x48>)
 8004480:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8004484:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8004486:	682e      	ldr	r6, [r5, #0]
 8004488:	0776      	lsls	r6, r6, #29
 800448a:	d5f1      	bpl.n	8004470 <RCM_ReadOngoingConv+0x18>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800448c:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 800448e:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8004490:	2502      	movs	r5, #2
 8004492:	704d      	strb	r5, [r1, #1]
 8004494:	e7ec      	b.n	8004470 <RCM_ReadOngoingConv+0x18>
 8004496:	bf00      	nop
 8004498:	20001e88 	.word	0x20001e88
 800449c:	20001e8c 	.word	0x20001e8c
 80044a0:	20001ec8 	.word	0x20001ec8

080044a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <HAL_MspInit+0x3c>)
{
 80044a6:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60
 80044b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80044b2:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b4:	f002 0201 	and.w	r2, r2, #1
 80044b8:	9200      	str	r2, [sp, #0]
 80044ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044c2:	659a      	str	r2, [r3, #88]	; 0x58
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80044cc:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80044d0:	f001 fc42 	bl	8005d58 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044d4:	b003      	add	sp, #12
 80044d6:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80044da:	f002 ba8f 	b.w	80069fc <HAL_PWREx_DisableUCPDDeadBattery>
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000

080044e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044e4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80044e6:	6802      	ldr	r2, [r0, #0]
{
 80044e8:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ea:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80044ec:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80044f4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80044f8:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80044fa:	d021      	beq.n	8004540 <HAL_ADC_MspInit+0x5c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80044fc:	4b33      	ldr	r3, [pc, #204]	; (80045cc <HAL_ADC_MspInit+0xe8>)
 80044fe:	429a      	cmp	r2, r3
 8004500:	d001      	beq.n	8004506 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004502:	b00d      	add	sp, #52	; 0x34
 8004504:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004506:	4a32      	ldr	r2, [pc, #200]	; (80045d0 <HAL_ADC_MspInit+0xec>)
 8004508:	6813      	ldr	r3, [r2, #0]
 800450a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800450c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800450e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004510:	d051      	beq.n	80045b6 <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004512:	4b30      	ldr	r3, [pc, #192]	; (80045d4 <HAL_ADC_MspInit+0xf0>)
 8004514:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	64da      	str	r2, [r3, #76]	; 0x4c
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8004524:	2240      	movs	r2, #64	; 0x40
 8004526:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8004528:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 800452c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8004530:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004534:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004536:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8004538:	f002 f862 	bl	8006600 <HAL_GPIO_Init>
}
 800453c:	b00d      	add	sp, #52	; 0x34
 800453e:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004540:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <HAL_ADC_MspInit+0xec>)
 8004542:	6813      	ldr	r3, [r2, #0]
 8004544:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004546:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004548:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800454a:	d029      	beq.n	80045a0 <HAL_ADC_MspInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800454c:	4b21      	ldr	r3, [pc, #132]	; (80045d4 <HAL_ADC_MspInit+0xf0>)
 800454e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	64da      	str	r2, [r3, #76]	; 0x4c
 8004556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004558:	f002 0201 	and.w	r2, r2, #1
 800455c:	9202      	str	r2, [sp, #8]
 800455e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004562:	f042 0202 	orr.w	r2, r2, #2
 8004566:	64da      	str	r2, [r3, #76]	; 0x4c
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8004570:	2205      	movs	r2, #5
 8004572:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004574:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004576:	a906      	add	r1, sp, #24
 8004578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 800457c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004580:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004584:	f002 f83c 	bl	8006600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8004588:	f244 0202 	movw	r2, #16386	; 0x4002
 800458c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800458e:	4812      	ldr	r0, [pc, #72]	; (80045d8 <HAL_ADC_MspInit+0xf4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004590:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004592:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8004594:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004598:	f002 f832 	bl	8006600 <HAL_GPIO_Init>
}
 800459c:	b00d      	add	sp, #52	; 0x34
 800459e:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 80045a0:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <HAL_ADC_MspInit+0xf0>)
 80045a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80045aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	9b01      	ldr	r3, [sp, #4]
 80045b4:	e7ca      	b.n	800454c <HAL_ADC_MspInit+0x68>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <HAL_ADC_MspInit+0xf0>)
 80045b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045be:	64da      	str	r2, [r3, #76]	; 0x4c
 80045c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045c6:	9304      	str	r3, [sp, #16]
 80045c8:	9b04      	ldr	r3, [sp, #16]
 80045ca:	e7a2      	b.n	8004512 <HAL_ADC_MspInit+0x2e>
 80045cc:	50000100 	.word	0x50000100
 80045d0:	200006dc 	.word	0x200006dc
 80045d4:	40021000 	.word	0x40021000
 80045d8:	48000400 	.word	0x48000400

080045dc <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80045dc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 80045de:	6802      	ldr	r2, [r0, #0]
 80045e0:	4929      	ldr	r1, [pc, #164]	; (8004688 <HAL_COMP_MspInit+0xac>)
{
 80045e2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e4:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 80045e6:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80045ec:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80045f0:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 80045f2:	d007      	beq.n	8004604 <HAL_COMP_MspInit+0x28>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 80045f4:	4925      	ldr	r1, [pc, #148]	; (800468c <HAL_COMP_MspInit+0xb0>)
 80045f6:	428a      	cmp	r2, r1
 80045f8:	d01a      	beq.n	8004630 <HAL_COMP_MspInit+0x54>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 80045fa:	4925      	ldr	r1, [pc, #148]	; (8004690 <HAL_COMP_MspInit+0xb4>)
 80045fc:	428a      	cmp	r2, r1
 80045fe:	d02d      	beq.n	800465c <HAL_COMP_MspInit+0x80>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 8004600:	b00a      	add	sp, #40	; 0x28
 8004602:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004604:	4a23      	ldr	r2, [pc, #140]	; (8004694 <HAL_COMP_MspInit+0xb8>)
 8004606:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004608:	f041 0101 	orr.w	r1, r1, #1
 800460c:	64d1      	str	r1, [r2, #76]	; 0x4c
 800460e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004610:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004612:	f002 0201 	and.w	r2, r2, #1
 8004616:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8004618:	2303      	movs	r3, #3
 800461a:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800461c:	a904      	add	r1, sp, #16
 800461e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8004622:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004626:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8004628:	f001 ffea 	bl	8006600 <HAL_GPIO_Init>
}
 800462c:	b00a      	add	sp, #40	; 0x28
 800462e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004630:	4a18      	ldr	r2, [pc, #96]	; (8004694 <HAL_COMP_MspInit+0xb8>)
 8004632:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004634:	f041 0101 	orr.w	r1, r1, #1
 8004638:	64d1      	str	r1, [r2, #76]	; 0x4c
 800463a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800463e:	f002 0201 	and.w	r2, r2, #1
 8004642:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8004644:	2303      	movs	r3, #3
 8004646:	2280      	movs	r2, #128	; 0x80
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8004648:	a904      	add	r1, sp, #16
 800464a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 800464e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004652:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8004654:	f001 ffd4 	bl	8006600 <HAL_GPIO_Init>
}
 8004658:	b00a      	add	sp, #40	; 0x28
 800465a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800465c:	4a0d      	ldr	r2, [pc, #52]	; (8004694 <HAL_COMP_MspInit+0xb8>)
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800465e:	480e      	ldr	r0, [pc, #56]	; (8004698 <HAL_COMP_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004660:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004662:	f041 0102 	orr.w	r1, r1, #2
 8004666:	64d1      	str	r1, [r2, #76]	; 0x4c
 8004668:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466a:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800466c:	f002 0202 	and.w	r2, r2, #2
 8004670:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8004672:	2303      	movs	r3, #3
 8004674:	2201      	movs	r2, #1
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8004676:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8004678:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800467c:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800467e:	f001 ffbf 	bl	8006600 <HAL_GPIO_Init>
}
 8004682:	b00a      	add	sp, #40	; 0x28
 8004684:	bd10      	pop	{r4, pc}
 8004686:	bf00      	nop
 8004688:	40010200 	.word	0x40010200
 800468c:	40010204 	.word	0x40010204
 8004690:	4001020c 	.word	0x4001020c
 8004694:	40021000 	.word	0x40021000
 8004698:	48000400 	.word	0x48000400

0800469c <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <HAL_CORDIC_MspInit+0x2c>)
 800469e:	6802      	ldr	r2, [r0, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d000      	beq.n	80046a6 <HAL_CORDIC_MspInit+0xa>
 80046a4:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80046a6:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80046aa:	f042 0208 	orr.w	r2, r2, #8
 80046ae:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 80046b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 80046b6:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80046b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80046c2:	b002      	add	sp, #8
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40020c00 	.word	0x40020c00

080046cc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80046cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hfdcan->Instance==FDCAN1)
 80046ce:	6802      	ldr	r2, [r0, #0]
 80046d0:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <HAL_FDCAN_MspInit+0xb4>)
{
 80046d2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d4:	2400      	movs	r4, #0
  if(hfdcan->Instance==FDCAN1)
 80046d6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80046dc:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80046e0:	9408      	str	r4, [sp, #32]
  if(hfdcan->Instance==FDCAN1)
 80046e2:	d001      	beq.n	80046e8 <HAL_FDCAN_MspInit+0x1c>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80046e4:	b00b      	add	sp, #44	; 0x2c
 80046e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80046e8:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80046ec:	2600      	movs	r6, #0
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80046ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046f0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80046f4:	659a      	str	r2, [r3, #88]	; 0x58
 80046f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046f8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80046fc:	9201      	str	r2, [sp, #4]
 80046fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	64da      	str	r2, [r3, #76]	; 0x4c
 8004708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800470a:	f002 0201 	and.w	r2, r2, #1
 800470e:	9202      	str	r2, [sp, #8]
 8004710:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004714:	f042 0202 	orr.w	r2, r2, #2
 8004718:	64da      	str	r2, [r3, #76]	; 0x4c
 800471a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	9303      	str	r3, [sp, #12]
 8004722:	9803      	ldr	r0, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004728:	2302      	movs	r3, #2
 800472a:	2700      	movs	r7, #0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800472c:	2509      	movs	r5, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800472e:	a904      	add	r1, sp, #16
 8004730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004734:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004738:	e9cd 6706 	strd	r6, r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800473c:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473e:	f001 ff5f 	bl	8006600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004742:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004744:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004746:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800474a:	480e      	ldr	r0, [pc, #56]	; (8004784 <HAL_FDCAN_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800474c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800474e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004752:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004756:	f001 ff53 	bl	8006600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800475a:	4622      	mov	r2, r4
 800475c:	4621      	mov	r1, r4
 800475e:	2015      	movs	r0, #21
 8004760:	f001 fb0e 	bl	8005d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004764:	2015      	movs	r0, #21
 8004766:	f001 fb43 	bl	8005df0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800476a:	4622      	mov	r2, r4
 800476c:	4621      	mov	r1, r4
 800476e:	2016      	movs	r0, #22
 8004770:	f001 fb06 	bl	8005d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004774:	2016      	movs	r0, #22
 8004776:	f001 fb3b 	bl	8005df0 <HAL_NVIC_EnableIRQ>
}
 800477a:	b00b      	add	sp, #44	; 0x2c
 800477c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800477e:	bf00      	nop
 8004780:	40006400 	.word	0x40006400
 8004784:	48000400 	.word	0x48000400

08004788 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004788:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 800478a:	6802      	ldr	r2, [r0, #0]
 800478c:	4929      	ldr	r1, [pc, #164]	; (8004834 <HAL_OPAMP_MspInit+0xac>)
{
 800478e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004790:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 8004792:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004794:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004798:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800479c:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 800479e:	d007      	beq.n	80047b0 <HAL_OPAMP_MspInit+0x28>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 80047a0:	4925      	ldr	r1, [pc, #148]	; (8004838 <HAL_OPAMP_MspInit+0xb0>)
 80047a2:	428a      	cmp	r2, r1
 80047a4:	d01a      	beq.n	80047dc <HAL_OPAMP_MspInit+0x54>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 80047a6:	4925      	ldr	r1, [pc, #148]	; (800483c <HAL_OPAMP_MspInit+0xb4>)
 80047a8:	428a      	cmp	r2, r1
 80047aa:	d02d      	beq.n	8004808 <HAL_OPAMP_MspInit+0x80>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 80047ac:	b00a      	add	sp, #40	; 0x28
 80047ae:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b0:	4a23      	ldr	r2, [pc, #140]	; (8004840 <HAL_OPAMP_MspInit+0xb8>)
 80047b2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80047b4:	f041 0101 	orr.w	r1, r1, #1
 80047b8:	64d1      	str	r1, [r2, #76]	; 0x4c
 80047ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047bc:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047be:	f002 0201 	and.w	r2, r2, #1
 80047c2:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 80047c4:	2303      	movs	r3, #3
 80047c6:	220e      	movs	r2, #14
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c8:	a904      	add	r1, sp, #16
 80047ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 80047ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d2:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d4:	f001 ff14 	bl	8006600 <HAL_GPIO_Init>
}
 80047d8:	b00a      	add	sp, #40	; 0x28
 80047da:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047dc:	4a18      	ldr	r2, [pc, #96]	; (8004840 <HAL_OPAMP_MspInit+0xb8>)
 80047de:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80047e0:	f041 0101 	orr.w	r1, r1, #1
 80047e4:	64d1      	str	r1, [r2, #76]	; 0x4c
 80047e6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ea:	f002 0201 	and.w	r2, r2, #1
 80047ee:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80047f0:	2303      	movs	r3, #3
 80047f2:	22e0      	movs	r2, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f4:	a904      	add	r1, sp, #16
 80047f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80047fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047fe:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004800:	f001 fefe 	bl	8006600 <HAL_GPIO_Init>
}
 8004804:	b00a      	add	sp, #40	; 0x28
 8004806:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004808:	4a0d      	ldr	r2, [pc, #52]	; (8004840 <HAL_OPAMP_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800480a:	480e      	ldr	r0, [pc, #56]	; (8004844 <HAL_OPAMP_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800480c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800480e:	f041 0102 	orr.w	r1, r1, #2
 8004812:	64d1      	str	r1, [r2, #76]	; 0x4c
 8004814:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004816:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004818:	f002 0202 	and.w	r2, r2, #2
 800481c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 800481e:	2303      	movs	r3, #3
 8004820:	2207      	movs	r2, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004822:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8004824:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004828:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800482a:	f001 fee9 	bl	8006600 <HAL_GPIO_Init>
}
 800482e:	b00a      	add	sp, #40	; 0x28
 8004830:	bd10      	pop	{r4, pc}
 8004832:	bf00      	nop
 8004834:	40010300 	.word	0x40010300
 8004838:	40010304 	.word	0x40010304
 800483c:	40010308 	.word	0x40010308
 8004840:	40021000 	.word	0x40021000
 8004844:	48000400 	.word	0x48000400

08004848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004848:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 800484a:	4a23      	ldr	r2, [pc, #140]	; (80048d8 <HAL_TIM_Base_MspInit+0x90>)
 800484c:	6803      	ldr	r3, [r0, #0]
 800484e:	4293      	cmp	r3, r2
{
 8004850:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8004852:	d008      	beq.n	8004866 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d027      	beq.n	80048aa <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800485a:	4a20      	ldr	r2, [pc, #128]	; (80048dc <HAL_TIM_Base_MspInit+0x94>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00f      	beq.n	8004880 <HAL_TIM_Base_MspInit+0x38>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004860:	b005      	add	sp, #20
 8004862:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004866:	4b1e      	ldr	r3, [pc, #120]	; (80048e0 <HAL_TIM_Base_MspInit+0x98>)
 8004868:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800486a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800486e:	661a      	str	r2, [r3, #96]	; 0x60
 8004870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	9b01      	ldr	r3, [sp, #4]
}
 800487a:	b005      	add	sp, #20
 800487c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004880:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <HAL_TIM_Base_MspInit+0x98>)
 8004882:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004884:	f042 0202 	orr.w	r2, r2, #2
 8004888:	659a      	str	r2, [r3, #88]	; 0x58
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800488c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004894:	4611      	mov	r1, r2
 8004896:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004898:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800489a:	f001 fa71 	bl	8005d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800489e:	201d      	movs	r0, #29
}
 80048a0:	b005      	add	sp, #20
 80048a2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048a6:	f001 baa3 	b.w	8005df0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80048ae:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	659a      	str	r2, [r3, #88]	; 0x58
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80048ba:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80048c2:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048c4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80048c6:	f001 fa5b 	bl	8005d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048ca:	201c      	movs	r0, #28
}
 80048cc:	b005      	add	sp, #20
 80048ce:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048d2:	f001 ba8d 	b.w	8005df0 <HAL_NVIC_EnableIRQ>
 80048d6:	bf00      	nop
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40021000 	.word	0x40021000

080048e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80048e4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 80048e6:	6801      	ldr	r1, [r0, #0]
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <HAL_TIM_Encoder_MspInit+0x68>)
{
 80048ea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ec:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 80048ee:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80048f4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80048f8:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 80048fa:	d001      	beq.n	8004900 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80048fc:	b009      	add	sp, #36	; 0x24
 80048fe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004900:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004904:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004908:	4811      	ldr	r0, [pc, #68]	; (8004950 <HAL_TIM_Encoder_MspInit+0x6c>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 800490a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800490c:	f042 0204 	orr.w	r2, r2, #4
 8004910:	659a      	str	r2, [r3, #88]	; 0x58
 8004912:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004914:	f002 0204 	and.w	r2, r2, #4
 8004918:	9200      	str	r2, [sp, #0]
 800491a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800491c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800491e:	f042 0202 	orr.w	r2, r2, #2
 8004922:	64da      	str	r2, [r3, #76]	; 0x4c
 8004924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800492c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800492e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004930:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004932:	2200      	movs	r2, #0
 8004934:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004936:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004938:	24c0      	movs	r4, #192	; 0xc0
 800493a:	2502      	movs	r5, #2
 800493c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004940:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004944:	f001 fe5c 	bl	8006600 <HAL_GPIO_Init>
}
 8004948:	b009      	add	sp, #36	; 0x24
 800494a:	bd30      	pop	{r4, r5, pc}
 800494c:	40000800 	.word	0x40000800
 8004950:	48000400 	.word	0x48000400

08004954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004954:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8004956:	6801      	ldr	r1, [r0, #0]
 8004958:	4a2a      	ldr	r2, [pc, #168]	; (8004a04 <HAL_TIM_MspPostInit+0xb0>)
{
 800495a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800495e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004960:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004964:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004968:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 800496a:	d001      	beq.n	8004970 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800496c:	b00b      	add	sp, #44	; 0x2c
 800496e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004974:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004978:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800497a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 800497c:	4822      	ldr	r0, [pc, #136]	; (8004a08 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800497e:	f042 0204 	orr.w	r2, r2, #4
 8004982:	64da      	str	r2, [r3, #76]	; 0x4c
 8004984:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004986:	f002 0204 	and.w	r2, r2, #4
 800498a:	9201      	str	r2, [sp, #4]
 800498c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004990:	f042 0202 	orr.w	r2, r2, #2
 8004994:	64da      	str	r2, [r3, #76]	; 0x4c
 8004996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004998:	f002 0202 	and.w	r2, r2, #2
 800499c:	9202      	str	r2, [sp, #8]
 800499e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80049a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80049b0:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049b2:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80049b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049b8:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80049ba:	2604      	movs	r6, #4
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80049bc:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80049be:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80049c2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80049c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80049c8:	f001 fe1a 	bl	8006600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80049cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80049d0:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80049d2:	a904      	add	r1, sp, #16
 80049d4:	480d      	ldr	r0, [pc, #52]	; (8004a0c <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80049d6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80049d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80049e0:	f44f 56b8 	mov.w	r6, #5888	; 0x1700
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80049e4:	f001 fe0c 	bl	8006600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80049e8:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80049ea:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ec:	a904      	add	r1, sp, #16
 80049ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80049f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80049f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80049fa:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049fc:	f001 fe00 	bl	8006600 <HAL_GPIO_Init>
}
 8004a00:	b00b      	add	sp, #44	; 0x2c
 8004a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	48000800 	.word	0x48000800
 8004a0c:	48000400 	.word	0x48000400

08004a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a10:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8004a12:	6802      	ldr	r2, [r0, #0]
 8004a14:	4b2f      	ldr	r3, [pc, #188]	; (8004ad4 <HAL_UART_MspInit+0xc4>)
{
 8004a16:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8004a1a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a1c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004a20:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004a24:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 8004a26:	d001      	beq.n	8004a2c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004a28:	b008      	add	sp, #32
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a2c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    hdma_usart2_rx.Instance = DMA2_Channel2;
 8004a30:	4e29      	ldr	r6, [pc, #164]	; (8004ad8 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004a38:	659a      	str	r2, [r3, #88]	; 0x58
 8004a3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a3c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004a40:	9200      	str	r2, [sp, #0]
 8004a42:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a46:	f042 0202 	orr.w	r2, r2, #2
 8004a4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004a54:	2218      	movs	r2, #24
 8004a56:	2302      	movs	r3, #2
 8004a58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a64:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a66:	2307      	movs	r3, #7
 8004a68:	4605      	mov	r5, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a6a:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a6c:	481b      	ldr	r0, [pc, #108]	; (8004adc <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a6e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a70:	f001 fdc6 	bl	8006600 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel2;
 8004a74:	491a      	ldr	r1, [pc, #104]	; (8004ae0 <HAL_UART_MspInit+0xd0>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a76:	60b4      	str	r4, [r6, #8]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004a78:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a7a:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004a7c:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a7e:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a82:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004a86:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a8a:	60f4      	str	r4, [r6, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a8c:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004a8e:	f001 f9dd 	bl	8005e4c <HAL_DMA_Init>
 8004a92:	b9c0      	cbnz	r0, 8004ac6 <HAL_UART_MspInit+0xb6>
    hdma_usart2_tx.Instance = DMA2_Channel3;
 8004a94:	4c13      	ldr	r4, [pc, #76]	; (8004ae4 <HAL_UART_MspInit+0xd4>)
 8004a96:	4814      	ldr	r0, [pc, #80]	; (8004ae8 <HAL_UART_MspInit+0xd8>)
 8004a98:	6020      	str	r0, [r4, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004a9a:	231b      	movs	r3, #27
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a9c:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a9e:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004aa0:	6063      	str	r3, [r4, #4]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004aa2:	67ee      	str	r6, [r5, #124]	; 0x7c
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aa4:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004aa6:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aa8:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004aac:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ab0:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004ab4:	62b5      	str	r5, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ab6:	60a1      	str	r1, [r4, #8]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004ab8:	f001 f9c8 	bl	8005e4c <HAL_DMA_Init>
 8004abc:	b930      	cbnz	r0, 8004acc <HAL_UART_MspInit+0xbc>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004abe:	67ac      	str	r4, [r5, #120]	; 0x78
 8004ac0:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8004ac2:	b008      	add	sp, #32
 8004ac4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004ac6:	f7fc fe4f 	bl	8001768 <Error_Handler>
 8004aca:	e7e3      	b.n	8004a94 <HAL_UART_MspInit+0x84>
      Error_Handler();
 8004acc:	f7fc fe4c 	bl	8001768 <Error_Handler>
 8004ad0:	e7f5      	b.n	8004abe <HAL_UART_MspInit+0xae>
 8004ad2:	bf00      	nop
 8004ad4:	40004400 	.word	0x40004400
 8004ad8:	200006e4 	.word	0x200006e4
 8004adc:	48000400 	.word	0x48000400
 8004ae0:	4002041c 	.word	0x4002041c
 8004ae4:	200009b0 	.word	0x200009b0
 8004ae8:	40020430 	.word	0x40020430

08004aec <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004aec:	4801      	ldr	r0, [pc, #4]	; (8004af4 <FDCAN1_IT0_IRQHandler+0x8>)
 8004aee:	f001 bcbf 	b.w	8006470 <HAL_FDCAN_IRQHandler>
 8004af2:	bf00      	nop
 8004af4:	20000a40 	.word	0x20000a40

08004af8 <FDCAN1_IT1_IRQHandler>:
 8004af8:	4801      	ldr	r0, [pc, #4]	; (8004b00 <FDCAN1_IT1_IRQHandler+0x8>)
 8004afa:	f001 bcb9 	b.w	8006470 <HAL_FDCAN_IRQHandler>
 8004afe:	bf00      	nop
 8004b00:	20000a40 	.word	0x20000a40

08004b04 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b04:	4801      	ldr	r0, [pc, #4]	; (8004b0c <TIM2_IRQHandler+0x8>)
 8004b06:	f003 b8a9 	b.w	8007c5c <HAL_TIM_IRQHandler>
 8004b0a:	bf00      	nop
 8004b0c:	20000b14 	.word	0x20000b14

08004b10 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004b10:	4801      	ldr	r0, [pc, #4]	; (8004b18 <TIM3_IRQHandler+0x8>)
 8004b12:	f003 b8a3 	b.w	8007c5c <HAL_TIM_IRQHandler>
 8004b16:	bf00      	nop
 8004b18:	20000898 	.word	0x20000898

08004b1c <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8004b1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b20:	2240      	movs	r2, #64	; 0x40
 8004b22:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  TSK_HighFrequencyTask();
 8004b24:	f7fd bf96 	b.w	8002a54 <TSK_HighFrequencyTask>

08004b28 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004b28:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004b2a:	4804      	ldr	r0, [pc, #16]	; (8004b3c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004b2c:	f06f 0201 	mvn.w	r2, #1
 8004b30:	611a      	str	r2, [r3, #16]
 8004b32:	f005 b9c5 	b.w	8009ec0 <R3_2_TIMx_UP_IRQHandler>
 8004b36:	bf00      	nop
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	20000338 	.word	0x20000338

08004b40 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8004b40:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	0611      	lsls	r1, r2, #24
 8004b48:	d505      	bpl.n	8004b56 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004b4a:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8004b4e:	480a      	ldr	r0, [pc, #40]	; (8004b78 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004b50:	611a      	str	r2, [r3, #16]
 8004b52:	f005 fa19 	bl	8009f88 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8004b56:	4b07      	ldr	r3, [pc, #28]	; (8004b74 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	05d2      	lsls	r2, r2, #23
 8004b5c:	d505      	bpl.n	8004b6a <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8004b5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8004b62:	4805      	ldr	r0, [pc, #20]	; (8004b78 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004b64:	611a      	str	r2, [r3, #16]
 8004b66:	f005 f9ed 	bl	8009f44 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8004b6e:	f7fd bf29 	b.w	80029c4 <MC_Scheduler>
 8004b72:	bf00      	nop
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	20000338 	.word	0x20000338

08004b7c <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8004b7c:	4806      	ldr	r0, [pc, #24]	; (8004b98 <TIM4_IRQHandler+0x1c>)
 8004b7e:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	07d1      	lsls	r1, r2, #31
 8004b84:	d502      	bpl.n	8004b8c <TIM4_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	07d2      	lsls	r2, r2, #31
 8004b8a:	d400      	bmi.n	8004b8e <TIM4_IRQHandler+0x12>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8004b8c:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004b8e:	f06f 0201 	mvn.w	r2, #1
 8004b92:	611a      	str	r2, [r3, #16]
    ENC_IRQHandler(&ENCODER_M1);
 8004b94:	f004 b87c 	b.w	8008c90 <ENC_IRQHandler>
 8004b98:	200000dc 	.word	0x200000dc

08004b9c <DMA2_Channel2_IRQHandler>:
  WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL);
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <DMA2_Channel2_IRQHandler+0x14>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	0692      	lsls	r2, r2, #26
 8004ba2:	d400      	bmi.n	8004ba6 <DMA2_Channel2_IRQHandler+0xa>
  }
  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

}
 8004ba4:	4770      	bx	lr
  WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004ba6:	2220      	movs	r2, #32
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8004ba8:	4802      	ldr	r0, [pc, #8]	; (8004bb4 <DMA2_Channel2_IRQHandler+0x18>)
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	f7fc bada 	b.w	8001164 <ASPEP_HWDataReceivedIT>
 8004bb0:	40020400 	.word	0x40020400
 8004bb4:	20000620 	.word	0x20000620

08004bb8 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8004bb8:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <USART2_IRQHandler+0x98>)
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	0650      	lsls	r0, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USARTA_IRQHandler(void)
{
 8004bbe:	b510      	push	{r4, lr}
 8004bc0:	d509      	bpl.n	8004bd6 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004bc2:	4924      	ldr	r1, [pc, #144]	; (8004c54 <USART2_IRQHandler+0x9c>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8004bc4:	4824      	ldr	r0, [pc, #144]	; (8004c58 <USART2_IRQHandler+0xa0>)
 8004bc6:	680a      	ldr	r2, [r1, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004bc8:	2440      	movs	r4, #64	; 0x40
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	600a      	str	r2, [r1, #0]
 8004bd0:	621c      	str	r4, [r3, #32]
 8004bd2:	f7fc f95b 	bl	8000e8c <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	; (8004c50 <USART2_IRQHandler+0x98>)
 8004bd8:	69da      	ldr	r2, [r3, #28]
 8004bda:	0711      	lsls	r1, r2, #28
 8004bdc:	d402      	bmi.n	8004be4 <USART2_IRQHandler+0x2c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	0792      	lsls	r2, r2, #30
 8004be2:	d52c      	bpl.n	8004c3e <USART2_IRQHandler+0x86>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8004be4:	4b1a      	ldr	r3, [pc, #104]	; (8004c50 <USART2_IRQHandler+0x98>)
 8004be6:	689a      	ldr	r2, [r3, #8]
   // LL_GPIO_ResetOutputPin( GPIOC , LL_GPIO_PIN_6  );
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8004be8:	07d0      	lsls	r0, r2, #31
 8004bea:	d41d      	bmi.n	8004c28 <USART2_IRQHandler+0x70>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004bec:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <USART2_IRQHandler+0x98>)
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	06d1      	lsls	r1, r2, #27
 8004bf2:	d518      	bpl.n	8004c26 <USART2_IRQHandler+0x6e>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	06d2      	lsls	r2, r2, #27
 8004bf8:	d515      	bpl.n	8004c26 <USART2_IRQHandler+0x6e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004bfa:	681a      	ldr	r2, [r3, #0]
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    ASPEP_HWDMAReset (&aspepOverUartA);
 8004bfc:	4816      	ldr	r0, [pc, #88]	; (8004c58 <USART2_IRQHandler+0xa0>)
 8004bfe:	f022 0210 	bic.w	r2, r2, #16
 8004c02:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	609a      	str	r2, [r3, #8]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c12:	609a      	str	r2, [r3, #8]
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  }

  /* USER CODE BEGIN USARTA_IRQn 1 */

  /* USER CODE END USARTA_IRQn 1 */
}
 8004c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c20:	609a      	str	r2, [r3, #8]
    ASPEP_HWDMAReset (&aspepOverUartA);
 8004c22:	f7fc baef 	b.w	8001204 <ASPEP_HWDMAReset>
}
 8004c26:	bd10      	pop	{r4, pc}
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8004c28:	220e      	movs	r2, #14
 8004c2a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	f022 0201 	bic.w	r2, r2, #1
 8004c32:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	f042 0210 	orr.w	r2, r2, #16
 8004c3a:	601a      	str	r2, [r3, #0]
}
 8004c3c:	e7d6      	b.n	8004bec <USART2_IRQHandler+0x34>
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	075c      	lsls	r4, r3, #29
 8004c42:	d5d3      	bpl.n	8004bec <USART2_IRQHandler+0x34>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8004c44:	4b02      	ldr	r3, [pc, #8]	; (8004c50 <USART2_IRQHandler+0x98>)
 8004c46:	689a      	ldr	r2, [r3, #8]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8004c48:	07d0      	lsls	r0, r2, #31
 8004c4a:	d5cf      	bpl.n	8004bec <USART2_IRQHandler+0x34>
 8004c4c:	e7ec      	b.n	8004c28 <USART2_IRQHandler+0x70>
 8004c4e:	bf00      	nop
 8004c50:	40004400 	.word	0x40004400
 8004c54:	40020430 	.word	0x40020430
 8004c58:	20000620 	.word	0x20000620

08004c5c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004c5c:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8004c5e:	f7fd fff1 	bl	8002c44 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004c62:	e7fe      	b.n	8004c62 <HardFault_Handler+0x6>

08004c64 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004c64:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004c66:	4c0a      	ldr	r4, [pc, #40]	; (8004c90 <SysTick_Handler+0x2c>)
 8004c68:	7823      	ldrb	r3, [r4, #0]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d009      	beq.n	8004c82 <SysTick_Handler+0x1e>
 8004c6e:	3301      	adds	r3, #1
 8004c70:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8004c72:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8004c74:	f7fd ffda 	bl	8002c2c <MC_RunMotorControlTasks>
    TC_IncTick(&PosCtrlM1);

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8004c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TC_IncTick(&PosCtrlM1);
 8004c7c:	4805      	ldr	r0, [pc, #20]	; (8004c94 <SysTick_Handler+0x30>)
 8004c7e:	f005 bf5d 	b.w	800ab3c <TC_IncTick>
    HAL_IncTick();
 8004c82:	f000 f8bf 	bl	8004e04 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8004c86:	f001 f8dd 	bl	8005e44 <HAL_SYSTICK_IRQHandler>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e7f1      	b.n	8004c72 <SysTick_Handler+0xe>
 8004c8e:	bf00      	nop
 8004c90:	2000069c 	.word	0x2000069c
 8004c94:	200003c8 	.word	0x200003c8

08004c98 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004c98:	4b04      	ldr	r3, [pc, #16]	; (8004cac <EXTI15_10_IRQHandler+0x14>)
 8004c9a:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC10.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10) )
 8004c9c:	0552      	lsls	r2, r2, #21
 8004c9e:	d400      	bmi.n	8004ca2 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    UI_HandleStartStopButton_cb ();
  }

}
 8004ca0:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ca6:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8004ca8:	f7fd bfdc 	b.w	8002c64 <UI_HandleStartStopButton_cb>
 8004cac:	40010400 	.word	0x40010400

08004cb0 <UASPEP_INIT>:
}

void UASPEP_DAMCONFIG_TX (UASPEP_Handle_t *pHandle)
{
/* Enable DMA UART */
 LL_USART_ClearFlag_TC (pHandle->USARTx);
 8004cb0:	6803      	ldr	r3, [r0, #0]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004cb2:	f8d0 c00c 	ldr.w	ip, [r0, #12]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004cb6:	2140      	movs	r1, #64	; 0x40
{
 8004cb8:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004cba:	6906      	ldr	r6, [r0, #16]
 8004cbc:	6219      	str	r1, [r3, #32]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4c11      	ldr	r4, [pc, #68]	; (8004d08 <UASPEP_INIT+0x58>)
 8004cc2:	6885      	ldr	r5, [r0, #8]
 8004cc4:	5da7      	ldrb	r7, [r4, r6]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004cc6:	f814 400c 	ldrb.w	r4, [r4, ip]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004cce:	689e      	ldr	r6, [r3, #8]
 8004cd0:	6842      	ldr	r2, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004cd2:	19e8      	adds	r0, r5, r7
 8004cd4:	f046 0580 	orr.w	r5, r6, #128	; 0x80
/* Enable DMA UART to start the TX request */
 LL_USART_EnableDMAReq_TX (pHandle->USARTx);

/* Write the USART_TDR register address in the DMA control register to configure it as
the destination of the transfer. */
  LL_DMA_SetPeriphAddress ( pHandle->txDMA, pHandle->txChannel , ( uint32_t ) &pHandle->USARTx->TDR );
 8004cd8:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8004cdc:	609d      	str	r5, [r3, #8]
 8004cde:	6086      	str	r6, [r0, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004ce0:	6219      	str	r1, [r3, #32]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004ce2:	5910      	ldr	r0, [r2, r4]
 8004ce4:	f040 0002 	orr.w	r0, r0, #2
 8004ce8:	5110      	str	r0, [r2, r4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004cea:	6898      	ldr	r0, [r3, #8]
 8004cec:	4422      	add	r2, r4
 8004cee:	f040 0001 	orr.w	r0, r0, #1
  /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
 LL_USART_EnableIT_ERROR (pHandle->USARTx);

/* Write the USART_RDR register address in the DMA control register to configure it as
the source of the transfer. */
 LL_DMA_SetPeriphAddress ( pHandle->rxDMA, pHandle->rxChannel , ( uint32_t ) &pHandle->USARTx->RDR );
 8004cf2:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004cf6:	6098      	str	r0, [r3, #8]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004cf8:	6094      	str	r4, [r2, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004cfa:	6219      	str	r1, [r3, #32]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	430a      	orrs	r2, r1
}
 8004d00:	bcf0      	pop	{r4, r5, r6, r7}
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	0800aee4 	.word	0x0800aee4

08004d0c <UASPEP_SEND_PACKET>:

 LL_USART_EnableDMAReq_RX (pHandle->USARTx);
}

bool UASPEP_SEND_PACKET (void *pHWHandle, void *data, uint16_t length)
{
 8004d0c:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004d0e:	6903      	ldr	r3, [r0, #16]
 8004d10:	4c0b      	ldr	r4, [pc, #44]	; (8004d40 <UASPEP_SEND_PACKET+0x34>)
 8004d12:	6880      	ldr	r0, [r0, #8]
 8004d14:	5ce3      	ldrb	r3, [r4, r3]
 8004d16:	58c4      	ldr	r4, [r0, r3]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  bool result;
  if ( LL_DMA_IsEnabledChannel (pHandle->txDMA, pHandle->txChannel) )
 8004d18:	07e4      	lsls	r4, r4, #31
 8004d1a:	eb00 0503 	add.w	r5, r0, r3
 8004d1e:	d40c      	bmi.n	8004d3a <UASPEP_SEND_PACKET+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8004d20:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8004d22:	6869      	ldr	r1, [r5, #4]
 8004d24:	0c09      	lsrs	r1, r1, #16
 8004d26:	0409      	lsls	r1, r1, #16
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	606a      	str	r2, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004d2c:	58c2      	ldr	r2, [r0, r3]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	50c2      	str	r2, [r0, r3]
    LL_DMA_SetDataLength( pHandle->txDMA, pHandle->txChannel, length );
    LL_DMA_EnableChannel( pHandle->txDMA, pHandle->txChannel );
   result = true;
  }
  return result;
}
 8004d34:	bc30      	pop	{r4, r5}
   result = true;
 8004d36:	2001      	movs	r0, #1
}
 8004d38:	4770      	bx	lr
    result = false;
 8004d3a:	2000      	movs	r0, #0
}
 8004d3c:	bc30      	pop	{r4, r5}
 8004d3e:	4770      	bx	lr
 8004d40:	0800aee4 	.word	0x0800aee4

08004d44 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER (void *pHWHandle, void* buffer, uint16_t length)
{
 8004d44:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004d46:	68c3      	ldr	r3, [r0, #12]
 8004d48:	4d09      	ldr	r5, [pc, #36]	; (8004d70 <UASPEP_RECEIVE_BUFFER+0x2c>)
 8004d4a:	6844      	ldr	r4, [r0, #4]
 8004d4c:	5ce8      	ldrb	r0, [r5, r3]
 8004d4e:	5823      	ldr	r3, [r4, r0]
 8004d50:	1825      	adds	r5, r4, r0
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8004d58:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8004d5a:	686b      	ldr	r3, [r5, #4]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	041b      	lsls	r3, r3, #16
 8004d60:	431a      	orrs	r2, r3
 8004d62:	606a      	str	r2, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004d64:	5823      	ldr	r3, [r4, r0]
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	5023      	str	r3, [r4, r0]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  LL_DMA_DisableChannel( pHandle->rxDMA, pHandle->rxChannel );
  LL_DMA_SetMemoryAddress( pHandle->rxDMA, pHandle->rxChannel, (uint32_t) buffer );
  LL_DMA_SetDataLength(  pHandle->rxDMA, pHandle->rxChannel, length );
  LL_DMA_EnableChannel(  pHandle->rxDMA, pHandle->rxChannel );
}
 8004d6c:	bc30      	pop	{r4, r5}
 8004d6e:	4770      	bx	lr
 8004d70:	0800aee4 	.word	0x0800aee4

08004d74 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE (void *pHWHandle)
{
   UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
   LL_USART_ClearFlag_IDLE (pHandle->USARTx);
 8004d74:	6803      	ldr	r3, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004d76:	2210      	movs	r2, #16
 8004d78:	621a      	str	r2, [r3, #32]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	f042 0210 	orr.w	r2, r2, #16
 8004d80:	601a      	str	r2, [r3, #0]
   LL_USART_EnableIT_IDLE (pHandle->USARTx);
}
 8004d82:	4770      	bx	lr

08004d84 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004d84:	4a03      	ldr	r2, [pc, #12]	; (8004d94 <SystemInit+0x10>)
 8004d86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d8a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d92:	4770      	bx	lr
 8004d94:	e000ed00 	.word	0xe000ed00

08004d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d98:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <HAL_InitTick+0x40>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	b90b      	cbnz	r3, 8004da4 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004da0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004da4:	490d      	ldr	r1, [pc, #52]	; (8004ddc <HAL_InitTick+0x44>)
 8004da6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004daa:	4605      	mov	r5, r0
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	6808      	ldr	r0, [r1, #0]
 8004db2:	fbb0 f0f3 	udiv	r0, r0, r3
 8004db6:	f001 f829 	bl	8005e0c <HAL_SYSTICK_Config>
 8004dba:	4604      	mov	r4, r0
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d1ef      	bne.n	8004da0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dc0:	2d0f      	cmp	r5, #15
 8004dc2:	d8ed      	bhi.n	8004da0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	f000 ffd8 	bl	8005d80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004dd0:	4b03      	ldr	r3, [pc, #12]	; (8004de0 <HAL_InitTick+0x48>)
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	601d      	str	r5, [r3, #0]
}
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	200006a4 	.word	0x200006a4
 8004ddc:	200006a0 	.word	0x200006a0
 8004de0:	200006a8 	.word	0x200006a8

08004de4 <HAL_Init>:
{
 8004de4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004de6:	2003      	movs	r0, #3
 8004de8:	f000 ffb6 	bl	8005d58 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004dec:	2004      	movs	r0, #4
 8004dee:	f7ff ffd3 	bl	8004d98 <HAL_InitTick>
 8004df2:	b110      	cbz	r0, 8004dfa <HAL_Init+0x16>
    status = HAL_ERROR;
 8004df4:	2401      	movs	r4, #1
}
 8004df6:	4620      	mov	r0, r4
 8004df8:	bd10      	pop	{r4, pc}
 8004dfa:	4604      	mov	r4, r0
    HAL_MspInit();
 8004dfc:	f7ff fb52 	bl	80044a4 <HAL_MspInit>
}
 8004e00:	4620      	mov	r0, r4
 8004e02:	bd10      	pop	{r4, pc}

08004e04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004e04:	4a03      	ldr	r2, [pc, #12]	; (8004e14 <HAL_IncTick+0x10>)
 8004e06:	4904      	ldr	r1, [pc, #16]	; (8004e18 <HAL_IncTick+0x14>)
 8004e08:	6813      	ldr	r3, [r2, #0]
 8004e0a:	6809      	ldr	r1, [r1, #0]
 8004e0c:	440b      	add	r3, r1
 8004e0e:	6013      	str	r3, [r2, #0]
}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20001edc 	.word	0x20001edc
 8004e18:	200006a4 	.word	0x200006a4

08004e1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004e1c:	4b01      	ldr	r3, [pc, #4]	; (8004e24 <HAL_GetTick+0x8>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
}
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20001edc 	.word	0x20001edc

08004e28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004e30:	2800      	cmp	r0, #0
 8004e32:	f000 80cb 	beq.w	8004fcc <HAL_ADC_Init+0x1a4>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e36:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004e38:	4604      	mov	r4, r0
 8004e3a:	2d00      	cmp	r5, #0
 8004e3c:	f000 8094 	beq.w	8004f68 <HAL_ADC_Init+0x140>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004e40:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004e42:	6893      	ldr	r3, [r2, #8]
 8004e44:	009d      	lsls	r5, r3, #2
 8004e46:	d505      	bpl.n	8004e54 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004e48:	6893      	ldr	r3, [r2, #8]
 8004e4a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004e4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e52:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e54:	6893      	ldr	r3, [r2, #8]
 8004e56:	00d8      	lsls	r0, r3, #3
 8004e58:	d419      	bmi.n	8004e8e <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e5a:	4b71      	ldr	r3, [pc, #452]	; (8005020 <HAL_ADC_Init+0x1f8>)
 8004e5c:	4871      	ldr	r0, [pc, #452]	; (8005024 <HAL_ADC_Init+0x1fc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004e60:	6891      	ldr	r1, [r2, #8]
 8004e62:	099b      	lsrs	r3, r3, #6
 8004e64:	fba0 0303 	umull	r0, r3, r0, r3
 8004e68:	099b      	lsrs	r3, r3, #6
 8004e6a:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8004e6e:	3301      	adds	r3, #1
 8004e70:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004e7a:	6091      	str	r1, [r2, #8]
 8004e7c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004e7e:	9b01      	ldr	r3, [sp, #4]
 8004e80:	b12b      	cbz	r3, 8004e8e <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8004e82:	9b01      	ldr	r3, [sp, #4]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004e88:	9b01      	ldr	r3, [sp, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f9      	bne.n	8004e82 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e8e:	6893      	ldr	r3, [r2, #8]
 8004e90:	00d9      	lsls	r1, r3, #3
 8004e92:	d45b      	bmi.n	8004f4c <HAL_ADC_Init+0x124>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004e96:	f043 0310 	orr.w	r3, r3, #16
 8004e9a:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ea4:	6893      	ldr	r3, [r2, #8]
 8004ea6:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8004eaa:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004eae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004eb0:	d153      	bne.n	8004f5a <HAL_ADC_Init+0x132>
 8004eb2:	06db      	lsls	r3, r3, #27
 8004eb4:	d451      	bmi.n	8004f5a <HAL_ADC_Init+0x132>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004eb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004eb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004ebc:	f043 0302 	orr.w	r3, r3, #2
 8004ec0:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ec2:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ec4:	07de      	lsls	r6, r3, #31
 8004ec6:	d40e      	bmi.n	8004ee6 <HAL_ADC_Init+0xbe>
 8004ec8:	4b57      	ldr	r3, [pc, #348]	; (8005028 <HAL_ADC_Init+0x200>)
 8004eca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8004ece:	6889      	ldr	r1, [r1, #8]
 8004ed0:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	07dd      	lsls	r5, r3, #31
 8004ed6:	d406      	bmi.n	8004ee6 <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004ed8:	4954      	ldr	r1, [pc, #336]	; (800502c <HAL_ADC_Init+0x204>)
 8004eda:	6865      	ldr	r5, [r4, #4]
 8004edc:	688b      	ldr	r3, [r1, #8]
 8004ede:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004ee2:	432b      	orrs	r3, r5
 8004ee4:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8004ee6:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8004eea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004eec:	432b      	orrs	r3, r5
 8004eee:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ef0:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ef2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8004ef6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004efa:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f00:	d05f      	beq.n	8004fc2 <HAL_ADC_Init+0x19a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f04:	b121      	cbz	r1, 8004f10 <HAL_ADC_Init+0xe8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8004f06:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f08:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004f0c:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f0e:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f10:	68d6      	ldr	r6, [r2, #12]
 8004f12:	4947      	ldr	r1, [pc, #284]	; (8005030 <HAL_ADC_Init+0x208>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f14:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f16:	4031      	ands	r1, r6
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f1c:	6913      	ldr	r3, [r2, #16]
 8004f1e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004f22:	432b      	orrs	r3, r5
 8004f24:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f26:	6893      	ldr	r3, [r2, #8]
 8004f28:	0759      	lsls	r1, r3, #29
 8004f2a:	d523      	bpl.n	8004f74 <HAL_ADC_Init+0x14c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f2c:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f2e:	6963      	ldr	r3, [r4, #20]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d04e      	beq.n	8004fd2 <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004f34:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004f36:	f023 030f 	bic.w	r3, r3, #15
 8004f3a:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004f3e:	f023 0303 	bic.w	r3, r3, #3
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004f48:	b002      	add	sp, #8
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f4c:	6893      	ldr	r3, [r2, #8]
 8004f4e:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f52:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f56:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004f58:	d0ab      	beq.n	8004eb2 <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f5a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004f5c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f5e:	f043 0310 	orr.w	r3, r3, #16
 8004f62:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8004f64:	b002      	add	sp, #8
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8004f68:	f7ff fabc 	bl	80044e4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004f6c:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004f6e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8004f72:	e765      	b.n	8004e40 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f74:	6893      	ldr	r3, [r2, #8]
 8004f76:	071b      	lsls	r3, r3, #28
 8004f78:	d4d9      	bmi.n	8004f2e <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f7a:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f7c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f80:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 8004f82:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f84:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f88:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f8a:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f8e:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f92:	430b      	orrs	r3, r1
 8004f94:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f96:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004f98:	bb1d      	cbnz	r5, 8004fe2 <HAL_ADC_Init+0x1ba>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f9e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004fa0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004fa4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004fb0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d021      	beq.n	8004ffc <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004fb8:	6913      	ldr	r3, [r2, #16]
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	6113      	str	r3, [r2, #16]
 8004fc0:	e7b5      	b.n	8004f2e <HAL_ADC_Init+0x106>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004fc2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004fc4:	3901      	subs	r1, #1
 8004fc6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004fca:	e79a      	b.n	8004f02 <HAL_ADC_Init+0xda>
    return HAL_ERROR;
 8004fcc:	2001      	movs	r0, #1
}
 8004fce:	b002      	add	sp, #8
 8004fd0:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004fd2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004fd4:	6a23      	ldr	r3, [r4, #32]
 8004fd6:	f021 010f 	bic.w	r1, r1, #15
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe0:	e7ac      	b.n	8004f3c <HAL_ADC_Init+0x114>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe6:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004fe8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004fec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ff4:	432b      	orrs	r3, r5
 8004ff6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004ffa:	e7d9      	b.n	8004fb0 <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004ffc:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 8005000:	6911      	ldr	r1, [r2, #16]
 8005002:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005004:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8005008:	f021 0104 	bic.w	r1, r1, #4
 800500c:	4333      	orrs	r3, r6
 800500e:	430b      	orrs	r3, r1
 8005010:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005012:	432b      	orrs	r3, r5
 8005014:	430b      	orrs	r3, r1
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	6113      	str	r3, [r2, #16]
 800501c:	e787      	b.n	8004f2e <HAL_ADC_Init+0x106>
 800501e:	bf00      	nop
 8005020:	200006a0 	.word	0x200006a0
 8005024:	053e2d63 	.word	0x053e2d63
 8005028:	50000100 	.word	0x50000100
 800502c:	50000300 	.word	0x50000300
 8005030:	fff04007 	.word	0xfff04007

08005034 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005034:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005036:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 800503a:	b083      	sub	sp, #12
 800503c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800503e:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8005040:	f04f 0000 	mov.w	r0, #0
 8005044:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005046:	f000 8143 	beq.w	80052d0 <HAL_ADC_ConfigChannel+0x29c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800504a:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 800504c:	2001      	movs	r0, #1
 800504e:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005052:	6894      	ldr	r4, [r2, #8]
 8005054:	0766      	lsls	r6, r4, #29
 8005056:	d43d      	bmi.n	80050d4 <HAL_ADC_ConfigChannel+0xa0>
  MODIFY_REG(*preg,
 8005058:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800505c:	09a6      	lsrs	r6, r4, #6
 800505e:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8005062:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8005066:	f004 041f 	and.w	r4, r4, #31
 800506a:	5977      	ldr	r7, [r6, r5]
 800506c:	f04f 0c1f 	mov.w	ip, #31
 8005070:	fa0c fc04 	lsl.w	ip, ip, r4
 8005074:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005078:	ea27 070c 	bic.w	r7, r7, ip
 800507c:	40a0      	lsls	r0, r4
 800507e:	4338      	orrs	r0, r7
 8005080:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005082:	6890      	ldr	r0, [r2, #8]
 8005084:	0745      	lsls	r5, r0, #29
 8005086:	f140 809a 	bpl.w	80051be <HAL_ADC_ConfigChannel+0x18a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800508a:	6890      	ldr	r0, [r2, #8]
 800508c:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800508e:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005090:	07e4      	lsls	r4, r4, #31
 8005092:	d530      	bpl.n	80050f6 <HAL_ADC_ConfigChannel+0xc2>
 8005094:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005096:	49c2      	ldr	r1, [pc, #776]	; (80053a0 <HAL_ADC_ConfigChannel+0x36c>)
 8005098:	420c      	tst	r4, r1
 800509a:	d02a      	beq.n	80050f2 <HAL_ADC_ConfigChannel+0xbe>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800509c:	49c1      	ldr	r1, [pc, #772]	; (80053a4 <HAL_ADC_ConfigChannel+0x370>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800509e:	4dc2      	ldr	r5, [pc, #776]	; (80053a8 <HAL_ADC_ConfigChannel+0x374>)
 80050a0:	6888      	ldr	r0, [r1, #8]
 80050a2:	42ac      	cmp	r4, r5
 80050a4:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80050a8:	d01d      	beq.n	80050e6 <HAL_ADC_ConfigChannel+0xb2>
 80050aa:	4dc0      	ldr	r5, [pc, #768]	; (80053ac <HAL_ADC_ConfigChannel+0x378>)
 80050ac:	42ac      	cmp	r4, r5
 80050ae:	d01a      	beq.n	80050e6 <HAL_ADC_ConfigChannel+0xb2>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80050b0:	4dbf      	ldr	r5, [pc, #764]	; (80053b0 <HAL_ADC_ConfigChannel+0x37c>)
 80050b2:	42ac      	cmp	r4, r5
 80050b4:	f040 813e 	bne.w	8005334 <HAL_ADC_ConfigChannel+0x300>
 80050b8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80050bc:	d119      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0xbe>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050be:	4cbd      	ldr	r4, [pc, #756]	; (80053b4 <HAL_ADC_ConfigChannel+0x380>)
 80050c0:	42a2      	cmp	r2, r4
 80050c2:	d016      	beq.n	80050f2 <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80050c4:	688a      	ldr	r2, [r1, #8]
 80050c6:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80050ca:	4316      	orrs	r6, r2
 80050cc:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 80050d0:	608e      	str	r6, [r1, #8]
}
 80050d2:	e003      	b.n	80050dc <HAL_ADC_ConfigChannel+0xa8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050d6:	f042 0220 	orr.w	r2, r2, #32
 80050da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80050e2:	b003      	add	sp, #12
 80050e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050e6:	0201      	lsls	r1, r0, #8
 80050e8:	d403      	bmi.n	80050f2 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050ea:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80050ee:	f000 8102 	beq.w	80052f6 <HAL_ADC_ConfigChannel+0x2c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050f2:	2000      	movs	r0, #0
 80050f4:	e7f2      	b.n	80050dc <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80050f6:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80050f8:	4caf      	ldr	r4, [pc, #700]	; (80053b8 <HAL_ADC_ConfigChannel+0x384>)
 80050fa:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80050fe:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 80053c8 <HAL_ADC_ConfigChannel+0x394>
 8005102:	f006 0718 	and.w	r7, r6, #24
 8005106:	40fc      	lsrs	r4, r7
 8005108:	f3c0 0712 	ubfx	r7, r0, #0, #19
 800510c:	4004      	ands	r4, r0
 800510e:	ea25 0507 	bic.w	r5, r5, r7
 8005112:	432c      	orrs	r4, r5
 8005114:	4566      	cmp	r6, ip
 8005116:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800511a:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800511c:	d1bb      	bne.n	8005096 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800511e:	2f00      	cmp	r7, #0
 8005120:	f000 80d9 	beq.w	80052d6 <HAL_ADC_ConfigChannel+0x2a2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005124:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005128:	2c00      	cmp	r4, #0
 800512a:	f000 8181 	beq.w	8005430 <HAL_ADC_ConfigChannel+0x3fc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800512e:	fab4 f484 	clz	r4, r4
 8005132:	3401      	adds	r4, #1
 8005134:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005138:	2c09      	cmp	r4, #9
 800513a:	f240 8179 	bls.w	8005430 <HAL_ADC_ConfigChannel+0x3fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005142:	2d00      	cmp	r5, #0
 8005144:	f000 81d7 	beq.w	80054f6 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8005148:	fab5 f585 	clz	r5, r5
 800514c:	3501      	adds	r5, #1
 800514e:	06ad      	lsls	r5, r5, #26
 8005150:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005154:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005158:	2c00      	cmp	r4, #0
 800515a:	f000 81d1 	beq.w	8005500 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 800515e:	fab4 f484 	clz	r4, r4
 8005162:	3401      	adds	r4, #1
 8005164:	f004 041f 	and.w	r4, r4, #31
 8005168:	2601      	movs	r6, #1
 800516a:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800516e:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005170:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005174:	2800      	cmp	r0, #0
 8005176:	f000 81c1 	beq.w	80054fc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800517a:	fab0 f480 	clz	r4, r0
 800517e:	3401      	adds	r4, #1
 8005180:	f004 041f 	and.w	r4, r4, #31
 8005184:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005188:	f1a4 001e 	sub.w	r0, r4, #30
 800518c:	0500      	lsls	r0, r0, #20
 800518e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005192:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005194:	0dc7      	lsrs	r7, r0, #23
 8005196:	f007 0704 	and.w	r7, r7, #4
 800519a:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 800519e:	688e      	ldr	r6, [r1, #8]
 80051a0:	597c      	ldr	r4, [r7, r5]
 80051a2:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80051a6:	f04f 0c07 	mov.w	ip, #7
 80051aa:	fa0c fc00 	lsl.w	ip, ip, r0
 80051ae:	ea24 040c 	bic.w	r4, r4, ip
 80051b2:	fa06 f000 	lsl.w	r0, r6, r0
 80051b6:	4320      	orrs	r0, r4
 80051b8:	5178      	str	r0, [r7, r5]
 80051ba:	680c      	ldr	r4, [r1, #0]
}
 80051bc:	e76b      	b.n	8005096 <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80051be:	6890      	ldr	r0, [r2, #8]
 80051c0:	f010 0008 	ands.w	r0, r0, #8
 80051c4:	f040 8082 	bne.w	80052cc <HAL_ADC_ConfigChannel+0x298>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80051c8:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80051ca:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80051cc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80051d0:	f000 80c4 	beq.w	800535c <HAL_ADC_ConfigChannel+0x328>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80051d4:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 80051d8:	f00c 0c04 	and.w	ip, ip, #4
 80051dc:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 80051e0:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80051e4:	f85c 5007 	ldr.w	r5, [ip, r7]
 80051e8:	f04f 0e07 	mov.w	lr, #7
 80051ec:	fa0e fe06 	lsl.w	lr, lr, r6
 80051f0:	40b4      	lsls	r4, r6
 80051f2:	ea25 050e 	bic.w	r5, r5, lr
 80051f6:	432c      	orrs	r4, r5
 80051f8:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80051fc:	6954      	ldr	r4, [r2, #20]
 80051fe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005202:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005204:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005208:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800520a:	f1bc 0f04 	cmp.w	ip, #4
 800520e:	d02e      	beq.n	800526e <HAL_ADC_ConfigChannel+0x23a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005210:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 8005214:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 80053cc <HAL_ADC_ConfigChannel+0x398>
 8005218:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 800521c:	680f      	ldr	r7, [r1, #0]
 800521e:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005222:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8005226:	694d      	ldr	r5, [r1, #20]
 8005228:	0076      	lsls	r6, r6, #1
 800522a:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 800522e:	40b5      	lsls	r5, r6
 8005230:	ea47 070e 	orr.w	r7, r7, lr
 8005234:	433d      	orrs	r5, r7
 8005236:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800523a:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800523e:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8005240:	698e      	ldr	r6, [r1, #24]
 8005242:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8005246:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 800524a:	4335      	orrs	r5, r6
 800524c:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005250:	690e      	ldr	r6, [r1, #16]
 8005252:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8005254:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8005258:	2f01      	cmp	r7, #1
 800525a:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 800525e:	bf08      	it	eq
 8005260:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8005264:	4328      	orrs	r0, r5
 8005266:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 800526a:	6808      	ldr	r0, [r1, #0]
}
 800526c:	e70f      	b.n	800508e <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800526e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005270:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005272:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005274:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005278:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800527c:	2d00      	cmp	r5, #0
 800527e:	f040 80a7 	bne.w	80053d0 <HAL_ADC_ConfigChannel+0x39c>
 8005282:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005286:	42ac      	cmp	r4, r5
 8005288:	f000 8119 	beq.w	80054be <HAL_ADC_ConfigChannel+0x48a>
 800528c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800528e:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005290:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005294:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005298:	f102 0764 	add.w	r7, r2, #100	; 0x64
 800529c:	42ae      	cmp	r6, r5
 800529e:	f000 80fc 	beq.w	800549a <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052a2:	68a6      	ldr	r6, [r4, #8]
 80052a4:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052a6:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052aa:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80052ae:	42ae      	cmp	r6, r5
 80052b0:	f000 80e2 	beq.w	8005478 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052b4:	68e6      	ldr	r6, [r4, #12]
 80052b6:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052b8:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052ba:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80052be:	42b5      	cmp	r5, r6
 80052c0:	f47f aee5 	bne.w	800508e <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 80052c4:	6820      	ldr	r0, [r4, #0]
 80052c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80052ca:	6020      	str	r0, [r4, #0]
 80052cc:	6808      	ldr	r0, [r1, #0]
}
 80052ce:	e6de      	b.n	800508e <HAL_ADC_ConfigChannel+0x5a>
  __HAL_LOCK(hadc);
 80052d0:	2002      	movs	r0, #2
}
 80052d2:	b003      	add	sp, #12
 80052d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052d6:	0e80      	lsrs	r0, r0, #26
 80052d8:	1c44      	adds	r4, r0, #1
 80052da:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052de:	2e09      	cmp	r6, #9
 80052e0:	d850      	bhi.n	8005384 <HAL_ADC_ConfigChannel+0x350>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052e2:	06a5      	lsls	r5, r4, #26
 80052e4:	2401      	movs	r4, #1
 80052e6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80052ea:	40b4      	lsls	r4, r6
 80052ec:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80052f0:	4325      	orrs	r5, r4
 80052f2:	0500      	lsls	r0, r0, #20
 80052f4:	e74d      	b.n	8005192 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80052f6:	482b      	ldr	r0, [pc, #172]	; (80053a4 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052f8:	4a30      	ldr	r2, [pc, #192]	; (80053bc <HAL_ADC_ConfigChannel+0x388>)
 80052fa:	6881      	ldr	r1, [r0, #8]
 80052fc:	4c30      	ldr	r4, [pc, #192]	; (80053c0 <HAL_ADC_ConfigChannel+0x38c>)
 80052fe:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005302:	430e      	orrs	r6, r1
 8005304:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8005308:	6086      	str	r6, [r0, #8]
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	0992      	lsrs	r2, r2, #6
 800530e:	fba4 1202 	umull	r1, r2, r4, r2
 8005312:	0992      	lsrs	r2, r2, #6
 8005314:	3201      	adds	r2, #1
 8005316:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800531a:	0092      	lsls	r2, r2, #2
 800531c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800531e:	9a01      	ldr	r2, [sp, #4]
 8005320:	2a00      	cmp	r2, #0
 8005322:	f43f aee6 	beq.w	80050f2 <HAL_ADC_ConfigChannel+0xbe>
            wait_loop_index--;
 8005326:	9a01      	ldr	r2, [sp, #4]
 8005328:	3a01      	subs	r2, #1
 800532a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800532c:	9a01      	ldr	r2, [sp, #4]
 800532e:	2a00      	cmp	r2, #0
 8005330:	d1f9      	bne.n	8005326 <HAL_ADC_ConfigChannel+0x2f2>
 8005332:	e6de      	b.n	80050f2 <HAL_ADC_ConfigChannel+0xbe>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005334:	4d23      	ldr	r5, [pc, #140]	; (80053c4 <HAL_ADC_ConfigChannel+0x390>)
 8005336:	42ac      	cmp	r4, r5
 8005338:	f47f aedb 	bne.w	80050f2 <HAL_ADC_ConfigChannel+0xbe>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800533c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8005340:	f47f aed7 	bne.w	80050f2 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005344:	4c1b      	ldr	r4, [pc, #108]	; (80053b4 <HAL_ADC_ConfigChannel+0x380>)
 8005346:	42a2      	cmp	r2, r4
 8005348:	f43f aed3 	beq.w	80050f2 <HAL_ADC_ConfigChannel+0xbe>
 800534c:	688a      	ldr	r2, [r1, #8]
 800534e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005352:	4332      	orrs	r2, r6
 8005354:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005358:	608a      	str	r2, [r1, #8]
}
 800535a:	e6bf      	b.n	80050dc <HAL_ADC_ConfigChannel+0xa8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800535c:	0df5      	lsrs	r5, r6, #23
 800535e:	f102 0414 	add.w	r4, r2, #20
 8005362:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8005366:	f3c6 5604 	ubfx	r6, r6, #20, #5
 800536a:	592f      	ldr	r7, [r5, r4]
 800536c:	f04f 0c07 	mov.w	ip, #7
 8005370:	fa0c f606 	lsl.w	r6, ip, r6
 8005374:	ea27 0606 	bic.w	r6, r7, r6
 8005378:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800537a:	6954      	ldr	r4, [r2, #20]
 800537c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005380:	6154      	str	r4, [r2, #20]
}
 8005382:	e73f      	b.n	8005204 <HAL_ADC_ConfigChannel+0x1d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005384:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005388:	06a5      	lsls	r5, r4, #26
 800538a:	381e      	subs	r0, #30
 800538c:	2401      	movs	r4, #1
 800538e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005392:	fa04 f606 	lsl.w	r6, r4, r6
 8005396:	0500      	lsls	r0, r0, #20
 8005398:	4335      	orrs	r5, r6
 800539a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800539e:	e6f8      	b.n	8005192 <HAL_ADC_ConfigChannel+0x15e>
 80053a0:	80080000 	.word	0x80080000
 80053a4:	50000300 	.word	0x50000300
 80053a8:	c3210000 	.word	0xc3210000
 80053ac:	90c00010 	.word	0x90c00010
 80053b0:	c7520000 	.word	0xc7520000
 80053b4:	50000100 	.word	0x50000100
 80053b8:	0007ffff 	.word	0x0007ffff
 80053bc:	200006a0 	.word	0x200006a0
 80053c0:	053e2d63 	.word	0x053e2d63
 80053c4:	cb840000 	.word	0xcb840000
 80053c8:	407f0000 	.word	0x407f0000
 80053cc:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80053d4:	b11d      	cbz	r5, 80053de <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 80053d6:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80053da:	42ac      	cmp	r4, r5
 80053dc:	d06f      	beq.n	80054be <HAL_ADC_ConfigChannel+0x48a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053de:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80053e0:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053e2:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053e6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80053ea:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80053f2:	b11d      	cbz	r5, 80053fc <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 80053f4:	fab5 f585 	clz	r5, r5
 80053f8:	42ae      	cmp	r6, r5
 80053fa:	d04e      	beq.n	800549a <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053fc:	68a5      	ldr	r5, [r4, #8]
 80053fe:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005400:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005404:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005408:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800540c:	b11d      	cbz	r5, 8005416 <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 800540e:	fab5 f585 	clz	r5, r5
 8005412:	42ae      	cmp	r6, r5
 8005414:	d030      	beq.n	8005478 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005416:	68e5      	ldr	r5, [r4, #12]
 8005418:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800541a:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800541c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005420:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005424:	2d00      	cmp	r5, #0
 8005426:	f43f ae32 	beq.w	800508e <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 800542a:	fab5 f585 	clz	r5, r5
 800542e:	e746      	b.n	80052be <HAL_ADC_ConfigChannel+0x28a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005430:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005434:	2d00      	cmp	r5, #0
 8005436:	d058      	beq.n	80054ea <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8005438:	fab5 f585 	clz	r5, r5
 800543c:	3501      	adds	r5, #1
 800543e:	06ad      	lsls	r5, r5, #26
 8005440:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005444:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005448:	2c00      	cmp	r4, #0
 800544a:	d04c      	beq.n	80054e6 <HAL_ADC_ConfigChannel+0x4b2>
  return __builtin_clz(value);
 800544c:	fab4 f484 	clz	r4, r4
 8005450:	3401      	adds	r4, #1
 8005452:	f004 041f 	and.w	r4, r4, #31
 8005456:	2601      	movs	r6, #1
 8005458:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800545c:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005462:	2800      	cmp	r0, #0
 8005464:	d044      	beq.n	80054f0 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 8005466:	fab0 f480 	clz	r4, r0
 800546a:	3401      	adds	r4, #1
 800546c:	f004 041f 	and.w	r4, r4, #31
 8005470:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005474:	0520      	lsls	r0, r4, #20
 8005476:	e68c      	b.n	8005192 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 8005478:	6838      	ldr	r0, [r7, #0]
 800547a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800547e:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005480:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005482:	68e5      	ldr	r5, [r4, #12]
 8005484:	68e6      	ldr	r6, [r4, #12]
 8005486:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800548a:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800548e:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005490:	2d00      	cmp	r5, #0
 8005492:	d1c5      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x3ec>
 8005494:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005498:	e711      	b.n	80052be <HAL_ADC_ConfigChannel+0x28a>
  MODIFY_REG(*preg,
 800549a:	6838      	ldr	r0, [r7, #0]
 800549c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80054a0:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054a2:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80054a4:	68a5      	ldr	r5, [r4, #8]
 80054a6:	68a6      	ldr	r6, [r4, #8]
 80054a8:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054ac:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054b0:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054b4:	2d00      	cmp	r5, #0
 80054b6:	d1a7      	bne.n	8005408 <HAL_ADC_ConfigChannel+0x3d4>
 80054b8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80054bc:	e6f7      	b.n	80052ae <HAL_ADC_ConfigChannel+0x27a>
  MODIFY_REG(*preg,
 80054be:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80054c0:	4614      	mov	r4, r2
 80054c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80054c6:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054ca:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80054cc:	6e55      	ldr	r5, [r2, #100]	; 0x64
 80054ce:	6e56      	ldr	r6, [r2, #100]	; 0x64
 80054d0:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054d4:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054d8:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054dc:	2d00      	cmp	r5, #0
 80054de:	d186      	bne.n	80053ee <HAL_ADC_ConfigChannel+0x3ba>
 80054e0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80054e4:	e6da      	b.n	800529c <HAL_ADC_ConfigChannel+0x268>
 80054e6:	2402      	movs	r4, #2
 80054e8:	e7b8      	b.n	800545c <HAL_ADC_ConfigChannel+0x428>
 80054ea:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80054ee:	e7a9      	b.n	8005444 <HAL_ADC_ConfigChannel+0x410>
 80054f0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80054f4:	e64d      	b.n	8005192 <HAL_ADC_ConfigChannel+0x15e>
 80054f6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80054fa:	e62b      	b.n	8005154 <HAL_ADC_ConfigChannel+0x120>
 80054fc:	4801      	ldr	r0, [pc, #4]	; (8005504 <HAL_ADC_ConfigChannel+0x4d0>)
 80054fe:	e648      	b.n	8005192 <HAL_ADC_ConfigChannel+0x15e>
 8005500:	2402      	movs	r4, #2
 8005502:	e634      	b.n	800516e <HAL_ADC_ConfigChannel+0x13a>
 8005504:	fe500000 	.word	0xfe500000

08005508 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8005508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800550c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005510:	6944      	ldr	r4, [r0, #20]
{
 8005512:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8005514:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005516:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8005518:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800551a:	f000 8187 	beq.w	800582c <HAL_ADCEx_InjectedConfigChannel+0x324>
 800551e:	2301      	movs	r3, #1
 8005520:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005524:	b1e4      	cbz	r4, 8005560 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8005526:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005528:	2b01      	cmp	r3, #1
 800552a:	d019      	beq.n	8005560 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800552c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800552e:	2c00      	cmp	r4, #0
 8005530:	f040 8126 	bne.w	8005780 <HAL_ADCEx_InjectedConfigChannel+0x278>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005534:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005536:	2a00      	cmp	r2, #0
 8005538:	f000 8248 	beq.w	80059cc <HAL_ADCEx_InjectedConfigChannel+0x4c4>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800553c:	1e5c      	subs	r4, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800553e:	f002 027c 	and.w	r2, r2, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005542:	6acb      	ldr	r3, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005544:	4322      	orrs	r2, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005546:	4313      	orrs	r3, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005548:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 800554c:	6684      	str	r4, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800554e:	f005 051f 	and.w	r5, r5, #31
 8005552:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8005556:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005558:	4323      	orrs	r3, r4
 800555a:	6643      	str	r3, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800555c:	6803      	ldr	r3, [r0, #0]
 800555e:	e005      	b.n	800556c <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005560:	684b      	ldr	r3, [r1, #4]
 8005562:	2b09      	cmp	r3, #9
 8005564:	f000 80f8 	beq.w	8005758 <HAL_ADCEx_InjectedConfigChannel+0x250>
 8005568:	680a      	ldr	r2, [r1, #0]
 800556a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800556c:	689c      	ldr	r4, [r3, #8]
 800556e:	0724      	lsls	r4, r4, #28
 8005570:	d410      	bmi.n	8005594 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005572:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8005576:	2c00      	cmp	r4, #0
 8005578:	f040 80e5 	bne.w	8005746 <HAL_ADCEx_InjectedConfigChannel+0x23e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800557c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8005580:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8005584:	68dd      	ldr	r5, [r3, #12]
 8005586:	0524      	lsls	r4, r4, #20
 8005588:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 800558c:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8005590:	432c      	orrs	r4, r5
 8005592:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005594:	689c      	ldr	r4, [r3, #8]
 8005596:	f014 0404 	ands.w	r4, r4, #4
 800559a:	d060      	beq.n	800565e <HAL_ADCEx_InjectedConfigChannel+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800559c:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800559e:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055a0:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055a2:	07ef      	lsls	r7, r5, #31
 80055a4:	d414      	bmi.n	80055d0 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80055a6:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80055a8:	4dbe      	ldr	r5, [pc, #760]	; (80058a4 <HAL_ADCEx_InjectedConfigChannel+0x39c>)
 80055aa:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80055ae:	f8df e320 	ldr.w	lr, [pc, #800]	; 80058d0 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
 80055b2:	f007 0c18 	and.w	ip, r7, #24
 80055b6:	fa25 f50c 	lsr.w	r5, r5, ip
 80055ba:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 80055be:	4015      	ands	r5, r2
 80055c0:	ea26 060c 	bic.w	r6, r6, ip
 80055c4:	4335      	orrs	r5, r6
 80055c6:	4577      	cmp	r7, lr
 80055c8:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 80055cc:	f000 80fd 	beq.w	80057ca <HAL_ADCEx_InjectedConfigChannel+0x2c2>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80055d0:	49b5      	ldr	r1, [pc, #724]	; (80058a8 <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
 80055d2:	420a      	tst	r2, r1
 80055d4:	d019      	beq.n	800560a <HAL_ADCEx_InjectedConfigChannel+0x102>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80055d6:	4db5      	ldr	r5, [pc, #724]	; (80058ac <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80055d8:	4eb5      	ldr	r6, [pc, #724]	; (80058b0 <HAL_ADCEx_InjectedConfigChannel+0x3a8>)
 80055da:	68a9      	ldr	r1, [r5, #8]
 80055dc:	42b2      	cmp	r2, r6
 80055de:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 80055e2:	d019      	beq.n	8005618 <HAL_ADCEx_InjectedConfigChannel+0x110>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80055e4:	4eb3      	ldr	r6, [pc, #716]	; (80058b4 <HAL_ADCEx_InjectedConfigChannel+0x3ac>)
 80055e6:	42b2      	cmp	r2, r6
 80055e8:	d016      	beq.n	8005618 <HAL_ADCEx_InjectedConfigChannel+0x110>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80055ea:	4eb3      	ldr	r6, [pc, #716]	; (80058b8 <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 80055ec:	42b2      	cmp	r2, r6
 80055ee:	f040 8126 	bne.w	800583e <HAL_ADCEx_InjectedConfigChannel+0x336>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80055f2:	01ce      	lsls	r6, r1, #7
 80055f4:	d409      	bmi.n	800560a <HAL_ADCEx_InjectedConfigChannel+0x102>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055f6:	4ab1      	ldr	r2, [pc, #708]	; (80058bc <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d006      	beq.n	800560a <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80055fc:	68ab      	ldr	r3, [r5, #8]
 80055fe:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005602:	431f      	orrs	r7, r3
 8005604:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8005608:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800560a:	2300      	movs	r3, #0
 800560c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005610:	4620      	mov	r0, r4
 8005612:	b002      	add	sp, #8
 8005614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005618:	020a      	lsls	r2, r1, #8
 800561a:	d4f6      	bmi.n	800560a <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800561c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005620:	d1f3      	bne.n	800560a <HAL_ADCEx_InjectedConfigChannel+0x102>
 8005622:	4aa2      	ldr	r2, [pc, #648]	; (80058ac <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005624:	49a6      	ldr	r1, [pc, #664]	; (80058c0 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 8005626:	6893      	ldr	r3, [r2, #8]
 8005628:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800562c:	431f      	orrs	r7, r3
 800562e:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 8005632:	6097      	str	r7, [r2, #8]
 8005634:	680b      	ldr	r3, [r1, #0]
 8005636:	4aa3      	ldr	r2, [pc, #652]	; (80058c4 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8005638:	099b      	lsrs	r3, r3, #6
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	099b      	lsrs	r3, r3, #6
 8005640:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	3318      	adds	r3, #24
 8005648:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800564a:	9b01      	ldr	r3, [sp, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0dc      	beq.n	800560a <HAL_ADCEx_InjectedConfigChannel+0x102>
          wait_loop_index--;
 8005650:	9b01      	ldr	r3, [sp, #4]
 8005652:	3b01      	subs	r3, #1
 8005654:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8005656:	9b01      	ldr	r3, [sp, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f9      	bne.n	8005650 <HAL_ADCEx_InjectedConfigChannel+0x148>
 800565c:	e7d5      	b.n	800560a <HAL_ADCEx_InjectedConfigChannel+0x102>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800565e:	689d      	ldr	r5, [r3, #8]
 8005660:	f015 0508 	ands.w	r5, r5, #8
 8005664:	d19c      	bne.n	80055a0 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005666:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8005668:	2c00      	cmp	r4, #0
 800566a:	f040 809f 	bne.w	80057ac <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800566e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8005672:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005674:	68dc      	ldr	r4, [r3, #12]
 8005676:	bf0c      	ite	eq
 8005678:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800567c:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8005680:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005682:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005684:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8005688:	2e01      	cmp	r6, #1
 800568a:	f000 80ff 	beq.w	800588c <HAL_ADCEx_InjectedConfigChannel+0x384>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800568e:	691e      	ldr	r6, [r3, #16]
 8005690:	f026 0602 	bic.w	r6, r6, #2
 8005694:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005696:	688e      	ldr	r6, [r1, #8]
 8005698:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 800569c:	f000 80e2 	beq.w	8005864 <HAL_ADCEx_InjectedConfigChannel+0x35c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80056a0:	ea4f 5ed2 	mov.w	lr, r2, lsr #23
 80056a4:	f00e 0e04 	and.w	lr, lr, #4
 80056a8:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 80056ac:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80056b0:	f85e 700c 	ldr.w	r7, [lr, ip]
 80056b4:	f04f 0807 	mov.w	r8, #7
 80056b8:	fa08 f802 	lsl.w	r8, r8, r2
 80056bc:	4096      	lsls	r6, r2
 80056be:	ea27 0208 	bic.w	r2, r7, r8
 80056c2:	4316      	orrs	r6, r2
 80056c4:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80056c8:	695a      	ldr	r2, [r3, #20]
 80056ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056ce:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80056d0:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80056d4:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80056d6:	f1be 0f04 	cmp.w	lr, #4
 80056da:	f000 80fd 	beq.w	80058d8 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056de:	f103 0260 	add.w	r2, r3, #96	; 0x60
  MODIFY_REG(*preg,
 80056e2:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80058d4 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 80056e6:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
 80056ea:	ea06 0808 	and.w	r8, r6, r8
 80056ee:	680e      	ldr	r6, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80056f0:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 80056f4:	f006 47f8 	and.w	r7, r6, #2080374784	; 0x7c000000
 80056f8:	694e      	ldr	r6, [r1, #20]
 80056fa:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80056fe:	fa06 f60c 	lsl.w	r6, r6, ip
 8005702:	ea47 0708 	orr.w	r7, r7, r8
 8005706:	433e      	orrs	r6, r7
 8005708:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800570c:	f842 602e 	str.w	r6, [r2, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005710:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8005714:	698f      	ldr	r7, [r1, #24]
 8005716:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 800571a:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 800571e:	433e      	orrs	r6, r7
 8005720:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005724:	690f      	ldr	r7, [r1, #16]
 8005726:	f891 c01c 	ldrb.w	ip, [r1, #28]
  MODIFY_REG(*preg,
 800572a:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 800572e:	f1bc 0f01 	cmp.w	ip, #1
 8005732:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8005736:	bf08      	it	eq
 8005738:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 800573c:	4335      	orrs	r5, r6
 800573e:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
 8005742:	680a      	ldr	r2, [r1, #0]
}
 8005744:	e72c      	b.n	80055a0 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8005746:	68dc      	ldr	r4, [r3, #12]
 8005748:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 800574c:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8005750:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8005754:	60dc      	str	r4, [r3, #12]
 8005756:	e71d      	b.n	8005594 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005758:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800575a:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800575c:	2b00      	cmp	r3, #0
 800575e:	d06a      	beq.n	8005836 <HAL_ADCEx_InjectedConfigChannel+0x32e>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005760:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005762:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005766:	0c55      	lsrs	r5, r2, #17
 8005768:	4323      	orrs	r3, r4
 800576a:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800576e:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8005770:	6803      	ldr	r3, [r0, #0]
 8005772:	4e55      	ldr	r6, [pc, #340]	; (80058c8 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8005774:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005776:	4034      	ands	r4, r6
 8005778:	432c      	orrs	r4, r5
 800577a:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800577c:	6645      	str	r5, [r0, #100]	; 0x64
 800577e:	e6f5      	b.n	800556c <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005780:	e9d1 2600 	ldrd	r2, r6, [r1]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005784:	6e43      	ldr	r3, [r0, #100]	; 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005786:	f3c2 6584 	ubfx	r5, r2, #26, #5
 800578a:	f006 061f 	and.w	r6, r6, #31
 800578e:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005790:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8005792:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005794:	e9c0 5419 	strd	r5, r4, [r0, #100]	; 0x64
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005798:	6803      	ldr	r3, [r0, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800579a:	2c00      	cmp	r4, #0
 800579c:	f47f aee6 	bne.w	800556c <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80057a0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80057a2:	4e49      	ldr	r6, [pc, #292]	; (80058c8 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 80057a4:	4034      	ands	r4, r6
 80057a6:	4325      	orrs	r5, r4
 80057a8:	64dd      	str	r5, [r3, #76]	; 0x4c
 80057aa:	e6df      	b.n	800556c <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80057ac:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80057ae:	2c00      	cmp	r4, #0
 80057b0:	f43f af5d 	beq.w	800566e <HAL_ADCEx_InjectedConfigChannel+0x166>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80057b4:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 80057b8:	2c01      	cmp	r4, #1
 80057ba:	f000 8154 	beq.w	8005a66 <HAL_ADCEx_InjectedConfigChannel+0x55e>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80057be:	68dc      	ldr	r4, [r3, #12]
 80057c0:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 80057c4:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057c6:	462c      	mov	r4, r5
 80057c8:	e75c      	b.n	8005684 <HAL_ADCEx_InjectedConfigChannel+0x17c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80057ca:	f1bc 0f00 	cmp.w	ip, #0
 80057ce:	f040 80c7 	bne.w	8005960 <HAL_ADCEx_InjectedConfigChannel+0x458>
 80057d2:	0e92      	lsrs	r2, r2, #26
 80057d4:	1c55      	adds	r5, r2, #1
 80057d6:	f005 071f 	and.w	r7, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057da:	2f09      	cmp	r7, #9
 80057dc:	f240 80f9 	bls.w	80059d2 <HAL_ADCEx_InjectedConfigChannel+0x4ca>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80057e0:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80057e4:	06ae      	lsls	r6, r5, #26
 80057e6:	3a1e      	subs	r2, #30
 80057e8:	2501      	movs	r5, #1
 80057ea:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80057ee:	fa05 f707 	lsl.w	r7, r5, r7
 80057f2:	0512      	lsls	r2, r2, #20
 80057f4:	433e      	orrs	r6, r7
 80057f6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057fa:	4332      	orrs	r2, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80057fc:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8005800:	f00c 0c04 	and.w	ip, ip, #4
 8005804:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8005808:	688e      	ldr	r6, [r1, #8]
 800580a:	f85c 5007 	ldr.w	r5, [ip, r7]
 800580e:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8005812:	f04f 0e07 	mov.w	lr, #7
 8005816:	fa0e fe02 	lsl.w	lr, lr, r2
 800581a:	ea25 050e 	bic.w	r5, r5, lr
 800581e:	fa06 f202 	lsl.w	r2, r6, r2
 8005822:	432a      	orrs	r2, r5
 8005824:	f84c 2007 	str.w	r2, [ip, r7]
 8005828:	680a      	ldr	r2, [r1, #0]
}
 800582a:	e6d1      	b.n	80055d0 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 800582c:	2402      	movs	r4, #2
}
 800582e:	4620      	mov	r0, r4
 8005830:	b002      	add	sp, #8
 8005832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005836:	0c55      	lsrs	r5, r2, #17
 8005838:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800583c:	e798      	b.n	8005770 <HAL_ADCEx_InjectedConfigChannel+0x268>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800583e:	4e23      	ldr	r6, [pc, #140]	; (80058cc <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 8005840:	42b2      	cmp	r2, r6
 8005842:	f47f aee2 	bne.w	800560a <HAL_ADCEx_InjectedConfigChannel+0x102>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005846:	0249      	lsls	r1, r1, #9
 8005848:	f53f aedf 	bmi.w	800560a <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_VREFINT_INSTANCE(hadc))
 800584c:	4a1b      	ldr	r2, [pc, #108]	; (80058bc <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	f43f aedb 	beq.w	800560a <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005854:	68ab      	ldr	r3, [r5, #8]
 8005856:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800585a:	431f      	orrs	r7, r3
 800585c:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 8005860:	60af      	str	r7, [r5, #8]
}
 8005862:	e6d2      	b.n	800560a <HAL_ADCEx_InjectedConfigChannel+0x102>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005864:	0dd7      	lsrs	r7, r2, #23
 8005866:	f007 0704 	and.w	r7, r7, #4
 800586a:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 800586e:	f3c2 5e04 	ubfx	lr, r2, #20, #5
 8005872:	f04f 0c07 	mov.w	ip, #7
 8005876:	59ba      	ldr	r2, [r7, r6]
 8005878:	fa0c fc0e 	lsl.w	ip, ip, lr
 800587c:	ea22 020c 	bic.w	r2, r2, ip
 8005880:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005882:	695a      	ldr	r2, [r3, #20]
 8005884:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005888:	615a      	str	r2, [r3, #20]
}
 800588a:	e721      	b.n	80056d0 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      MODIFY_REG(hadc->Instance->CFGR2,
 800588c:	691f      	ldr	r7, [r3, #16]
 800588e:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8005890:	f427 7cff 	bic.w	ip, r7, #510	; 0x1fe
 8005894:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8005896:	433e      	orrs	r6, r7
 8005898:	ea46 060c 	orr.w	r6, r6, ip
 800589c:	f046 0602 	orr.w	r6, r6, #2
 80058a0:	611e      	str	r6, [r3, #16]
 80058a2:	e6f8      	b.n	8005696 <HAL_ADCEx_InjectedConfigChannel+0x18e>
 80058a4:	0007ffff 	.word	0x0007ffff
 80058a8:	80080000 	.word	0x80080000
 80058ac:	50000300 	.word	0x50000300
 80058b0:	c3210000 	.word	0xc3210000
 80058b4:	90c00010 	.word	0x90c00010
 80058b8:	c7520000 	.word	0xc7520000
 80058bc:	50000100 	.word	0x50000100
 80058c0:	200006a0 	.word	0x200006a0
 80058c4:	053e2d63 	.word	0x053e2d63
 80058c8:	04104000 	.word	0x04104000
 80058cc:	cb840000 	.word	0xcb840000
 80058d0:	407f0000 	.word	0x407f0000
 80058d4:	03fff000 	.word	0x03fff000
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80058d8:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80058da:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80058dc:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80058de:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80058e2:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80058e6:	2e00      	cmp	r6, #0
 80058e8:	d07d      	beq.n	80059e6 <HAL_ADCEx_InjectedConfigChannel+0x4de>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ea:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80058ee:	b126      	cbz	r6, 80058fa <HAL_ADCEx_InjectedConfigChannel+0x3f2>
  return __builtin_clz(value);
 80058f0:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80058f4:	42b5      	cmp	r5, r6
 80058f6:	f000 80bb 	beq.w	8005a70 <HAL_ADCEx_InjectedConfigChannel+0x568>
 80058fa:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80058fc:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058fe:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005902:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005906:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800590e:	b126      	cbz	r6, 800591a <HAL_ADCEx_InjectedConfigChannel+0x412>
  return __builtin_clz(value);
 8005910:	fab6 f686 	clz	r6, r6
 8005914:	42b7      	cmp	r7, r6
 8005916:	f000 80c0 	beq.w	8005a9a <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800591a:	68ae      	ldr	r6, [r5, #8]
 800591c:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800591e:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005922:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005926:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800592a:	b126      	cbz	r6, 8005936 <HAL_ADCEx_InjectedConfigChannel+0x42e>
  return __builtin_clz(value);
 800592c:	fab6 f686 	clz	r6, r6
 8005930:	42b7      	cmp	r7, r6
 8005932:	f000 80c7 	beq.w	8005ac4 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005936:	68ee      	ldr	r6, [r5, #12]
 8005938:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800593a:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800593c:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005940:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005944:	2e00      	cmp	r6, #0
 8005946:	f43f ae2b 	beq.w	80055a0 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 800594a:	fab6 f686 	clz	r6, r6
 800594e:	42be      	cmp	r6, r7
 8005950:	f47f ae26 	bne.w	80055a0 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8005954:	682a      	ldr	r2, [r5, #0]
 8005956:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800595a:	602a      	str	r2, [r5, #0]
 800595c:	680a      	ldr	r2, [r1, #0]
}
 800595e:	e61f      	b.n	80055a0 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005960:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005964:	2d00      	cmp	r5, #0
 8005966:	d05a      	beq.n	8005a1e <HAL_ADCEx_InjectedConfigChannel+0x516>
  return __builtin_clz(value);
 8005968:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800596c:	3501      	adds	r5, #1
 800596e:	f005 051f 	and.w	r5, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005972:	2d09      	cmp	r5, #9
 8005974:	d953      	bls.n	8005a1e <HAL_ADCEx_InjectedConfigChannel+0x516>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005976:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800597a:	2e00      	cmp	r6, #0
 800597c:	f000 80c2 	beq.w	8005b04 <HAL_ADCEx_InjectedConfigChannel+0x5fc>
  return __builtin_clz(value);
 8005980:	fab6 f686 	clz	r6, r6
 8005984:	3601      	adds	r6, #1
 8005986:	06b6      	lsls	r6, r6, #26
 8005988:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005990:	2d00      	cmp	r5, #0
 8005992:	f000 80b5 	beq.w	8005b00 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
  return __builtin_clz(value);
 8005996:	fab5 f585 	clz	r5, r5
 800599a:	3501      	adds	r5, #1
 800599c:	f005 051f 	and.w	r5, r5, #31
 80059a0:	2701      	movs	r7, #1
 80059a2:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80059a6:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80059ac:	2a00      	cmp	r2, #0
 80059ae:	f000 80a5 	beq.w	8005afc <HAL_ADCEx_InjectedConfigChannel+0x5f4>
  return __builtin_clz(value);
 80059b2:	fab2 f582 	clz	r5, r2
 80059b6:	3501      	adds	r5, #1
 80059b8:	f005 051f 	and.w	r5, r5, #31
 80059bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059c0:	f1a5 021e 	sub.w	r2, r5, #30
 80059c4:	0512      	lsls	r2, r2, #20
 80059c6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80059ca:	e716      	b.n	80057fa <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80059cc:	3b01      	subs	r3, #1
 80059ce:	461c      	mov	r4, r3
 80059d0:	e5ba      	b.n	8005548 <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80059d2:	06ae      	lsls	r6, r5, #26
 80059d4:	2501      	movs	r5, #1
 80059d6:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80059da:	40bd      	lsls	r5, r7
 80059dc:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80059e0:	432e      	orrs	r6, r5
 80059e2:	0512      	lsls	r2, r2, #20
 80059e4:	e709      	b.n	80057fa <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80059e6:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80059ea:	42b5      	cmp	r5, r6
 80059ec:	d040      	beq.n	8005a70 <HAL_ADCEx_InjectedConfigChannel+0x568>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80059ee:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80059f0:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059f2:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80059f6:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80059fa:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 80059fe:	42b7      	cmp	r7, r6
 8005a00:	d04b      	beq.n	8005a9a <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005a02:	68af      	ldr	r7, [r5, #8]
 8005a04:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a06:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005a0a:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005a0e:	42b7      	cmp	r7, r6
 8005a10:	d058      	beq.n	8005ac4 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005a12:	68ef      	ldr	r7, [r5, #12]
 8005a14:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a16:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a18:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005a1c:	e797      	b.n	800594e <HAL_ADCEx_InjectedConfigChannel+0x446>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	d064      	beq.n	8005af0 <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return __builtin_clz(value);
 8005a26:	fab6 f686 	clz	r6, r6
 8005a2a:	3601      	adds	r6, #1
 8005a2c:	06b6      	lsls	r6, r6, #26
 8005a2e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a32:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	d058      	beq.n	8005aec <HAL_ADCEx_InjectedConfigChannel+0x5e4>
  return __builtin_clz(value);
 8005a3a:	fab5 f585 	clz	r5, r5
 8005a3e:	3501      	adds	r5, #1
 8005a40:	f005 051f 	and.w	r5, r5, #31
 8005a44:	2701      	movs	r7, #1
 8005a46:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005a4a:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005a50:	2a00      	cmp	r2, #0
 8005a52:	d050      	beq.n	8005af6 <HAL_ADCEx_InjectedConfigChannel+0x5ee>
  return __builtin_clz(value);
 8005a54:	fab2 f582 	clz	r5, r2
 8005a58:	3501      	adds	r5, #1
 8005a5a:	f005 051f 	and.w	r5, r5, #31
 8005a5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a62:	052a      	lsls	r2, r5, #20
 8005a64:	e6c9      	b.n	80057fa <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a66:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8005a68:	f046 0620 	orr.w	r6, r6, #32
 8005a6c:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8005a6e:	e609      	b.n	8005684 <HAL_ADCEx_InjectedConfigChannel+0x17c>
  MODIFY_REG(*preg,
 8005a70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a72:	461d      	mov	r5, r3
 8005a74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a78:	f845 2f60 	str.w	r2, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005a7c:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005a7e:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8005a80:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8005a82:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005a86:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a8a:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005a8e:	2e00      	cmp	r6, #0
 8005a90:	f47f af3b 	bne.w	800590a <HAL_ADCEx_InjectedConfigChannel+0x402>
 8005a94:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8005a98:	e7b1      	b.n	80059fe <HAL_ADCEx_InjectedConfigChannel+0x4f6>
  MODIFY_REG(*preg,
 8005a9a:	f8dc 2000 	ldr.w	r2, [ip]
 8005a9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005aa2:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005aa6:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005aa8:	68ae      	ldr	r6, [r5, #8]
 8005aaa:	68af      	ldr	r7, [r5, #8]
 8005aac:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005ab0:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ab4:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005ab8:	2e00      	cmp	r6, #0
 8005aba:	f47f af34 	bne.w	8005926 <HAL_ADCEx_InjectedConfigChannel+0x41e>
 8005abe:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8005ac2:	e7a4      	b.n	8005a0e <HAL_ADCEx_InjectedConfigChannel+0x506>
  MODIFY_REG(*preg,
 8005ac4:	f8dc 2000 	ldr.w	r2, [ip]
 8005ac8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005acc:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005ad0:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ad2:	68ee      	ldr	r6, [r5, #12]
 8005ad4:	68ef      	ldr	r7, [r5, #12]
 8005ad6:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ada:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ade:	350c      	adds	r5, #12
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005ae0:	2e00      	cmp	r6, #0
 8005ae2:	f47f af2d 	bne.w	8005940 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8005ae6:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8005aea:	e730      	b.n	800594e <HAL_ADCEx_InjectedConfigChannel+0x446>
 8005aec:	2502      	movs	r5, #2
 8005aee:	e7ac      	b.n	8005a4a <HAL_ADCEx_InjectedConfigChannel+0x542>
 8005af0:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8005af4:	e79d      	b.n	8005a32 <HAL_ADCEx_InjectedConfigChannel+0x52a>
 8005af6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005afa:	e67e      	b.n	80057fa <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8005afc:	4a03      	ldr	r2, [pc, #12]	; (8005b0c <HAL_ADCEx_InjectedConfigChannel+0x604>)
 8005afe:	e67c      	b.n	80057fa <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8005b00:	2502      	movs	r5, #2
 8005b02:	e750      	b.n	80059a6 <HAL_ADCEx_InjectedConfigChannel+0x49e>
 8005b04:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8005b08:	e740      	b.n	800598c <HAL_ADCEx_InjectedConfigChannel+0x484>
 8005b0a:	bf00      	nop
 8005b0c:	fe500000 	.word	0xfe500000

08005b10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005b10:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b12:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b16:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8005b18:	2a01      	cmp	r2, #1
{
 8005b1a:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8005b1c:	d04f      	beq.n	8005bbe <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b1e:	6804      	ldr	r4, [r0, #0]
 8005b20:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005b22:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005b24:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b26:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005b2a:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8005b2c:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005b30:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b32:	d008      	beq.n	8005b46 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b34:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b3a:	f041 0120 	orr.w	r1, r1, #32
 8005b3e:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005b40:	b01c      	add	sp, #112	; 0x70
 8005b42:	bcf0      	pop	{r4, r5, r6, r7}
 8005b44:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b46:	4a23      	ldr	r2, [pc, #140]	; (8005bd4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8005b48:	6890      	ldr	r0, [r2, #8]
 8005b4a:	0740      	lsls	r0, r0, #29
 8005b4c:	d50b      	bpl.n	8005b66 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005b4e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b52:	f042 0220 	orr.w	r2, r2, #32
 8005b56:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005b58:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005b60:	b01c      	add	sp, #112	; 0x70
 8005b62:	bcf0      	pop	{r4, r5, r6, r7}
 8005b64:	4770      	bx	lr
 8005b66:	68a0      	ldr	r0, [r4, #8]
 8005b68:	0746      	lsls	r6, r0, #29
 8005b6a:	d4f1      	bmi.n	8005b50 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b6c:	b1d5      	cbz	r5, 8005ba4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005b6e:	4e1a      	ldr	r6, [pc, #104]	; (8005bd8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005b70:	684f      	ldr	r7, [r1, #4]
 8005b72:	68b0      	ldr	r0, [r6, #8]
 8005b74:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8005b78:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8005b7c:	4338      	orrs	r0, r7
 8005b7e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8005b82:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b84:	68a4      	ldr	r4, [r4, #8]
 8005b86:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b88:	4320      	orrs	r0, r4
 8005b8a:	f010 0001 	ands.w	r0, r0, #1
 8005b8e:	d114      	bne.n	8005bba <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 8005b90:	68b4      	ldr	r4, [r6, #8]
 8005b92:	688a      	ldr	r2, [r1, #8]
 8005b94:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8005b98:	4315      	orrs	r5, r2
 8005b9a:	f021 010f 	bic.w	r1, r1, #15
 8005b9e:	430d      	orrs	r5, r1
 8005ba0:	60b5      	str	r5, [r6, #8]
 8005ba2:	e7da      	b.n	8005b5a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ba4:	4d0c      	ldr	r5, [pc, #48]	; (8005bd8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005ba6:	68a9      	ldr	r1, [r5, #8]
 8005ba8:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8005bac:	60a9      	str	r1, [r5, #8]
 8005bae:	68a1      	ldr	r1, [r4, #8]
 8005bb0:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bb2:	4308      	orrs	r0, r1
 8005bb4:	f010 0001 	ands.w	r0, r0, #1
 8005bb8:	d005      	beq.n	8005bc6 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bba:	2000      	movs	r0, #0
 8005bbc:	e7cd      	b.n	8005b5a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8005bbe:	2002      	movs	r0, #2
}
 8005bc0:	b01c      	add	sp, #112	; 0x70
 8005bc2:	bcf0      	pop	{r4, r5, r6, r7}
 8005bc4:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005bc6:	68aa      	ldr	r2, [r5, #8]
 8005bc8:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8005bcc:	f022 020f 	bic.w	r2, r2, #15
 8005bd0:	60aa      	str	r2, [r5, #8]
 8005bd2:	e7c2      	b.n	8005b5a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8005bd4:	50000100 	.word	0x50000100
 8005bd8:	50000300 	.word	0x50000300

08005bdc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bde:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d054      	beq.n	8005c92 <HAL_COMP_Init+0xb6>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005be8:	6802      	ldr	r2, [r0, #0]
 8005bea:	6813      	ldr	r3, [r2, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	4604      	mov	r4, r0
 8005bf0:	db4f      	blt.n	8005c92 <HAL_COMP_Init+0xb6>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8005bf2:	7f43      	ldrb	r3, [r0, #29]
 8005bf4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d077      	beq.n	8005cec <HAL_COMP_Init+0x110>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 8005bfc:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
    tmp_csr = (  hcomp->Init.InputMinus
 8005c00:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
               | hcomp->Init.BlankingSrce
 8005c04:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005c06:	6817      	ldr	r7, [r2, #0]
               | hcomp->Init.InputPlus
 8005c08:	4333      	orrs	r3, r6
               | hcomp->Init.BlankingSrce
 8005c0a:	430b      	orrs	r3, r1
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005c0c:	6816      	ldr	r6, [r2, #0]
 8005c0e:	493f      	ldr	r1, [pc, #252]	; (8005d0c <HAL_COMP_Init+0x130>)
               | hcomp->Init.Hysteresis
 8005c10:	432b      	orrs	r3, r5
    tmp_csr = (  hcomp->Init.InputMinus
 8005c12:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 8005c14:	4031      	ands	r1, r6
 8005c16:	430b      	orrs	r3, r1
 8005c18:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8005c1a:	6813      	ldr	r3, [r2, #0]
 8005c1c:	0218      	lsls	r0, r3, #8
 8005c1e:	d501      	bpl.n	8005c24 <HAL_COMP_Init+0x48>
 8005c20:	023b      	lsls	r3, r7, #8
 8005c22:	d54e      	bpl.n	8005cc2 <HAL_COMP_Init+0xe6>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005c24:	4b3a      	ldr	r3, [pc, #232]	; (8005d10 <HAL_COMP_Init+0x134>)
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d066      	beq.n	8005cf8 <HAL_COMP_Init+0x11c>
 8005c2a:	4b3a      	ldr	r3, [pc, #232]	; (8005d14 <HAL_COMP_Init+0x138>)
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d068      	beq.n	8005d02 <HAL_COMP_Init+0x126>
 8005c30:	3304      	adds	r3, #4
 8005c32:	429a      	cmp	r2, r3
 8005c34:	bf0b      	itete	eq
 8005c36:	f06f 5200 	mvneq.w	r2, #536870912	; 0x20000000
 8005c3a:	f06f 4280 	mvnne.w	r2, #1073741824	; 0x40000000
 8005c3e:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 8005c42:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005c46:	69a3      	ldr	r3, [r4, #24]
 8005c48:	079f      	lsls	r7, r3, #30
 8005c4a:	d025      	beq.n	8005c98 <HAL_COMP_Init+0xbc>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005c4c:	4d32      	ldr	r5, [pc, #200]	; (8005d18 <HAL_COMP_Init+0x13c>)
 8005c4e:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005c50:	06de      	lsls	r6, r3, #27
 8005c52:	bf4c      	ite	mi
 8005c54:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005c56:	4010      	andpl	r0, r2
 8005c58:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005c5a:	4d2f      	ldr	r5, [pc, #188]	; (8005d18 <HAL_COMP_Init+0x13c>)
 8005c5c:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005c5e:	069f      	lsls	r7, r3, #26
 8005c60:	bf4c      	ite	mi
 8005c62:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005c64:	4010      	andpl	r0, r2
 8005c66:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005c68:	482b      	ldr	r0, [pc, #172]	; (8005d18 <HAL_COMP_Init+0x13c>)
 8005c6a:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005c6c:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005c6e:	079e      	lsls	r6, r3, #30
 8005c70:	bf4c      	ite	mi
 8005c72:	430d      	orrmi	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005c74:	4015      	andpl	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005c76:	07db      	lsls	r3, r3, #31
 8005c78:	6045      	str	r5, [r0, #4]
 8005c7a:	d51d      	bpl.n	8005cb8 <HAL_COMP_Init+0xdc>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005c7c:	4b26      	ldr	r3, [pc, #152]	; (8005d18 <HAL_COMP_Init+0x13c>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4311      	orrs	r1, r2
 8005c82:	6019      	str	r1, [r3, #0]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005c84:	7f63      	ldrb	r3, [r4, #29]
 8005c86:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005c8a:	b18b      	cbz	r3, 8005cb0 <HAL_COMP_Init+0xd4>
  HAL_StatusTypeDef status = HAL_OK;
 8005c8c:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 8005c8e:	b003      	add	sp, #12
 8005c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 8005c92:	2001      	movs	r0, #1
}
 8005c94:	b003      	add	sp, #12
 8005c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005c98:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <HAL_COMP_Init+0x13c>)
 8005c9a:	6859      	ldr	r1, [r3, #4]
 8005c9c:	4011      	ands	r1, r2
 8005c9e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005ca0:	6819      	ldr	r1, [r3, #0]
 8005ca2:	400a      	ands	r2, r1
 8005ca4:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005ca6:	7f63      	ldrb	r3, [r4, #29]
 8005ca8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1ed      	bne.n	8005c8c <HAL_COMP_Init+0xb0>
      hcomp->State = HAL_COMP_STATE_READY;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	7763      	strb	r3, [r4, #29]
}
 8005cb4:	b003      	add	sp, #12
 8005cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cb8:	4917      	ldr	r1, [pc, #92]	; (8005d18 <HAL_COMP_Init+0x13c>)
 8005cba:	680b      	ldr	r3, [r1, #0]
 8005cbc:	401a      	ands	r2, r3
 8005cbe:	600a      	str	r2, [r1, #0]
}
 8005cc0:	e7f1      	b.n	8005ca6 <HAL_COMP_Init+0xca>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005cc2:	4b16      	ldr	r3, [pc, #88]	; (8005d1c <HAL_COMP_Init+0x140>)
 8005cc4:	4916      	ldr	r1, [pc, #88]	; (8005d20 <HAL_COMP_Init+0x144>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	099b      	lsrs	r3, r3, #6
 8005cca:	fba1 1303 	umull	r1, r3, r1, r3
 8005cce:	099b      	lsrs	r3, r3, #6
 8005cd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8005cd8:	9b01      	ldr	r3, [sp, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0a2      	beq.n	8005c24 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 8005cde:	9b01      	ldr	r3, [sp, #4]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8005ce4:	9b01      	ldr	r3, [sp, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f9      	bne.n	8005cde <HAL_COMP_Init+0x102>
 8005cea:	e79b      	b.n	8005c24 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 8005cec:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 8005cee:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8005cf0:	f7fe fc74 	bl	80045dc <HAL_COMP_MspInit>
 8005cf4:	6822      	ldr	r2, [r4, #0]
 8005cf6:	e781      	b.n	8005bfc <HAL_COMP_Init+0x20>
 8005cf8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005cfc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d00:	e7a1      	b.n	8005c46 <HAL_COMP_Init+0x6a>
 8005d02:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005d06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d0a:	e79c      	b.n	8005c46 <HAL_COMP_Init+0x6a>
 8005d0c:	ff007e0f 	.word	0xff007e0f
 8005d10:	40010200 	.word	0x40010200
 8005d14:	40010204 	.word	0x40010204
 8005d18:	40010400 	.word	0x40010400
 8005d1c:	200006a0 	.word	0x200006a0
 8005d20:	053e2d63 	.word	0x053e2d63

08005d24 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005d24:	b1b0      	cbz	r0, 8005d54 <HAL_CORDIC_Init+0x30>
{
 8005d26:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005d28:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d32:	b153      	cbz	r3, 8005d4a <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005d34:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005d36:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005d38:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005d3a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8005d3e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8005d42:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005d46:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8005d48:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8005d4a:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8005d4e:	f7fe fca5 	bl	800469c <HAL_CORDIC_MspInit>
 8005d52:	e7ef      	b.n	8005d34 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8005d54:	2001      	movs	r0, #1
}
 8005d56:	4770      	bx	lr

08005d58 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d58:	4908      	ldr	r1, [pc, #32]	; (8005d7c <HAL_NVIC_SetPriorityGrouping+0x24>)
 8005d5a:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d5c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d5e:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d60:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8005d64:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d66:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005d74:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8005d78:	60cb      	str	r3, [r1, #12]
 8005d7a:	4770      	bx	lr
 8005d7c:	e000ed00 	.word	0xe000ed00

08005d80 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d80:	4b19      	ldr	r3, [pc, #100]	; (8005de8 <HAL_NVIC_SetPriority+0x68>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d88:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d8a:	f1c3 0507 	rsb	r5, r3, #7
 8005d8e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d90:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d94:	bf28      	it	cs
 8005d96:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d98:	2c06      	cmp	r4, #6
 8005d9a:	d919      	bls.n	8005dd0 <HAL_NVIC_SetPriority+0x50>
 8005d9c:	3b03      	subs	r3, #3
 8005d9e:	f04f 34ff 	mov.w	r4, #4294967295
 8005da2:	409c      	lsls	r4, r3
 8005da4:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da8:	f04f 34ff 	mov.w	r4, #4294967295
 8005dac:	40ac      	lsls	r4, r5
 8005dae:	ea21 0104 	bic.w	r1, r1, r4
 8005db2:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005db4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005db6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005dba:	db0c      	blt.n	8005dd6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dbc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005dc0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005dc4:	0109      	lsls	r1, r1, #4
 8005dc6:	b2c9      	uxtb	r1, r1
 8005dc8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005dcc:	bc30      	pop	{r4, r5}
 8005dce:	4770      	bx	lr
 8005dd0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	e7e8      	b.n	8005da8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dd6:	4b05      	ldr	r3, [pc, #20]	; (8005dec <HAL_NVIC_SetPriority+0x6c>)
 8005dd8:	f000 000f 	and.w	r0, r0, #15
 8005ddc:	0109      	lsls	r1, r1, #4
 8005dde:	4403      	add	r3, r0
 8005de0:	b2c9      	uxtb	r1, r1
 8005de2:	7619      	strb	r1, [r3, #24]
 8005de4:	bc30      	pop	{r4, r5}
 8005de6:	4770      	bx	lr
 8005de8:	e000ed00 	.word	0xe000ed00
 8005dec:	e000ecfc 	.word	0xe000ecfc

08005df0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005df0:	2800      	cmp	r0, #0
 8005df2:	db07      	blt.n	8005e04 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005df4:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <HAL_NVIC_EnableIRQ+0x18>)
 8005df6:	f000 011f 	and.w	r1, r0, #31
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	0940      	lsrs	r0, r0, #5
 8005dfe:	408b      	lsls	r3, r1
 8005e00:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	e000e100 	.word	0xe000e100

08005e0c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e0c:	3801      	subs	r0, #1
 8005e0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005e12:	d20e      	bcs.n	8005e32 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e14:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e16:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e18:	4c08      	ldr	r4, [pc, #32]	; (8005e3c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e1a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e1c:	20f0      	movs	r0, #240	; 0xf0
 8005e1e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e22:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e24:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e26:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e28:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8005e2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e2e:	6019      	str	r1, [r3, #0]
 8005e30:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005e32:	2001      	movs	r0, #1
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	e000e010 	.word	0xe000e010
 8005e3c:	e000ed00 	.word	0xe000ed00

08005e40 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop

08005e44 <HAL_SYSTICK_IRQHandler>:
{
 8005e44:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005e46:	f7ff fffb 	bl	8005e40 <HAL_SYSTICK_Callback>
}
 8005e4a:	bd08      	pop	{r3, pc}

08005e4c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d07d      	beq.n	8005f4c <HAL_DMA_Init+0x100>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005e50:	4a3f      	ldr	r2, [pc, #252]	; (8005f50 <HAL_DMA_Init+0x104>)
 8005e52:	4603      	mov	r3, r0
 8005e54:	6800      	ldr	r0, [r0, #0]
 8005e56:	4290      	cmp	r0, r2
{
 8005e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005e5c:	d962      	bls.n	8005f24 <HAL_DMA_Init+0xd8>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005e5e:	493d      	ldr	r1, [pc, #244]	; (8005f54 <HAL_DMA_Init+0x108>)
 8005e60:	4a3d      	ldr	r2, [pc, #244]	; (8005f58 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 8005e62:	4c3e      	ldr	r4, [pc, #248]	; (8005f5c <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005e64:	4401      	add	r1, r0
 8005e66:	fba2 2101 	umull	r2, r1, r2, r1
 8005e6a:	0909      	lsrs	r1, r1, #4
 8005e6c:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005e6e:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e72:	691e      	ldr	r6, [r3, #16]
 8005e74:	641c      	str	r4, [r3, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 8005e76:	433a      	orrs	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e78:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e7a:	699d      	ldr	r5, [r3, #24]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005e7c:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8005f74 <HAL_DMA_Init+0x128>
 8005e80:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8005f50 <HAL_DMA_Init+0x104>
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e84:	4332      	orrs	r2, r6
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e86:	f04f 0c02 	mov.w	ip, #2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e8a:	4322      	orrs	r2, r4
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e8c:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005e90:	4c31      	ldr	r4, [pc, #196]	; (8005f58 <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 8005e92:	f8d0 c000 	ldr.w	ip, [r0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e96:	69de      	ldr	r6, [r3, #28]
 8005e98:	6459      	str	r1, [r3, #68]	; 0x44
 8005e9a:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005e9c:	b2c5      	uxtb	r5, r0
 8005e9e:	3d08      	subs	r5, #8
 8005ea0:	fba4 4505 	umull	r4, r5, r4, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ea4:	6a1c      	ldr	r4, [r3, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ea6:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005ea8:	f42c 4cff 	bic.w	ip, ip, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005eac:	4e2c      	ldr	r6, [pc, #176]	; (8005f60 <HAL_DMA_Init+0x114>)
          hdma->Init.Mode                | hdma->Init.Priority;
 8005eae:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005eb0:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005eb4:	f3c5 1404 	ubfx	r4, r5, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005eb8:	4540      	cmp	r0, r8
 8005eba:	bf88      	it	hi
 8005ebc:	4676      	movhi	r6, lr
  tmp |=  hdma->Init.Direction        |
 8005ebe:	ea42 020c 	orr.w	r2, r2, ip
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ec2:	2501      	movs	r5, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ec4:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8005f78 <HAL_DMA_Init+0x12c>
  hdma->Instance->CCR = tmp;
 8005ec8:	6002      	str	r2, [r0, #0]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005eca:	eb01 0e06 	add.w	lr, r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ece:	fa05 f404 	lsl.w	r4, r5, r4
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ed2:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ed6:	e9c3 ec12 	strd	lr, ip, [r3, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005eda:	ea4f 0191 	mov.w	r1, r1, lsr #2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ede:	651c      	str	r4, [r3, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ee0:	d029      	beq.n	8005f36 <HAL_DMA_Init+0xea>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ee2:	6858      	ldr	r0, [r3, #4]
 8005ee4:	b2c2      	uxtb	r2, r0
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005ee6:	3801      	subs	r0, #1
 8005ee8:	2803      	cmp	r0, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005eea:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eee:	f8cc 4004 	str.w	r4, [ip, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005ef2:	d826      	bhi.n	8005f42 <HAL_DMA_Init+0xf6>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ef4:	491b      	ldr	r1, [pc, #108]	; (8005f64 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005ef6:	481c      	ldr	r0, [pc, #112]	; (8005f68 <HAL_DMA_Init+0x11c>)
 8005ef8:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005efa:	4411      	add	r1, r2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005efc:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005efe:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005f00:	f002 021f 	and.w	r2, r2, #31
 8005f04:	fa05 f202 	lsl.w	r2, r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f08:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f0a:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005f0c:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f0e:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f10:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f12:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8005f14:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f16:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005f18:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005f1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8005f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f24:	4911      	ldr	r1, [pc, #68]	; (8005f6c <HAL_DMA_Init+0x120>)
 8005f26:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 8005f28:	4c11      	ldr	r4, [pc, #68]	; (8005f70 <HAL_DMA_Init+0x124>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f2a:	4401      	add	r1, r0
 8005f2c:	fba2 2101 	umull	r2, r1, r2, r1
 8005f30:	0909      	lsrs	r1, r1, #4
 8005f32:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8005f34:	e79b      	b.n	8005e6e <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f36:	2200      	movs	r2, #0
 8005f38:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005f3a:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f3e:	f8cc 4004 	str.w	r4, [ip, #4]
    hdma->DMAmuxRequestGen = 0U;
 8005f42:	2200      	movs	r2, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8005f44:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f48:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f4a:	e7e2      	b.n	8005f12 <HAL_DMA_Init+0xc6>
    return HAL_ERROR;
 8005f4c:	2001      	movs	r0, #1
}
 8005f4e:	4770      	bx	lr
 8005f50:	40020407 	.word	0x40020407
 8005f54:	bffdfbf8 	.word	0xbffdfbf8
 8005f58:	cccccccd 	.word	0xcccccccd
 8005f5c:	40020400 	.word	0x40020400
 8005f60:	40020800 	.word	0x40020800
 8005f64:	1000823f 	.word	0x1000823f
 8005f68:	40020940 	.word	0x40020940
 8005f6c:	bffdfff8 	.word	0xbffdfff8
 8005f70:	40020000 	.word	0x40020000
 8005f74:	40020820 	.word	0x40020820
 8005f78:	40020880 	.word	0x40020880

08005f7c <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f000 80d8 	beq.w	8006132 <HAL_FDCAN_Init+0x1b6>
{
 8005f82:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005f84:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005f88:	4604      	mov	r4, r0
 8005f8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d071      	beq.n	8006076 <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005f92:	6822      	ldr	r2, [r4, #0]
 8005f94:	6993      	ldr	r3, [r2, #24]
 8005f96:	f023 0310 	bic.w	r3, r3, #16
 8005f9a:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f9c:	f7fe ff3e 	bl	8004e1c <HAL_GetTick>
 8005fa0:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005fa2:	e004      	b.n	8005fae <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005fa4:	f7fe ff3a 	bl	8004e1c <HAL_GetTick>
 8005fa8:	1b43      	subs	r3, r0, r5
 8005faa:	2b0a      	cmp	r3, #10
 8005fac:	d85a      	bhi.n	8006064 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	699a      	ldr	r2, [r3, #24]
 8005fb2:	0711      	lsls	r1, r2, #28
 8005fb4:	d4f6      	bmi.n	8005fa4 <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005fb6:	699a      	ldr	r2, [r3, #24]
 8005fb8:	f042 0201 	orr.w	r2, r2, #1
 8005fbc:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fbe:	f7fe ff2d 	bl	8004e1c <HAL_GetTick>
 8005fc2:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005fc4:	e004      	b.n	8005fd0 <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005fc6:	f7fe ff29 	bl	8004e1c <HAL_GetTick>
 8005fca:	1b40      	subs	r0, r0, r5
 8005fcc:	280a      	cmp	r0, #10
 8005fce:	d849      	bhi.n	8006064 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	07d2      	lsls	r2, r2, #31
 8005fd6:	d5f6      	bpl.n	8005fc6 <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005fd8:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005fda:	4959      	ldr	r1, [pc, #356]	; (8006140 <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005fdc:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8005fe0:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005fe2:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8005fe4:	f000 80a1 	beq.w	800612a <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005fe8:	7c22      	ldrb	r2, [r4, #16]
 8005fea:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	bf0c      	ite	eq
 8005ff0:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005ff4:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8005ff8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005ffa:	7c62      	ldrb	r2, [r4, #17]
 8005ffc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	bf0c      	ite	eq
 8006002:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006006:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 800600a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800600c:	7ca2      	ldrb	r2, [r4, #18]
 800600e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	bf0c      	ite	eq
 8006014:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006018:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800601c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800601e:	699a      	ldr	r2, [r3, #24]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006020:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006024:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006028:	432a      	orrs	r2, r5
 800602a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800602c:	699a      	ldr	r2, [r3, #24]
 800602e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006032:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006034:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006036:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006038:	f022 0210 	bic.w	r2, r2, #16
 800603c:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800603e:	d01f      	beq.n	8006080 <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006040:	b311      	cbz	r1, 8006088 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006042:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006044:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006046:	d076      	beq.n	8006136 <HAL_FDCAN_Init+0x1ba>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006048:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800604c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800604e:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006050:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006052:	f042 0210 	orr.w	r2, r2, #16
 8006056:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006058:	d116      	bne.n	8006088 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800605a:	699a      	ldr	r2, [r3, #24]
 800605c:	f042 0220 	orr.w	r2, r2, #32
 8006060:	619a      	str	r2, [r3, #24]
 8006062:	e011      	b.n	8006088 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006064:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006066:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006068:	f043 0301 	orr.w	r3, r3, #1
 800606c:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800606e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006072:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006074:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006076:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 800607a:	f7fe fb27 	bl	80046cc <HAL_FDCAN_MspInit>
 800607e:	e788      	b.n	8005f92 <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	f042 0204 	orr.w	r2, r2, #4
 8006086:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006088:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800608c:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800608e:	6a20      	ldr	r0, [r4, #32]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006090:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006092:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006094:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006098:	6961      	ldr	r1, [r4, #20]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800609a:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800609c:	4302      	orrs	r2, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800609e:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80060a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80060a4:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060a8:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80060aa:	d10e      	bne.n	80060ca <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80060ac:	e9d4 520b 	ldrd	r5, r2, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80060b0:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80060b4:	3a01      	subs	r2, #1
 80060b6:	0112      	lsls	r2, r2, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80060b8:	3d01      	subs	r5, #1
 80060ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80060be:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80060c0:	4302      	orrs	r2, r0
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80060c2:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80060c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80060c8:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80060ca:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80060ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80060d0:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80060d2:	481c      	ldr	r0, [pc, #112]	; (8006144 <HAL_FDCAN_Init+0x1c8>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80060d4:	4311      	orrs	r1, r2
 80060d6:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80060da:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80060de:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80060e0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80060e4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80060e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80060ec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80060f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80060f2:	4d15      	ldr	r5, [pc, #84]	; (8006148 <HAL_FDCAN_Init+0x1cc>)
 80060f4:	6465      	str	r5, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80060f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80060fa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80060fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006102:	4912      	ldr	r1, [pc, #72]	; (800614c <HAL_FDCAN_Init+0x1d0>)

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006104:	4b12      	ldr	r3, [pc, #72]	; (8006150 <HAL_FDCAN_Init+0x1d4>)
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006106:	4a13      	ldr	r2, [pc, #76]	; (8006154 <HAL_FDCAN_Init+0x1d8>)
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006108:	3540      	adds	r5, #64	; 0x40
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800610a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800610e:	e9c4 5112 	strd	r5, r1, [r4, #72]	; 0x48

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006112:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006116:	2100      	movs	r1, #0
 8006118:	f004 fd9e 	bl	800ac58 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 800611c:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800611e:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006120:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006122:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8006126:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8006128:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800612a:	4a0b      	ldr	r2, [pc, #44]	; (8006158 <HAL_FDCAN_Init+0x1dc>)
 800612c:	6861      	ldr	r1, [r4, #4]
 800612e:	6011      	str	r1, [r2, #0]
 8006130:	e75a      	b.n	8005fe8 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 8006132:	2001      	movs	r0, #1
}
 8006134:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006136:	f042 0220 	orr.w	r2, r2, #32
 800613a:	619a      	str	r2, [r3, #24]
 800613c:	e7a4      	b.n	8006088 <HAL_FDCAN_Init+0x10c>
 800613e:	bf00      	nop
 8006140:	40006400 	.word	0x40006400
 8006144:	4000a400 	.word	0x4000a400
 8006148:	4000a470 	.word	0x4000a470
 800614c:	4000a588 	.word	0x4000a588
 8006150:	4000a678 	.word	0x4000a678
 8006154:	4000a660 	.word	0x4000a660
 8006158:	40006500 	.word	0x40006500

0800615c <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800615c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8006160:	2a01      	cmp	r2, #1
{
 8006162:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006164:	d005      	beq.n	8006172 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006166:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006168:	f042 0204 	orr.w	r2, r2, #4
 800616c:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 800616e:	2001      	movs	r0, #1
}
 8006170:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006172:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006174:	2202      	movs	r2, #2
 8006176:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800617a:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800617c:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800617e:	f022 0201 	bic.w	r2, r2, #1
 8006182:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8006184:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006186:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop

0800618c <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 800618c:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800618e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8006192:	2802      	cmp	r0, #2
 8006194:	d10e      	bne.n	80061b4 <HAL_FDCAN_AddMessageToTxFifoQ+0x28>
{
 8006196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800619a:	681d      	ldr	r5, [r3, #0]
 800619c:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 80061a0:	f410 1000 	ands.w	r0, r0, #2097152	; 0x200000
 80061a4:	d00c      	beq.n	80061c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80061a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80061a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80061ae:	2001      	movs	r0, #1
}
 80061b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80061b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80061b6:	f042 0208 	orr.w	r2, r2, #8
 80061ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_ERROR;
 80061bc:	2001      	movs	r0, #1
}
 80061be:	4770      	bx	lr
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80061c0:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80061c4:	684c      	ldr	r4, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80061c6:	f3c6 4c01 	ubfx	ip, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80061ca:	2c00      	cmp	r4, #0
 80061cc:	d13c      	bne.n	8006248 <HAL_FDCAN_AddMessageToTxFifoQ+0xbc>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 80061ce:	690c      	ldr	r4, [r1, #16]
 80061d0:	688f      	ldr	r7, [r1, #8]
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 80061d2:	680e      	ldr	r6, [r1, #0]
                   FDCAN_STANDARD_ID |
 80061d4:	433c      	orrs	r4, r7
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80061d6:	ea44 4886 	orr.w	r8, r4, r6, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80061da:	e9d1 7406 	ldrd	r7, r4, [r1, #24]
 80061de:	694e      	ldr	r6, [r1, #20]
 80061e0:	433c      	orrs	r4, r7
 80061e2:	4334      	orrs	r4, r6
 80061e4:	68ce      	ldr	r6, [r1, #12]
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80061e6:	6d5f      	ldr	r7, [r3, #84]	; 0x54
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80061e8:	ea44 0e06 	orr.w	lr, r4, r6
 80061ec:	6a0c      	ldr	r4, [r1, #32]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80061ee:	eb0c 06cc 	add.w	r6, ip, ip, lsl #3
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80061f2:	ea4e 6404 	orr.w	r4, lr, r4, lsl #24
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80061f6:	eb07 0ec6 	add.w	lr, r7, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80061fa:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
  TxAddress++;
  *TxAddress = TxElementW2;
 80061fe:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006202:	89cc      	ldrh	r4, [r1, #14]
 8006204:	4e14      	ldr	r6, [pc, #80]	; (8006258 <HAL_FDCAN_AddMessageToTxFifoQ+0xcc>)
 8006206:	5d34      	ldrb	r4, [r6, r4]
 8006208:	b1ac      	cbz	r4, 8006236 <HAL_FDCAN_AddMessageToTxFifoQ+0xaa>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800620a:	7894      	ldrb	r4, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800620c:	f892 8003 	ldrb.w	r8, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8006210:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006212:	0424      	lsls	r4, r4, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006214:	ea44 6408 	orr.w	r4, r4, r8, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006218:	f892 8001 	ldrb.w	r8, [r2, #1]
 800621c:	433c      	orrs	r4, r7
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800621e:	eb00 070e 	add.w	r7, r0, lr
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006222:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006226:	60bc      	str	r4, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006228:	89cc      	ldrh	r4, [r1, #14]
 800622a:	5d34      	ldrb	r4, [r6, r4]
 800622c:	3004      	adds	r0, #4
 800622e:	42a0      	cmp	r0, r4
 8006230:	f102 0204 	add.w	r2, r2, #4
 8006234:	d3e9      	bcc.n	800620a <HAL_FDCAN_AddMessageToTxFifoQ+0x7e>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006236:	2201      	movs	r2, #1
 8006238:	fa02 f20c 	lsl.w	r2, r2, ip
 800623c:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
    return HAL_OK;
 8006240:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006242:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                   pTxHeader->TxFrameType |
 8006248:	690c      	ldr	r4, [r1, #16]
 800624a:	680f      	ldr	r7, [r1, #0]
 800624c:	688e      	ldr	r6, [r1, #8]
 800624e:	433c      	orrs	r4, r7
 8006250:	4326      	orrs	r6, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006252:	f046 4880 	orr.w	r8, r6, #1073741824	; 0x40000000
 8006256:	e7c0      	b.n	80061da <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8006258:	0800af04 	.word	0x0800af04

0800625c <HAL_FDCAN_GetRxMessage>:
{
 800625c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800625e:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8006262:	2c02      	cmp	r4, #2
 8006264:	d10c      	bne.n	8006280 <HAL_FDCAN_GetRxMessage+0x24>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006266:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006268:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800626a:	d00f      	beq.n	800628c <HAL_FDCAN_GetRxMessage+0x30>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800626c:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
 8006270:	0724      	lsls	r4, r4, #28
 8006272:	d15c      	bne.n	800632e <HAL_FDCAN_GetRxMessage+0xd2>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006274:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627a:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 800627c:	2001      	movs	r0, #1
}
 800627e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006280:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006282:	f043 0308 	orr.w	r3, r3, #8
 8006286:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006288:	2001      	movs	r0, #1
}
 800628a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800628c:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
 8006290:	0725      	lsls	r5, r4, #28
 8006292:	d0ef      	beq.n	8006274 <HAL_FDCAN_GetRxMessage+0x18>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006294:	f8d6 4090 	ldr.w	r4, [r6, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006298:	6c87      	ldr	r7, [r0, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800629a:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800629e:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 80062a2:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80062a6:	683c      	ldr	r4, [r7, #0]
 80062a8:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 80062ac:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80062ae:	2c00      	cmp	r4, #0
 80062b0:	d14c      	bne.n	800634c <HAL_FDCAN_GetRxMessage+0xf0>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80062b2:	683c      	ldr	r4, [r7, #0]
 80062b4:	f3c4 448a 	ubfx	r4, r4, #18, #11
 80062b8:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80062ba:	683c      	ldr	r4, [r7, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80062bc:	f8df c094 	ldr.w	ip, [pc, #148]	; 8006354 <HAL_FDCAN_GetRxMessage+0xf8>
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80062c0:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 80062c4:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80062c6:	683c      	ldr	r4, [r7, #0]
 80062c8:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80062cc:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80062ce:	88bc      	ldrh	r4, [r7, #4]
 80062d0:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80062d2:	687c      	ldr	r4, [r7, #4]
 80062d4:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 80062d8:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80062da:	687d      	ldr	r5, [r7, #4]
 80062dc:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 80062e0:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80062e2:	687d      	ldr	r5, [r7, #4]
 80062e4:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 80062e8:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80062ea:	79fd      	ldrb	r5, [r7, #7]
 80062ec:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80062f0:	0c24      	lsrs	r4, r4, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80062f2:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80062f4:	687d      	ldr	r5, [r7, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80062f6:	f81c 4004 	ldrb.w	r4, [ip, r4]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80062fa:	0fed      	lsrs	r5, r5, #31
 80062fc:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80062fe:	b174      	cbz	r4, 800631e <HAL_FDCAN_GetRxMessage+0xc2>
 8006300:	1e5d      	subs	r5, r3, #1
 8006302:	1dfc      	adds	r4, r7, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8006304:	4623      	mov	r3, r4
 8006306:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800630a:	f805 6f01 	strb.w	r6, [r5, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800630e:	89d6      	ldrh	r6, [r2, #14]
 8006310:	3b06      	subs	r3, #6
 8006312:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8006316:	1bdb      	subs	r3, r3, r7
 8006318:	429e      	cmp	r6, r3
 800631a:	d8f3      	bhi.n	8006304 <HAL_FDCAN_GetRxMessage+0xa8>
 800631c:	6806      	ldr	r6, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800631e:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8006320:	bf0c      	ite	eq
 8006322:	f8c6 e094 	streq.w	lr, [r6, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8006326:	f8c6 e09c 	strne.w	lr, [r6, #156]	; 0x9c
    return HAL_OK;
 800632a:	2000      	movs	r0, #0
}
 800632c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800632e:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006332:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006334:	f3c4 2e01 	ubfx	lr, r4, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006338:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800633c:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006340:	683c      	ldr	r4, [r7, #0]
 8006342:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8006346:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006348:	2c00      	cmp	r4, #0
 800634a:	d0b2      	beq.n	80062b2 <HAL_FDCAN_GetRxMessage+0x56>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800634c:	683c      	ldr	r4, [r7, #0]
 800634e:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 8006352:	e7b1      	b.n	80062b8 <HAL_FDCAN_GetRxMessage+0x5c>
 8006354:	0800af04 	.word	0x0800af04

08006358 <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006358:	6803      	ldr	r3, [r0, #0]
 800635a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 800635e:	f000 0007 	and.w	r0, r0, #7
 8006362:	4770      	bx	lr

08006364 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006364:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006368:	3b01      	subs	r3, #1
 800636a:	2b01      	cmp	r3, #1
 800636c:	d905      	bls.n	800637a <HAL_FDCAN_ActivateNotification+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800636e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006370:	f043 0302 	orr.w	r3, r3, #2
 8006374:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006376:	2001      	movs	r0, #1
}
 8006378:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 800637a:	6803      	ldr	r3, [r0, #0]
{
 800637c:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800637e:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006382:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006384:	d03d      	beq.n	8006402 <HAL_FDCAN_ActivateNotification+0x9e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006386:	07c4      	lsls	r4, r0, #31
 8006388:	d43b      	bmi.n	8006402 <HAL_FDCAN_ActivateNotification+0x9e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800638a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800638c:	f044 0401 	orr.w	r4, r4, #1
 8006390:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006392:	b1cd      	cbz	r5, 80063c8 <HAL_FDCAN_ActivateNotification+0x64>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006394:	07c5      	lsls	r5, r0, #31
 8006396:	d517      	bpl.n	80063c8 <HAL_FDCAN_ActivateNotification+0x64>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006398:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800639a:	f040 0002 	orr.w	r0, r0, #2
 800639e:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80063a0:	060c      	lsls	r4, r1, #24
 80063a2:	d504      	bpl.n	80063ae <HAL_FDCAN_ActivateNotification+0x4a>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80063a4:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 80063a8:	4310      	orrs	r0, r2
 80063aa:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80063ae:	05c8      	lsls	r0, r1, #23
 80063b0:	d504      	bpl.n	80063bc <HAL_FDCAN_ActivateNotification+0x58>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80063b2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80063b6:	4302      	orrs	r2, r0
 80063b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80063bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063be:	4311      	orrs	r1, r2
    return HAL_OK;
 80063c0:	2000      	movs	r0, #0
}
 80063c2:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80063c4:	6559      	str	r1, [r3, #84]	; 0x54
}
 80063c6:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80063c8:	f011 0f38 	tst.w	r1, #56	; 0x38
 80063cc:	d001      	beq.n	80063d2 <HAL_FDCAN_ActivateNotification+0x6e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80063ce:	0784      	lsls	r4, r0, #30
 80063d0:	d4e2      	bmi.n	8006398 <HAL_FDCAN_ActivateNotification+0x34>
 80063d2:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 80063d6:	d131      	bne.n	800643c <HAL_FDCAN_ActivateNotification+0xd8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80063d8:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 80063dc:	d001      	beq.n	80063e2 <HAL_FDCAN_ActivateNotification+0x7e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80063de:	0704      	lsls	r4, r0, #28
 80063e0:	d4da      	bmi.n	8006398 <HAL_FDCAN_ActivateNotification+0x34>
 80063e2:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80063e6:	d001      	beq.n	80063ec <HAL_FDCAN_ActivateNotification+0x88>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80063e8:	06c5      	lsls	r5, r0, #27
 80063ea:	d4d5      	bmi.n	8006398 <HAL_FDCAN_ActivateNotification+0x34>
 80063ec:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 80063f0:	d001      	beq.n	80063f6 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80063f2:	0684      	lsls	r4, r0, #26
 80063f4:	d4d0      	bmi.n	8006398 <HAL_FDCAN_ActivateNotification+0x34>
 80063f6:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 80063fa:	d0d1      	beq.n	80063a0 <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80063fc:	0645      	lsls	r5, r0, #25
 80063fe:	d5cf      	bpl.n	80063a0 <HAL_FDCAN_ActivateNotification+0x3c>
 8006400:	e7ca      	b.n	8006398 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006402:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006406:	d001      	beq.n	800640c <HAL_FDCAN_ActivateNotification+0xa8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006408:	0784      	lsls	r4, r0, #30
 800640a:	d5be      	bpl.n	800638a <HAL_FDCAN_ActivateNotification+0x26>
 800640c:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006410:	d117      	bne.n	8006442 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006412:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006416:	d001      	beq.n	800641c <HAL_FDCAN_ActivateNotification+0xb8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006418:	0704      	lsls	r4, r0, #28
 800641a:	d5b6      	bpl.n	800638a <HAL_FDCAN_ActivateNotification+0x26>
 800641c:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006420:	d001      	beq.n	8006426 <HAL_FDCAN_ActivateNotification+0xc2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006422:	06c4      	lsls	r4, r0, #27
 8006424:	d5b1      	bpl.n	800638a <HAL_FDCAN_ActivateNotification+0x26>
 8006426:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 800642a:	d001      	beq.n	8006430 <HAL_FDCAN_ActivateNotification+0xcc>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800642c:	0684      	lsls	r4, r0, #26
 800642e:	d5ac      	bpl.n	800638a <HAL_FDCAN_ActivateNotification+0x26>
 8006430:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006434:	d0ad      	beq.n	8006392 <HAL_FDCAN_ActivateNotification+0x2e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006436:	0644      	lsls	r4, r0, #25
 8006438:	d4ab      	bmi.n	8006392 <HAL_FDCAN_ActivateNotification+0x2e>
 800643a:	e7a6      	b.n	800638a <HAL_FDCAN_ActivateNotification+0x26>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800643c:	0745      	lsls	r5, r0, #29
 800643e:	d4ab      	bmi.n	8006398 <HAL_FDCAN_ActivateNotification+0x34>
 8006440:	e7ca      	b.n	80063d8 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006442:	0744      	lsls	r4, r0, #29
 8006444:	d5a1      	bpl.n	800638a <HAL_FDCAN_ActivateNotification+0x26>
 8006446:	e7e4      	b.n	8006412 <HAL_FDCAN_ActivateNotification+0xae>

08006448 <HAL_FDCAN_TxEventFifoCallback>:
}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop

0800644c <HAL_FDCAN_RxFifo1Callback>:
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop

08006450 <HAL_FDCAN_TxFifoEmptyCallback>:
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop

08006454 <HAL_FDCAN_TxBufferCompleteCallback>:
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop

08006458 <HAL_FDCAN_TxBufferAbortCallback>:
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop

0800645c <HAL_FDCAN_TimestampWraparoundCallback>:
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop

08006460 <HAL_FDCAN_TimeoutOccurredCallback>:
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop

08006464 <HAL_FDCAN_HighPriorityMessageCallback>:
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop

08006468 <HAL_FDCAN_ErrorCallback>:
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop

0800646c <HAL_FDCAN_ErrorStatusCallback>:
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop

08006470 <HAL_FDCAN_IRQHandler>:
{
 8006470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006474:	6803      	ldr	r3, [r0, #0]
 8006476:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800647a:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800647e:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006482:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006484:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006486:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006488:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 800648a:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800648e:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006490:	ea08 0801 	and.w	r8, r8, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006494:	4017      	ands	r7, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006496:	6d59      	ldr	r1, [r3, #84]	; 0x54
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800649a:	ea09 090e 	and.w	r9, r9, lr
  Errors &= hfdcan->Instance->IE;
 800649e:	ea05 050c 	and.w	r5, r5, ip
  ErrorStatusITs &= hfdcan->Instance->IE;
 80064a2:	400e      	ands	r6, r1
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80064a4:	0652      	lsls	r2, r2, #25
{
 80064a6:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 80064a8:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 80064ac:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 80064b0:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 80064b4:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 80064b8:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80064bc:	d502      	bpl.n	80064c4 <HAL_FDCAN_IRQHandler+0x54>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80064be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064c0:	0651      	lsls	r1, r2, #25
 80064c2:	d473      	bmi.n	80065ac <HAL_FDCAN_IRQHandler+0x13c>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80064c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064c6:	05d2      	lsls	r2, r2, #23
 80064c8:	d502      	bpl.n	80064d0 <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80064ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064cc:	05d0      	lsls	r0, r2, #23
 80064ce:	d45d      	bmi.n	800658c <HAL_FDCAN_IRQHandler+0x11c>
  if (TxEventFifoITs != 0U)
 80064d0:	f1b9 0f00 	cmp.w	r9, #0
 80064d4:	d14a      	bne.n	800656c <HAL_FDCAN_IRQHandler+0xfc>
  if (RxFifo0ITs != 0U)
 80064d6:	f1b8 0f00 	cmp.w	r8, #0
 80064da:	d137      	bne.n	800654c <HAL_FDCAN_IRQHandler+0xdc>
  if (RxFifo1ITs != 0U)
 80064dc:	2f00      	cmp	r7, #0
 80064de:	d13e      	bne.n	800655e <HAL_FDCAN_IRQHandler+0xee>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80064e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064e2:	0591      	lsls	r1, r2, #22
 80064e4:	d502      	bpl.n	80064ec <HAL_FDCAN_IRQHandler+0x7c>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80064e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064e8:	0592      	lsls	r2, r2, #22
 80064ea:	d475      	bmi.n	80065d8 <HAL_FDCAN_IRQHandler+0x168>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80064ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064ee:	0617      	lsls	r7, r2, #24
 80064f0:	d502      	bpl.n	80064f8 <HAL_FDCAN_IRQHandler+0x88>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80064f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064f4:	0610      	lsls	r0, r2, #24
 80064f6:	d477      	bmi.n	80065e8 <HAL_FDCAN_IRQHandler+0x178>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80064f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064fa:	0491      	lsls	r1, r2, #18
 80064fc:	d502      	bpl.n	8006504 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80064fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006500:	0492      	lsls	r2, r2, #18
 8006502:	d459      	bmi.n	80065b8 <HAL_FDCAN_IRQHandler+0x148>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006506:	0417      	lsls	r7, r2, #16
 8006508:	d502      	bpl.n	8006510 <HAL_FDCAN_IRQHandler+0xa0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800650a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800650c:	0410      	lsls	r0, r2, #16
 800650e:	d45b      	bmi.n	80065c8 <HAL_FDCAN_IRQHandler+0x158>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006512:	0451      	lsls	r1, r2, #17
 8006514:	d509      	bpl.n	800652a <HAL_FDCAN_IRQHandler+0xba>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006516:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006518:	0452      	lsls	r2, r2, #17
 800651a:	d506      	bpl.n	800652a <HAL_FDCAN_IRQHandler+0xba>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800651c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006520:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006522:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006524:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006528:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 800652a:	b94e      	cbnz	r6, 8006540 <HAL_FDCAN_IRQHandler+0xd0>
  if (Errors != 0U)
 800652c:	b125      	cbz	r5, 8006538 <HAL_FDCAN_IRQHandler+0xc8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8006532:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006534:	431d      	orrs	r5, r3
 8006536:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006538:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800653a:	bb13      	cbnz	r3, 8006582 <HAL_FDCAN_IRQHandler+0x112>
}
 800653c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006540:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006542:	4631      	mov	r1, r6
 8006544:	4620      	mov	r0, r4
 8006546:	f7ff ff91 	bl	800646c <HAL_FDCAN_ErrorStatusCallback>
 800654a:	e7ef      	b.n	800652c <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800654c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006550:	4641      	mov	r1, r8
 8006552:	4620      	mov	r0, r4
 8006554:	f7fa fee6 	bl	8001324 <HAL_FDCAN_RxFifo0Callback>
 8006558:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 800655a:	2f00      	cmp	r7, #0
 800655c:	d0c0      	beq.n	80064e0 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800655e:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006560:	4639      	mov	r1, r7
 8006562:	4620      	mov	r0, r4
 8006564:	f7ff ff72 	bl	800644c <HAL_FDCAN_RxFifo1Callback>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	e7b9      	b.n	80064e0 <HAL_FDCAN_IRQHandler+0x70>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800656c:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006570:	4649      	mov	r1, r9
 8006572:	4620      	mov	r0, r4
 8006574:	f7ff ff68 	bl	8006448 <HAL_FDCAN_TxEventFifoCallback>
 8006578:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 800657a:	f1b8 0f00 	cmp.w	r8, #0
 800657e:	d0ad      	beq.n	80064dc <HAL_FDCAN_IRQHandler+0x6c>
 8006580:	e7e4      	b.n	800654c <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006582:	4620      	mov	r0, r4
 8006584:	f7ff ff70 	bl	8006468 <HAL_FDCAN_ErrorCallback>
}
 8006588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800658c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006590:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006594:	f44f 7280 	mov.w	r2, #256	; 0x100
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006598:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800659a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800659c:	4620      	mov	r0, r4
 800659e:	f7ff ff5b 	bl	8006458 <HAL_FDCAN_TxBufferAbortCallback>
 80065a2:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 80065a4:	f1b9 0f00 	cmp.w	r9, #0
 80065a8:	d095      	beq.n	80064d6 <HAL_FDCAN_IRQHandler+0x66>
 80065aa:	e7df      	b.n	800656c <HAL_FDCAN_IRQHandler+0xfc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80065ac:	2240      	movs	r2, #64	; 0x40
 80065ae:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80065b0:	f7ff ff58 	bl	8006464 <HAL_FDCAN_HighPriorityMessageCallback>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	e785      	b.n	80064c4 <HAL_FDCAN_IRQHandler+0x54>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80065b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065bc:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80065be:	4620      	mov	r0, r4
 80065c0:	f7ff ff4c 	bl	800645c <HAL_FDCAN_TimestampWraparoundCallback>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	e79d      	b.n	8006504 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80065c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80065cc:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80065ce:	4620      	mov	r0, r4
 80065d0:	f7ff ff46 	bl	8006460 <HAL_FDCAN_TimeoutOccurredCallback>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	e79b      	b.n	8006510 <HAL_FDCAN_IRQHandler+0xa0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80065d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065dc:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80065de:	4620      	mov	r0, r4
 80065e0:	f7ff ff36 	bl	8006450 <HAL_FDCAN_TxFifoEmptyCallback>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	e781      	b.n	80064ec <HAL_FDCAN_IRQHandler+0x7c>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80065e8:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80065ec:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80065f0:	2280      	movs	r2, #128	; 0x80
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80065f2:	4001      	ands	r1, r0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80065f4:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80065f6:	4620      	mov	r0, r4
 80065f8:	f7ff ff2c 	bl	8006454 <HAL_FDCAN_TxBufferCompleteCallback>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	e77b      	b.n	80064f8 <HAL_FDCAN_IRQHandler+0x88>

08006600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006604:	680e      	ldr	r6, [r1, #0]
{
 8006606:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006608:	2e00      	cmp	r6, #0
 800660a:	f000 808b 	beq.w	8006724 <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800660e:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 80067e4 <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 8006612:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006614:	2201      	movs	r2, #1
 8006616:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 800661a:	ea14 0c06 	ands.w	ip, r4, r6
 800661e:	d07c      	beq.n	800671a <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006620:	684d      	ldr	r5, [r1, #4]
 8006622:	f025 0a10 	bic.w	sl, r5, #16
 8006626:	f10a 32ff 	add.w	r2, sl, #4294967295
 800662a:	2a01      	cmp	r2, #1
 800662c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006630:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006634:	d979      	bls.n	800672a <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 8006636:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006638:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800663a:	fa02 f208 	lsl.w	r2, r2, r8
 800663e:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006642:	fa04 f408 	lsl.w	r4, r4, r8
 8006646:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8006648:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800664a:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 800664c:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800664e:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006652:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006654:	fa02 f208 	lsl.w	r2, r2, r8
 8006658:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800665a:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 800665c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800665e:	d55c      	bpl.n	800671a <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006660:	4c5a      	ldr	r4, [pc, #360]	; (80067cc <HAL_GPIO_Init+0x1cc>)
 8006662:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006664:	f042 0201 	orr.w	r2, r2, #1
 8006668:	6622      	str	r2, [r4, #96]	; 0x60
 800666a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800666c:	f023 0403 	bic.w	r4, r3, #3
 8006670:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006674:	f002 0201 	and.w	r2, r2, #1
 8006678:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800667c:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800667e:	f003 0203 	and.w	r2, r3, #3
 8006682:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006686:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006688:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800668a:	220f      	movs	r2, #15
 800668c:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006690:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006694:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006698:	d018      	beq.n	80066cc <HAL_GPIO_Init+0xcc>
 800669a:	4a4d      	ldr	r2, [pc, #308]	; (80067d0 <HAL_GPIO_Init+0x1d0>)
 800669c:	4290      	cmp	r0, r2
 800669e:	f000 8084 	beq.w	80067aa <HAL_GPIO_Init+0x1aa>
 80066a2:	4a4c      	ldr	r2, [pc, #304]	; (80067d4 <HAL_GPIO_Init+0x1d4>)
 80066a4:	4290      	cmp	r0, r2
 80066a6:	f000 8085 	beq.w	80067b4 <HAL_GPIO_Init+0x1b4>
 80066aa:	4a4b      	ldr	r2, [pc, #300]	; (80067d8 <HAL_GPIO_Init+0x1d8>)
 80066ac:	4290      	cmp	r0, r2
 80066ae:	d076      	beq.n	800679e <HAL_GPIO_Init+0x19e>
 80066b0:	4a4a      	ldr	r2, [pc, #296]	; (80067dc <HAL_GPIO_Init+0x1dc>)
 80066b2:	4290      	cmp	r0, r2
 80066b4:	f000 8084 	beq.w	80067c0 <HAL_GPIO_Init+0x1c0>
 80066b8:	4a49      	ldr	r2, [pc, #292]	; (80067e0 <HAL_GPIO_Init+0x1e0>)
 80066ba:	4290      	cmp	r0, r2
 80066bc:	bf0c      	ite	eq
 80066be:	f04f 0805 	moveq.w	r8, #5
 80066c2:	f04f 0806 	movne.w	r8, #6
 80066c6:	fa08 f209 	lsl.w	r2, r8, r9
 80066ca:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066cc:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 80066ce:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 80066d2:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80066d6:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 80066d8:	bf54      	ite	pl
 80066da:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80066dc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 80066e0:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 80066e4:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80066e8:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 80066ea:	bf54      	ite	pl
 80066ec:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80066ee:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 80066f2:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066f6:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80066fa:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 80066fc:	bf54      	ite	pl
 80066fe:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8006700:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 8006704:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8006708:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800670c:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 800670e:	bf54      	ite	pl
 8006710:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8006712:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 8006716:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 800671a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800671c:	fa36 f203 	lsrs.w	r2, r6, r3
 8006720:	f47f af78 	bne.w	8006614 <HAL_GPIO_Init+0x14>
  }
}
 8006724:	b003      	add	sp, #12
 8006726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800672a:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800672c:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006730:	fa02 f208 	lsl.w	r2, r2, r8
 8006734:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006738:	68cf      	ldr	r7, [r1, #12]
 800673a:	fa07 f708 	lsl.w	r7, r7, r8
 800673e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8006742:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006744:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006746:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800674a:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800674e:	465c      	mov	r4, fp
 8006750:	409c      	lsls	r4, r3
 8006752:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8006754:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8006756:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006758:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800675c:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006760:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006764:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006768:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 800676c:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800676e:	f47f af6d 	bne.w	800664c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8006772:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8006776:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800677a:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800677e:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006782:	0092      	lsls	r2, r2, #2
 8006784:	f04f 0a0f 	mov.w	sl, #15
 8006788:	fa0a fb02 	lsl.w	fp, sl, r2
 800678c:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006790:	690c      	ldr	r4, [r1, #16]
 8006792:	4094      	lsls	r4, r2
 8006794:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8006798:	f8c9 4020 	str.w	r4, [r9, #32]
 800679c:	e756      	b.n	800664c <HAL_GPIO_Init+0x4c>
 800679e:	f04f 0803 	mov.w	r8, #3
 80067a2:	fa08 f209 	lsl.w	r2, r8, r9
 80067a6:	4317      	orrs	r7, r2
 80067a8:	e790      	b.n	80066cc <HAL_GPIO_Init+0xcc>
 80067aa:	2201      	movs	r2, #1
 80067ac:	fa02 f209 	lsl.w	r2, r2, r9
 80067b0:	4317      	orrs	r7, r2
 80067b2:	e78b      	b.n	80066cc <HAL_GPIO_Init+0xcc>
 80067b4:	f04f 0802 	mov.w	r8, #2
 80067b8:	fa08 f209 	lsl.w	r2, r8, r9
 80067bc:	4317      	orrs	r7, r2
 80067be:	e785      	b.n	80066cc <HAL_GPIO_Init+0xcc>
 80067c0:	f04f 0804 	mov.w	r8, #4
 80067c4:	fa08 f209 	lsl.w	r2, r8, r9
 80067c8:	4317      	orrs	r7, r2
 80067ca:	e77f      	b.n	80066cc <HAL_GPIO_Init+0xcc>
 80067cc:	40021000 	.word	0x40021000
 80067d0:	48000400 	.word	0x48000400
 80067d4:	48000800 	.word	0x48000800
 80067d8:	48000c00 	.word	0x48000c00
 80067dc:	48001000 	.word	0x48001000
 80067e0:	48001400 	.word	0x48001400
 80067e4:	40010400 	.word	0x40010400

080067e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067e8:	b10a      	cbz	r2, 80067ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067ea:	6181      	str	r1, [r0, #24]
 80067ec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067ee:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop

080067f4 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d07d      	beq.n	80068f4 <HAL_OPAMP_Init+0x100>
{
 80067f8:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80067fa:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80067fe:	2b05      	cmp	r3, #5
{
 8006800:	b082      	sub	sp, #8
 8006802:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8006804:	d057      	beq.n	80068b6 <HAL_OPAMP_Init+0xc2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8006806:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800680a:	2b02      	cmp	r3, #2
 800680c:	d053      	beq.n	80068b6 <HAL_OPAMP_Init+0xc2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800680e:	4b3a      	ldr	r3, [pc, #232]	; (80068f8 <HAL_OPAMP_Init+0x104>)
 8006810:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	661a      	str	r2, [r3, #96]	; 0x60
 8006818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8006822:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8006826:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800682a:	b90b      	cbnz	r3, 8006830 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800682c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8006830:	4620      	mov	r0, r4
 8006832:	f7fd ffa9 	bl	8004788 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006836:	68a3      	ldr	r3, [r4, #8]
 8006838:	f023 0220 	bic.w	r2, r3, #32
 800683c:	2a40      	cmp	r2, #64	; 0x40
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800683e:	6822      	ldr	r2, [r4, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8006840:	d03c      	beq.n	80068bc <HAL_OPAMP_Init+0xc8>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8006842:	6860      	ldr	r0, [r4, #4]
 8006844:	68e6      	ldr	r6, [r4, #12]
 8006846:	6811      	ldr	r1, [r2, #0]
 8006848:	6925      	ldr	r5, [r4, #16]
 800684a:	4303      	orrs	r3, r0
 800684c:	4333      	orrs	r3, r6
 800684e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8006850:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006852:	432b      	orrs	r3, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8006854:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8006858:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 800685a:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 800685c:	4333      	orrs	r3, r6
 800685e:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	; 0x30
      MODIFY_REG(hopamp->Instance->CSR,
 8006862:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8006864:	432b      	orrs	r3, r5
 8006866:	4925      	ldr	r1, [pc, #148]	; (80068fc <HAL_OPAMP_Init+0x108>)
 8006868:	6815      	ldr	r5, [r2, #0]
 800686a:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800686e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006872:	7d20      	ldrb	r0, [r4, #20]
 8006874:	4029      	ands	r1, r5
 8006876:	2801      	cmp	r0, #1
 8006878:	ea43 0301 	orr.w	r3, r3, r1
 800687c:	bf0c      	ite	eq
 800687e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8006882:	2100      	movne	r1, #0
 8006884:	430b      	orrs	r3, r1
 8006886:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8006888:	6993      	ldr	r3, [r2, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	db09      	blt.n	80068a2 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800688e:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 8006892:	6a20      	ldr	r0, [r4, #32]
 8006894:	6991      	ldr	r1, [r2, #24]
 8006896:	432b      	orrs	r3, r5
 8006898:	4303      	orrs	r3, r0
 800689a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800689e:	430b      	orrs	r3, r1
 80068a0:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80068a2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80068a6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80068aa:	bb03      	cbnz	r3, 80068ee <HAL_OPAMP_Init+0xfa>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80068ac:	2301      	movs	r3, #1
 80068ae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 80068b2:	b002      	add	sp, #8
 80068b4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80068b6:	2001      	movs	r0, #1
}
 80068b8:	b002      	add	sp, #8
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 80068bc:	6866      	ldr	r6, [r4, #4]
 80068be:	6811      	ldr	r1, [r2, #0]
 80068c0:	6920      	ldr	r0, [r4, #16]
 80068c2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80068c4:	4333      	orrs	r3, r6
 80068c6:	4303      	orrs	r3, r0
 80068c8:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 80068cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR,
 80068ce:	4329      	orrs	r1, r5
      MODIFY_REG(hopamp->Instance->CSR,
 80068d0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 80068d2:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 80068d4:	4303      	orrs	r3, r0
 80068d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80068d8:	6816      	ldr	r6, [r2, #0]
 80068da:	4908      	ldr	r1, [pc, #32]	; (80068fc <HAL_OPAMP_Init+0x108>)
 80068dc:	432b      	orrs	r3, r5
 80068de:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80068e0:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 80068e4:	4031      	ands	r1, r6
 80068e6:	7d20      	ldrb	r0, [r4, #20]
 80068e8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80068ec:	e7c3      	b.n	8006876 <HAL_OPAMP_Init+0x82>
    return status;
 80068ee:	2000      	movs	r0, #0
}
 80068f0:	b002      	add	sp, #8
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80068f4:	2001      	movs	r0, #1
}
 80068f6:	4770      	bx	lr
 80068f8:	40021000 	.word	0x40021000
 80068fc:	e0003e11 	.word	0xe0003e11

08006900 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006900:	4a3b      	ldr	r2, [pc, #236]	; (80069f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8006902:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006904:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006906:	b968      	cbnz	r0, 8006924 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800690c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006910:	d014      	beq.n	800693c <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006912:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800691a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 800691e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006922:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006924:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006928:	d02f      	beq.n	800698a <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800692a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800692e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006932:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006934:	2000      	movs	r0, #0
}
 8006936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800693a:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800693c:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006940:	4b2c      	ldr	r3, [pc, #176]	; (80069f4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006942:	482d      	ldr	r0, [pc, #180]	; (80069f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006944:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006948:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800694c:	6811      	ldr	r1, [r2, #0]
 800694e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8006952:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006956:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006958:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800695a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800695c:	2332      	movs	r3, #50	; 0x32
 800695e:	fb03 f304 	mul.w	r3, r3, r4
 8006962:	fba0 0303 	umull	r0, r3, r0, r3
 8006966:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006968:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800696a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800696e:	d506      	bpl.n	800697e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006970:	e000      	b.n	8006974 <HAL_PWREx_ControlVoltageScaling+0x74>
 8006972:	b123      	cbz	r3, 800697e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8006974:	6951      	ldr	r1, [r2, #20]
 8006976:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8006978:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800697c:	d4f9      	bmi.n	8006972 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800697e:	4b1c      	ldr	r3, [pc, #112]	; (80069f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	055c      	lsls	r4, r3, #21
 8006984:	d5d6      	bpl.n	8006934 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8006986:	2003      	movs	r0, #3
 8006988:	e7c9      	b.n	800691e <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800698a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800698e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006992:	d009      	beq.n	80069a8 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006994:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8006998:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800699c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80069a0:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80069a6:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069a8:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069ac:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80069ae:	4812      	ldr	r0, [pc, #72]	; (80069f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069b0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80069b4:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069b8:	6811      	ldr	r1, [r2, #0]
 80069ba:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80069be:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80069c2:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069c4:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069c6:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069c8:	2332      	movs	r3, #50	; 0x32
 80069ca:	fb03 f304 	mul.w	r3, r3, r4
 80069ce:	fba0 0303 	umull	r0, r3, r0, r3
 80069d2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069d4:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069d6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069da:	d5d0      	bpl.n	800697e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80069dc:	e001      	b.n	80069e2 <HAL_PWREx_ControlVoltageScaling+0xe2>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0cd      	beq.n	800697e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80069e2:	6951      	ldr	r1, [r2, #20]
 80069e4:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80069e6:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069ea:	d5c8      	bpl.n	800697e <HAL_PWREx_ControlVoltageScaling+0x7e>
 80069ec:	e7f7      	b.n	80069de <HAL_PWREx_ControlVoltageScaling+0xde>
 80069ee:	bf00      	nop
 80069f0:	40007000 	.word	0x40007000
 80069f4:	200006a0 	.word	0x200006a0
 80069f8:	431bde83 	.word	0x431bde83

080069fc <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80069fc:	4a02      	ldr	r2, [pc, #8]	; (8006a08 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80069fe:	6893      	ldr	r3, [r2, #8]
 8006a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a04:	6093      	str	r3, [r2, #8]
}
 8006a06:	4770      	bx	lr
 8006a08:	40007000 	.word	0x40007000

08006a0c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	f000 81c3 	beq.w	8006d98 <HAL_RCC_OscConfig+0x38c>
{
 8006a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a16:	6803      	ldr	r3, [r0, #0]
 8006a18:	07d9      	lsls	r1, r3, #31
{
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a1e:	d52d      	bpl.n	8006a7c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a20:	49b5      	ldr	r1, [pc, #724]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
 8006a22:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a24:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a26:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a2a:	2a0c      	cmp	r2, #12
 8006a2c:	f000 810a 	beq.w	8006c44 <HAL_RCC_OscConfig+0x238>
 8006a30:	2a08      	cmp	r2, #8
 8006a32:	f000 810c 	beq.w	8006c4e <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a36:	6863      	ldr	r3, [r4, #4]
 8006a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a3c:	f000 8133 	beq.w	8006ca6 <HAL_RCC_OscConfig+0x29a>
 8006a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a44:	f000 819b 	beq.w	8006d7e <HAL_RCC_OscConfig+0x372>
 8006a48:	4dab      	ldr	r5, [pc, #684]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
 8006a4a:	682a      	ldr	r2, [r5, #0]
 8006a4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a50:	602a      	str	r2, [r5, #0]
 8006a52:	682a      	ldr	r2, [r5, #0]
 8006a54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a58:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f040 8128 	bne.w	8006cb0 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a60:	f7fe f9dc 	bl	8004e1c <HAL_GetTick>
 8006a64:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a66:	e005      	b.n	8006a74 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a68:	f7fe f9d8 	bl	8004e1c <HAL_GetTick>
 8006a6c:	1b80      	subs	r0, r0, r6
 8006a6e:	2864      	cmp	r0, #100	; 0x64
 8006a70:	f200 813b 	bhi.w	8006cea <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	039f      	lsls	r7, r3, #14
 8006a78:	d4f6      	bmi.n	8006a68 <HAL_RCC_OscConfig+0x5c>
 8006a7a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a7c:	079e      	lsls	r6, r3, #30
 8006a7e:	d528      	bpl.n	8006ad2 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a80:	4a9d      	ldr	r2, [pc, #628]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
 8006a82:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a84:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a86:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a8a:	2b0c      	cmp	r3, #12
 8006a8c:	f000 80ec 	beq.w	8006c68 <HAL_RCC_OscConfig+0x25c>
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	f000 80ee 	beq.w	8006c72 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a96:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a98:	4d97      	ldr	r5, [pc, #604]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 8116 	beq.w	8006ccc <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa6:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fe f9b8 	bl	8004e1c <HAL_GetTick>
 8006aac:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006aae:	e005      	b.n	8006abc <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab0:	f7fe f9b4 	bl	8004e1c <HAL_GetTick>
 8006ab4:	1b80      	subs	r0, r0, r6
 8006ab6:	2802      	cmp	r0, #2
 8006ab8:	f200 8117 	bhi.w	8006cea <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	0558      	lsls	r0, r3, #21
 8006ac0:	d5f6      	bpl.n	8006ab0 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac2:	686b      	ldr	r3, [r5, #4]
 8006ac4:	6922      	ldr	r2, [r4, #16]
 8006ac6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006aca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006ace:	606b      	str	r3, [r5, #4]
 8006ad0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ad2:	071a      	lsls	r2, r3, #28
 8006ad4:	d519      	bpl.n	8006b0a <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ad6:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ad8:	4d87      	ldr	r5, [pc, #540]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 809e 	beq.w	8006c1c <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8006ae0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aec:	f7fe f996 	bl	8004e1c <HAL_GetTick>
 8006af0:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006af2:	e005      	b.n	8006b00 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006af4:	f7fe f992 	bl	8004e1c <HAL_GetTick>
 8006af8:	1b80      	subs	r0, r0, r6
 8006afa:	2802      	cmp	r0, #2
 8006afc:	f200 80f5 	bhi.w	8006cea <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b00:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006b04:	079f      	lsls	r7, r3, #30
 8006b06:	d5f5      	bpl.n	8006af4 <HAL_RCC_OscConfig+0xe8>
 8006b08:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b0a:	0759      	lsls	r1, r3, #29
 8006b0c:	d541      	bpl.n	8006b92 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b0e:	4b7a      	ldr	r3, [pc, #488]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
 8006b10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b12:	00d2      	lsls	r2, r2, #3
 8006b14:	f100 80ed 	bmi.w	8006cf2 <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006b1e:	659a      	str	r2, [r3, #88]	; 0x58
 8006b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006b2a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b2c:	4e73      	ldr	r6, [pc, #460]	; (8006cfc <HAL_RCC_OscConfig+0x2f0>)
 8006b2e:	6833      	ldr	r3, [r6, #0]
 8006b30:	05df      	lsls	r7, r3, #23
 8006b32:	f140 8113 	bpl.w	8006d5c <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b36:	68a3      	ldr	r3, [r4, #8]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	f000 80e3 	beq.w	8006d04 <HAL_RCC_OscConfig+0x2f8>
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	f000 8169 	beq.w	8006e16 <HAL_RCC_OscConfig+0x40a>
 8006b44:	4e6c      	ldr	r6, [pc, #432]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
 8006b46:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8006b52:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006b56:	f022 0204 	bic.w	r2, r2, #4
 8006b5a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f040 80d7 	bne.w	8006d12 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b64:	f7fe f95a 	bl	8004e1c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b68:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006b6c:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b6e:	e005      	b.n	8006b7c <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b70:	f7fe f954 	bl	8004e1c <HAL_GetTick>
 8006b74:	1bc0      	subs	r0, r0, r7
 8006b76:	4540      	cmp	r0, r8
 8006b78:	f200 80b7 	bhi.w	8006cea <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b7c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8006b80:	079a      	lsls	r2, r3, #30
 8006b82:	d4f5      	bmi.n	8006b70 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b84:	b125      	cbz	r5, 8006b90 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b86:	4a5c      	ldr	r2, [pc, #368]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
 8006b88:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8006b90:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b92:	069b      	lsls	r3, r3, #26
 8006b94:	d518      	bpl.n	8006bc8 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b96:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b98:	4d57      	ldr	r5, [pc, #348]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 80ca 	beq.w	8006d34 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8006ba0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006ba4:	f043 0301 	orr.w	r3, r3, #1
 8006ba8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bac:	f7fe f936 	bl	8004e1c <HAL_GetTick>
 8006bb0:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bb2:	e005      	b.n	8006bc0 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bb4:	f7fe f932 	bl	8004e1c <HAL_GetTick>
 8006bb8:	1b80      	subs	r0, r0, r6
 8006bba:	2802      	cmp	r0, #2
 8006bbc:	f200 8095 	bhi.w	8006cea <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bc0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006bc4:	079f      	lsls	r7, r3, #30
 8006bc6:	d5f5      	bpl.n	8006bb4 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006bc8:	69e0      	ldr	r0, [r4, #28]
 8006bca:	b318      	cbz	r0, 8006c14 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bcc:	4d4a      	ldr	r5, [pc, #296]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
 8006bce:	68ab      	ldr	r3, [r5, #8]
 8006bd0:	f003 030c 	and.w	r3, r3, #12
 8006bd4:	2b0c      	cmp	r3, #12
 8006bd6:	f000 812c 	beq.w	8006e32 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bda:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006bdc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006be2:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006be4:	f000 80da 	beq.w	8006d9c <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006be8:	68eb      	ldr	r3, [r5, #12]
 8006bea:	f023 0303 	bic.w	r3, r3, #3
 8006bee:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006bf0:	68eb      	ldr	r3, [r5, #12]
 8006bf2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bfa:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfc:	f7fe f90e 	bl	8004e1c <HAL_GetTick>
 8006c00:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c02:	e004      	b.n	8006c0e <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c04:	f7fe f90a 	bl	8004e1c <HAL_GetTick>
 8006c08:	1b00      	subs	r0, r0, r4
 8006c0a:	2802      	cmp	r0, #2
 8006c0c:	d86d      	bhi.n	8006cea <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c0e:	682b      	ldr	r3, [r5, #0]
 8006c10:	019b      	lsls	r3, r3, #6
 8006c12:	d4f7      	bmi.n	8006c04 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8006c14:	2000      	movs	r0, #0
}
 8006c16:	b002      	add	sp, #8
 8006c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8006c1c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006c28:	f7fe f8f8 	bl	8004e1c <HAL_GetTick>
 8006c2c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c2e:	e004      	b.n	8006c3a <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c30:	f7fe f8f4 	bl	8004e1c <HAL_GetTick>
 8006c34:	1b80      	subs	r0, r0, r6
 8006c36:	2802      	cmp	r0, #2
 8006c38:	d857      	bhi.n	8006cea <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c3a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006c3e:	0798      	lsls	r0, r3, #30
 8006c40:	d4f6      	bmi.n	8006c30 <HAL_RCC_OscConfig+0x224>
 8006c42:	e761      	b.n	8006b08 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c44:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006c48:	2903      	cmp	r1, #3
 8006c4a:	f47f aef4 	bne.w	8006a36 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c4e:	4a2a      	ldr	r2, [pc, #168]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	0392      	lsls	r2, r2, #14
 8006c54:	f57f af12 	bpl.w	8006a7c <HAL_RCC_OscConfig+0x70>
 8006c58:	6862      	ldr	r2, [r4, #4]
 8006c5a:	2a00      	cmp	r2, #0
 8006c5c:	f47f af0e 	bne.w	8006a7c <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8006c60:	2001      	movs	r0, #1
}
 8006c62:	b002      	add	sp, #8
 8006c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c68:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006c6c:	2a02      	cmp	r2, #2
 8006c6e:	f47f af12 	bne.w	8006a96 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c72:	4b21      	ldr	r3, [pc, #132]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	055d      	lsls	r5, r3, #21
 8006c78:	d502      	bpl.n	8006c80 <HAL_RCC_OscConfig+0x274>
 8006c7a:	68e3      	ldr	r3, [r4, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0ef      	beq.n	8006c60 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c80:	4a1d      	ldr	r2, [pc, #116]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
 8006c82:	6920      	ldr	r0, [r4, #16]
 8006c84:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006c86:	491e      	ldr	r1, [pc, #120]	; (8006d00 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c88:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c8c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006c90:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006c92:	6808      	ldr	r0, [r1, #0]
 8006c94:	f7fe f880 	bl	8004d98 <HAL_InitTick>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d1e1      	bne.n	8006c60 <HAL_RCC_OscConfig+0x254>
 8006c9c:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c9e:	071a      	lsls	r2, r3, #28
 8006ca0:	f57f af33 	bpl.w	8006b0a <HAL_RCC_OscConfig+0xfe>
 8006ca4:	e717      	b.n	8006ad6 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ca6:	4a14      	ldr	r2, [pc, #80]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
 8006ca8:	6813      	ldr	r3, [r2, #0]
 8006caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006cb0:	f7fe f8b4 	bl	8004e1c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cb4:	4e10      	ldr	r6, [pc, #64]	; (8006cf8 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8006cb6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cb8:	e004      	b.n	8006cc4 <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cba:	f7fe f8af 	bl	8004e1c <HAL_GetTick>
 8006cbe:	1b40      	subs	r0, r0, r5
 8006cc0:	2864      	cmp	r0, #100	; 0x64
 8006cc2:	d812      	bhi.n	8006cea <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cc4:	6833      	ldr	r3, [r6, #0]
 8006cc6:	039b      	lsls	r3, r3, #14
 8006cc8:	d5f7      	bpl.n	8006cba <HAL_RCC_OscConfig+0x2ae>
 8006cca:	e6d6      	b.n	8006a7a <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006cd4:	f7fe f8a2 	bl	8004e1c <HAL_GetTick>
 8006cd8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006cda:	682b      	ldr	r3, [r5, #0]
 8006cdc:	0559      	lsls	r1, r3, #21
 8006cde:	d5dd      	bpl.n	8006c9c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ce0:	f7fe f89c 	bl	8004e1c <HAL_GetTick>
 8006ce4:	1b80      	subs	r0, r0, r6
 8006ce6:	2802      	cmp	r0, #2
 8006ce8:	d9f7      	bls.n	8006cda <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8006cea:	2003      	movs	r0, #3
}
 8006cec:	b002      	add	sp, #8
 8006cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8006cf2:	2500      	movs	r5, #0
 8006cf4:	e71a      	b.n	8006b2c <HAL_RCC_OscConfig+0x120>
 8006cf6:	bf00      	nop
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	40007000 	.word	0x40007000
 8006d00:	200006a8 	.word	0x200006a8
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d04:	4a65      	ldr	r2, [pc, #404]	; (8006e9c <HAL_RCC_OscConfig+0x490>)
 8006d06:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8006d12:	f7fe f883 	bl	8004e1c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d16:	4f61      	ldr	r7, [pc, #388]	; (8006e9c <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8006d18:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d1e:	e004      	b.n	8006d2a <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d20:	f7fe f87c 	bl	8004e1c <HAL_GetTick>
 8006d24:	1b80      	subs	r0, r0, r6
 8006d26:	4540      	cmp	r0, r8
 8006d28:	d8df      	bhi.n	8006cea <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d2e:	0799      	lsls	r1, r3, #30
 8006d30:	d5f6      	bpl.n	8006d20 <HAL_RCC_OscConfig+0x314>
 8006d32:	e727      	b.n	8006b84 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8006d34:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006d38:	f023 0301 	bic.w	r3, r3, #1
 8006d3c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006d40:	f7fe f86c 	bl	8004e1c <HAL_GetTick>
 8006d44:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d46:	e004      	b.n	8006d52 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d48:	f7fe f868 	bl	8004e1c <HAL_GetTick>
 8006d4c:	1b80      	subs	r0, r0, r6
 8006d4e:	2802      	cmp	r0, #2
 8006d50:	d8cb      	bhi.n	8006cea <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d52:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006d56:	0798      	lsls	r0, r3, #30
 8006d58:	d4f6      	bmi.n	8006d48 <HAL_RCC_OscConfig+0x33c>
 8006d5a:	e735      	b.n	8006bc8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d5c:	6833      	ldr	r3, [r6, #0]
 8006d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d62:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006d64:	f7fe f85a 	bl	8004e1c <HAL_GetTick>
 8006d68:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d6a:	6833      	ldr	r3, [r6, #0]
 8006d6c:	05d8      	lsls	r0, r3, #23
 8006d6e:	f53f aee2 	bmi.w	8006b36 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d72:	f7fe f853 	bl	8004e1c <HAL_GetTick>
 8006d76:	1bc0      	subs	r0, r0, r7
 8006d78:	2802      	cmp	r0, #2
 8006d7a:	d9f6      	bls.n	8006d6a <HAL_RCC_OscConfig+0x35e>
 8006d7c:	e7b5      	b.n	8006cea <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d82:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006d94:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d96:	e78b      	b.n	8006cb0 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8006d98:	2001      	movs	r0, #1
}
 8006d9a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8006d9c:	f7fe f83e 	bl	8004e1c <HAL_GetTick>
 8006da0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006da2:	e004      	b.n	8006dae <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006da4:	f7fe f83a 	bl	8004e1c <HAL_GetTick>
 8006da8:	1b80      	subs	r0, r0, r6
 8006daa:	2802      	cmp	r0, #2
 8006dac:	d89d      	bhi.n	8006cea <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dae:	682b      	ldr	r3, [r5, #0]
 8006db0:	0199      	lsls	r1, r3, #6
 8006db2:	d4f7      	bmi.n	8006da4 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006db4:	68e9      	ldr	r1, [r5, #12]
 8006db6:	4b3a      	ldr	r3, [pc, #232]	; (8006ea0 <HAL_RCC_OscConfig+0x494>)
 8006db8:	6a22      	ldr	r2, [r4, #32]
 8006dba:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006dc0:	400b      	ands	r3, r1
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8006dc8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8006dcc:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8006dd0:	3801      	subs	r0, #1
 8006dd2:	0849      	lsrs	r1, r1, #1
 8006dd4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006dd8:	3901      	subs	r1, #1
 8006dda:	0852      	lsrs	r2, r2, #1
 8006ddc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006de0:	3a01      	subs	r2, #1
 8006de2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006de6:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8006de8:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dea:	4e2c      	ldr	r6, [pc, #176]	; (8006e9c <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8006dec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006df0:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006df2:	68eb      	ldr	r3, [r5, #12]
 8006df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006df8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8006dfa:	f7fe f80f 	bl	8004e1c <HAL_GetTick>
 8006dfe:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e00:	e005      	b.n	8006e0e <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e02:	f7fe f80b 	bl	8004e1c <HAL_GetTick>
 8006e06:	1b00      	subs	r0, r0, r4
 8006e08:	2802      	cmp	r0, #2
 8006e0a:	f63f af6e 	bhi.w	8006cea <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e0e:	6833      	ldr	r3, [r6, #0]
 8006e10:	019a      	lsls	r2, r3, #6
 8006e12:	d5f6      	bpl.n	8006e02 <HAL_RCC_OscConfig+0x3f6>
 8006e14:	e6fe      	b.n	8006c14 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e16:	4b21      	ldr	r3, [pc, #132]	; (8006e9c <HAL_RCC_OscConfig+0x490>)
 8006e18:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006e1c:	f042 0204 	orr.w	r2, r2, #4
 8006e20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006e24:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006e28:	f042 0201 	orr.w	r2, r2, #1
 8006e2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e30:	e76f      	b.n	8006d12 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e32:	2801      	cmp	r0, #1
 8006e34:	f43f aeef 	beq.w	8006c16 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8006e38:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e3a:	6a22      	ldr	r2, [r4, #32]
 8006e3c:	f003 0103 	and.w	r1, r3, #3
 8006e40:	4291      	cmp	r1, r2
 8006e42:	f47f af0d 	bne.w	8006c60 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e4c:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006e52:	f47f af05 	bne.w	8006c60 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006e58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e5c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006e60:	f47f aefe 	bne.w	8006c60 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006e66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e6a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006e6e:	f47f aef7 	bne.w	8006c60 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e72:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006e74:	0852      	lsrs	r2, r2, #1
 8006e76:	3a01      	subs	r2, #1
 8006e78:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e7c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006e80:	f47f aeee 	bne.w	8006c60 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e84:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006e86:	0852      	lsrs	r2, r2, #1
 8006e88:	3a01      	subs	r2, #1
 8006e8a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e8e:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8006e92:	bf14      	ite	ne
 8006e94:	2001      	movne	r0, #1
 8006e96:	2000      	moveq	r0, #0
 8006e98:	e6bd      	b.n	8006c16 <HAL_RCC_OscConfig+0x20a>
 8006e9a:	bf00      	nop
 8006e9c:	40021000 	.word	0x40021000
 8006ea0:	019f800c 	.word	0x019f800c

08006ea4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ea4:	4b18      	ldr	r3, [pc, #96]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x64>)
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	f002 020c 	and.w	r2, r2, #12
 8006eac:	2a04      	cmp	r2, #4
 8006eae:	d027      	beq.n	8006f00 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	f002 020c 	and.w	r2, r2, #12
 8006eb6:	2a08      	cmp	r2, #8
 8006eb8:	d024      	beq.n	8006f04 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	f002 020c 	and.w	r2, r2, #12
 8006ec0:	2a0c      	cmp	r2, #12
 8006ec2:	d001      	beq.n	8006ec8 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8006ec4:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8006ec6:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ec8:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006eca:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ecc:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ece:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ed2:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8006ed6:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ed8:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006edc:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ee0:	bf0c      	ite	eq
 8006ee2:	480a      	ldreq	r0, [pc, #40]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ee4:	480a      	ldrne	r0, [pc, #40]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006ee6:	fbb0 f0f2 	udiv	r0, r0, r2
 8006eea:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006eee:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x64>)
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006efa:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006efe:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006f00:	4803      	ldr	r0, [pc, #12]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006f02:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006f04:	4801      	ldr	r0, [pc, #4]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x68>)
 8006f06:	4770      	bx	lr
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	007a1200 	.word	0x007a1200
 8006f10:	00f42400 	.word	0x00f42400

08006f14 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f000 80ef 	beq.w	80070f8 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f1a:	4a7f      	ldr	r2, [pc, #508]	; (8007118 <HAL_RCC_ClockConfig+0x204>)
{
 8006f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f20:	6813      	ldr	r3, [r2, #0]
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	428b      	cmp	r3, r1
 8006f28:	460d      	mov	r5, r1
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	d20c      	bcs.n	8006f48 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f2e:	6813      	ldr	r3, [r2, #0]
 8006f30:	f023 030f 	bic.w	r3, r3, #15
 8006f34:	430b      	orrs	r3, r1
 8006f36:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f38:	6813      	ldr	r3, [r2, #0]
 8006f3a:	f003 030f 	and.w	r3, r3, #15
 8006f3e:	428b      	cmp	r3, r1
 8006f40:	d002      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006f42:	2001      	movs	r0, #1
}
 8006f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	07de      	lsls	r6, r3, #31
 8006f4c:	d563      	bpl.n	8007016 <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f4e:	6862      	ldr	r2, [r4, #4]
 8006f50:	2a03      	cmp	r2, #3
 8006f52:	f000 809a 	beq.w	800708a <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f56:	4b71      	ldr	r3, [pc, #452]	; (800711c <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f58:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f5a:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f5c:	f000 8091 	beq.w	8007082 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f60:	055b      	lsls	r3, r3, #21
 8006f62:	d5ee      	bpl.n	8006f42 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006f64:	f7ff ff9e 	bl	8006ea4 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006f68:	4b6d      	ldr	r3, [pc, #436]	; (8007120 <HAL_RCC_ClockConfig+0x20c>)
 8006f6a:	4298      	cmp	r0, r3
 8006f6c:	f200 80c6 	bhi.w	80070fc <HAL_RCC_ClockConfig+0x1e8>
 8006f70:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f72:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f76:	4e69      	ldr	r6, [pc, #420]	; (800711c <HAL_RCC_ClockConfig+0x208>)
 8006f78:	68b3      	ldr	r3, [r6, #8]
 8006f7a:	f023 0303 	bic.w	r3, r3, #3
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8006f82:	f7fd ff4b 	bl	8004e1c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f86:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006f8a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f8c:	e004      	b.n	8006f98 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f8e:	f7fd ff45 	bl	8004e1c <HAL_GetTick>
 8006f92:	1bc0      	subs	r0, r0, r7
 8006f94:	4540      	cmp	r0, r8
 8006f96:	d871      	bhi.n	800707c <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f98:	68b3      	ldr	r3, [r6, #8]
 8006f9a:	6862      	ldr	r2, [r4, #4]
 8006f9c:	f003 030c 	and.w	r3, r3, #12
 8006fa0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006fa4:	d1f3      	bne.n	8006f8e <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	079f      	lsls	r7, r3, #30
 8006faa:	d436      	bmi.n	800701a <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8006fac:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8006fb0:	d103      	bne.n	8006fba <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006fb2:	68b3      	ldr	r3, [r6, #8]
 8006fb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fb8:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fba:	4e57      	ldr	r6, [pc, #348]	; (8007118 <HAL_RCC_ClockConfig+0x204>)
 8006fbc:	6833      	ldr	r3, [r6, #0]
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	42ab      	cmp	r3, r5
 8006fc4:	d846      	bhi.n	8007054 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	075a      	lsls	r2, r3, #29
 8006fca:	d506      	bpl.n	8006fda <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fcc:	4953      	ldr	r1, [pc, #332]	; (800711c <HAL_RCC_ClockConfig+0x208>)
 8006fce:	68e0      	ldr	r0, [r4, #12]
 8006fd0:	688a      	ldr	r2, [r1, #8]
 8006fd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fd6:	4302      	orrs	r2, r0
 8006fd8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fda:	071b      	lsls	r3, r3, #28
 8006fdc:	d507      	bpl.n	8006fee <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fde:	4a4f      	ldr	r2, [pc, #316]	; (800711c <HAL_RCC_ClockConfig+0x208>)
 8006fe0:	6921      	ldr	r1, [r4, #16]
 8006fe2:	6893      	ldr	r3, [r2, #8]
 8006fe4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006fe8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006fec:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fee:	f7ff ff59 	bl	8006ea4 <HAL_RCC_GetSysClockFreq>
 8006ff2:	4a4a      	ldr	r2, [pc, #296]	; (800711c <HAL_RCC_ClockConfig+0x208>)
 8006ff4:	4c4b      	ldr	r4, [pc, #300]	; (8007124 <HAL_RCC_ClockConfig+0x210>)
 8006ff6:	6892      	ldr	r2, [r2, #8]
 8006ff8:	494b      	ldr	r1, [pc, #300]	; (8007128 <HAL_RCC_ClockConfig+0x214>)
 8006ffa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006ffe:	4603      	mov	r3, r0
 8007000:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8007002:	484a      	ldr	r0, [pc, #296]	; (800712c <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007004:	f002 021f 	and.w	r2, r2, #31
 8007008:	40d3      	lsrs	r3, r2
 800700a:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800700c:	6800      	ldr	r0, [r0, #0]
}
 800700e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8007012:	f7fd bec1 	b.w	8004d98 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007016:	0798      	lsls	r0, r3, #30
 8007018:	d5cf      	bpl.n	8006fba <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800701a:	0758      	lsls	r0, r3, #29
 800701c:	d504      	bpl.n	8007028 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800701e:	493f      	ldr	r1, [pc, #252]	; (800711c <HAL_RCC_ClockConfig+0x208>)
 8007020:	688a      	ldr	r2, [r1, #8]
 8007022:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007026:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007028:	0719      	lsls	r1, r3, #28
 800702a:	d506      	bpl.n	800703a <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800702c:	4a3b      	ldr	r2, [pc, #236]	; (800711c <HAL_RCC_ClockConfig+0x208>)
 800702e:	6893      	ldr	r3, [r2, #8]
 8007030:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007034:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007038:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800703a:	4a38      	ldr	r2, [pc, #224]	; (800711c <HAL_RCC_ClockConfig+0x208>)
 800703c:	68a1      	ldr	r1, [r4, #8]
 800703e:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007040:	4e35      	ldr	r6, [pc, #212]	; (8007118 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007046:	430b      	orrs	r3, r1
 8007048:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800704a:	6833      	ldr	r3, [r6, #0]
 800704c:	f003 030f 	and.w	r3, r3, #15
 8007050:	42ab      	cmp	r3, r5
 8007052:	d9b8      	bls.n	8006fc6 <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007054:	6833      	ldr	r3, [r6, #0]
 8007056:	f023 030f 	bic.w	r3, r3, #15
 800705a:	432b      	orrs	r3, r5
 800705c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800705e:	f7fd fedd 	bl	8004e1c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007062:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007066:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007068:	6833      	ldr	r3, [r6, #0]
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	42ab      	cmp	r3, r5
 8007070:	d0a9      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007072:	f7fd fed3 	bl	8004e1c <HAL_GetTick>
 8007076:	1bc0      	subs	r0, r0, r7
 8007078:	4540      	cmp	r0, r8
 800707a:	d9f5      	bls.n	8007068 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 800707c:	2003      	movs	r0, #3
}
 800707e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007082:	039a      	lsls	r2, r3, #14
 8007084:	f53f af6e 	bmi.w	8006f64 <HAL_RCC_ClockConfig+0x50>
 8007088:	e75b      	b.n	8006f42 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800708a:	4824      	ldr	r0, [pc, #144]	; (800711c <HAL_RCC_ClockConfig+0x208>)
 800708c:	6801      	ldr	r1, [r0, #0]
 800708e:	0189      	lsls	r1, r1, #6
 8007090:	f57f af57 	bpl.w	8006f42 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007094:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007096:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007098:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800709a:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800709e:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 80070a2:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070a4:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070a8:	bf0c      	ite	eq
 80070aa:	4921      	ldreq	r1, [pc, #132]	; (8007130 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070ac:	4921      	ldrne	r1, [pc, #132]	; (8007134 <HAL_RCC_ClockConfig+0x220>)
 80070ae:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070b2:	4e1a      	ldr	r6, [pc, #104]	; (800711c <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 80070b4:	4f1a      	ldr	r7, [pc, #104]	; (8007120 <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070b6:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80070ba:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070be:	68f0      	ldr	r0, [r6, #12]
 80070c0:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80070c4:	3001      	adds	r0, #1
 80070c6:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80070c8:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80070cc:	42b9      	cmp	r1, r7
 80070ce:	d920      	bls.n	8007112 <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80070d0:	68b1      	ldr	r1, [r6, #8]
 80070d2:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80070d6:	d005      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x1d0>
 80070d8:	f013 0902 	ands.w	r9, r3, #2
 80070dc:	f43f af4b 	beq.w	8006f76 <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80070e0:	68a3      	ldr	r3, [r4, #8]
 80070e2:	b9b3      	cbnz	r3, 8007112 <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070e4:	490d      	ldr	r1, [pc, #52]	; (800711c <HAL_RCC_ClockConfig+0x208>)
 80070e6:	688b      	ldr	r3, [r1, #8]
 80070e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f0:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 80070f2:	f04f 0980 	mov.w	r9, #128	; 0x80
 80070f6:	e73e      	b.n	8006f76 <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 80070f8:	2001      	movs	r0, #1
}
 80070fa:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070fc:	4a07      	ldr	r2, [pc, #28]	; (800711c <HAL_RCC_ClockConfig+0x208>)
 80070fe:	6893      	ldr	r3, [r2, #8]
 8007100:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007108:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800710a:	6862      	ldr	r2, [r4, #4]
 800710c:	f04f 0980 	mov.w	r9, #128	; 0x80
 8007110:	e731      	b.n	8006f76 <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007112:	f04f 0900 	mov.w	r9, #0
 8007116:	e72e      	b.n	8006f76 <HAL_RCC_ClockConfig+0x62>
 8007118:	40022000 	.word	0x40022000
 800711c:	40021000 	.word	0x40021000
 8007120:	04c4b400 	.word	0x04c4b400
 8007124:	0800aeec 	.word	0x0800aeec
 8007128:	200006a0 	.word	0x200006a0
 800712c:	200006a8 	.word	0x200006a8
 8007130:	007a1200 	.word	0x007a1200
 8007134:	00f42400 	.word	0x00f42400

08007138 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8007138:	4b01      	ldr	r3, [pc, #4]	; (8007140 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	200006a0 	.word	0x200006a0

08007144 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <HAL_RCC_GetPCLK1Freq+0x18>)
 8007146:	4a06      	ldr	r2, [pc, #24]	; (8007160 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007148:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800714a:	4906      	ldr	r1, [pc, #24]	; (8007164 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800714c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007150:	6808      	ldr	r0, [r1, #0]
 8007152:	5cd3      	ldrb	r3, [r2, r3]
 8007154:	f003 031f 	and.w	r3, r3, #31
}
 8007158:	40d8      	lsrs	r0, r3
 800715a:	4770      	bx	lr
 800715c:	40021000 	.word	0x40021000
 8007160:	0800aefc 	.word	0x0800aefc
 8007164:	200006a0 	.word	0x200006a0

08007168 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007168:	4b05      	ldr	r3, [pc, #20]	; (8007180 <HAL_RCC_GetPCLK2Freq+0x18>)
 800716a:	4a06      	ldr	r2, [pc, #24]	; (8007184 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800716c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800716e:	4906      	ldr	r1, [pc, #24]	; (8007188 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007170:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007174:	6808      	ldr	r0, [r1, #0]
 8007176:	5cd3      	ldrb	r3, [r2, r3]
 8007178:	f003 031f 	and.w	r3, r3, #31
}
 800717c:	40d8      	lsrs	r0, r3
 800717e:	4770      	bx	lr
 8007180:	40021000 	.word	0x40021000
 8007184:	0800aefc 	.word	0x0800aefc
 8007188:	200006a0 	.word	0x200006a0

0800718c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800718c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007190:	6803      	ldr	r3, [r0, #0]
{
 8007192:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007194:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8007198:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800719a:	d056      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719c:	4b9f      	ldr	r3, [pc, #636]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800719e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071a0:	00d5      	lsls	r5, r2, #3
 80071a2:	f140 810c 	bpl.w	80073be <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 80071a6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071a8:	4d9d      	ldr	r5, [pc, #628]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80071aa:	682b      	ldr	r3, [r5, #0]
 80071ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071b2:	f7fd fe33 	bl	8004e1c <HAL_GetTick>
 80071b6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071b8:	e005      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ba:	f7fd fe2f 	bl	8004e1c <HAL_GetTick>
 80071be:	1b83      	subs	r3, r0, r6
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	f200 8107 	bhi.w	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071c6:	682b      	ldr	r3, [r5, #0]
 80071c8:	05d8      	lsls	r0, r3, #23
 80071ca:	d5f6      	bpl.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071cc:	4d93      	ldr	r5, [pc, #588]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80071ce:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80071d2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80071d6:	d027      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80071d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80071da:	429a      	cmp	r2, r3
 80071dc:	d025      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80071de:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071e2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80071e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071ea:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071ee:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80071f2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071fa:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071fc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8007200:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007204:	f140 8108 	bpl.w	8007418 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007208:	f7fd fe08 	bl	8004e1c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800720c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007210:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007212:	e005      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007214:	f7fd fe02 	bl	8004e1c <HAL_GetTick>
 8007218:	1b80      	subs	r0, r0, r6
 800721a:	4540      	cmp	r0, r8
 800721c:	f200 80da 	bhi.w	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007220:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007224:	079b      	lsls	r3, r3, #30
 8007226:	d5f5      	bpl.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007228:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800722a:	497c      	ldr	r1, [pc, #496]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800722c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007230:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007234:	4313      	orrs	r3, r2
 8007236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800723a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800723c:	b127      	cbz	r7, 8007248 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800723e:	4a77      	ldr	r2, [pc, #476]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007240:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007246:	6593      	str	r3, [r2, #88]	; 0x58
 8007248:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800724a:	07de      	lsls	r6, r3, #31
 800724c:	d508      	bpl.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800724e:	4973      	ldr	r1, [pc, #460]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007250:	6865      	ldr	r5, [r4, #4]
 8007252:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007256:	f022 0203 	bic.w	r2, r2, #3
 800725a:	432a      	orrs	r2, r5
 800725c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007260:	079d      	lsls	r5, r3, #30
 8007262:	d508      	bpl.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007264:	496d      	ldr	r1, [pc, #436]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007266:	68a5      	ldr	r5, [r4, #8]
 8007268:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800726c:	f022 020c 	bic.w	r2, r2, #12
 8007270:	432a      	orrs	r2, r5
 8007272:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007276:	0759      	lsls	r1, r3, #29
 8007278:	d508      	bpl.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800727a:	4968      	ldr	r1, [pc, #416]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800727c:	68e5      	ldr	r5, [r4, #12]
 800727e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007282:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007286:	432a      	orrs	r2, r5
 8007288:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800728c:	071a      	lsls	r2, r3, #28
 800728e:	d508      	bpl.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007290:	4962      	ldr	r1, [pc, #392]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007292:	6925      	ldr	r5, [r4, #16]
 8007294:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007298:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800729c:	432a      	orrs	r2, r5
 800729e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072a2:	069f      	lsls	r7, r3, #26
 80072a4:	d508      	bpl.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072a6:	495d      	ldr	r1, [pc, #372]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80072a8:	6965      	ldr	r5, [r4, #20]
 80072aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80072ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80072b2:	432a      	orrs	r2, r5
 80072b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072b8:	065e      	lsls	r6, r3, #25
 80072ba:	d508      	bpl.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072bc:	4957      	ldr	r1, [pc, #348]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80072be:	69a5      	ldr	r5, [r4, #24]
 80072c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80072c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80072c8:	432a      	orrs	r2, r5
 80072ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072ce:	061d      	lsls	r5, r3, #24
 80072d0:	d508      	bpl.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072d2:	4952      	ldr	r1, [pc, #328]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80072d4:	69e5      	ldr	r5, [r4, #28]
 80072d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80072da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80072de:	432a      	orrs	r2, r5
 80072e0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072e4:	05d9      	lsls	r1, r3, #23
 80072e6:	d508      	bpl.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072e8:	494c      	ldr	r1, [pc, #304]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80072ea:	6a25      	ldr	r5, [r4, #32]
 80072ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80072f0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80072f4:	432a      	orrs	r2, r5
 80072f6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072fa:	059a      	lsls	r2, r3, #22
 80072fc:	d508      	bpl.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072fe:	4947      	ldr	r1, [pc, #284]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007300:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007302:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007306:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800730a:	432a      	orrs	r2, r5
 800730c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007310:	055f      	lsls	r7, r3, #21
 8007312:	d50b      	bpl.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007314:	4941      	ldr	r1, [pc, #260]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007316:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007318:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800731c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007320:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007322:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007326:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800732a:	d055      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800732c:	051e      	lsls	r6, r3, #20
 800732e:	d50b      	bpl.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007330:	493a      	ldr	r1, [pc, #232]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007332:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007334:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007338:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800733c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800733e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007342:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007346:	d04c      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007348:	04dd      	lsls	r5, r3, #19
 800734a:	d50b      	bpl.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800734c:	4933      	ldr	r1, [pc, #204]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800734e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007350:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007354:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007358:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800735a:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800735e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007362:	d043      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007364:	0499      	lsls	r1, r3, #18
 8007366:	d50b      	bpl.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007368:	492c      	ldr	r1, [pc, #176]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800736a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800736c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007370:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007374:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007376:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800737a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800737e:	d03a      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007380:	045a      	lsls	r2, r3, #17
 8007382:	d50b      	bpl.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007384:	4925      	ldr	r1, [pc, #148]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007386:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007388:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800738c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007390:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007392:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007396:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800739a:	d031      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800739c:	041b      	lsls	r3, r3, #16
 800739e:	d50b      	bpl.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80073a0:	4a1e      	ldr	r2, [pc, #120]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80073a2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80073a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80073a8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80073ac:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80073ae:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80073b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80073b6:	d028      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 80073b8:	b002      	add	sp, #8
 80073ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80073be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80073c4:	659a      	str	r2, [r3, #88]	; 0x58
 80073c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80073d0:	2701      	movs	r7, #1
 80073d2:	e6e9      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 80073d4:	2003      	movs	r0, #3
 80073d6:	e731      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073d8:	68ca      	ldr	r2, [r1, #12]
 80073da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80073de:	60ca      	str	r2, [r1, #12]
 80073e0:	e7a4      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073e2:	68ca      	ldr	r2, [r1, #12]
 80073e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80073e8:	60ca      	str	r2, [r1, #12]
 80073ea:	e7ad      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073ec:	68ca      	ldr	r2, [r1, #12]
 80073ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80073f2:	60ca      	str	r2, [r1, #12]
 80073f4:	e7b6      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073f6:	68ca      	ldr	r2, [r1, #12]
 80073f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80073fc:	60ca      	str	r2, [r1, #12]
 80073fe:	e7bf      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007400:	68ca      	ldr	r2, [r1, #12]
 8007402:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007406:	60ca      	str	r2, [r1, #12]
 8007408:	e7c8      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800740a:	68d3      	ldr	r3, [r2, #12]
 800740c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007410:	60d3      	str	r3, [r2, #12]
}
 8007412:	b002      	add	sp, #8
 8007414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007418:	4613      	mov	r3, r2
 800741a:	e706      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800741c:	40021000 	.word	0x40021000
 8007420:	40007000 	.word	0x40007000

08007424 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007424:	6a03      	ldr	r3, [r0, #32]
 8007426:	f023 0301 	bic.w	r3, r3, #1
 800742a:	6203      	str	r3, [r0, #32]
{
 800742c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007430:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007432:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007434:	4f18      	ldr	r7, [pc, #96]	; (8007498 <TIM_OC1_SetConfig+0x74>)
  tmpccer |= OC_Config->OCPolarity;
 8007436:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8007438:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800743a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800743e:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007442:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007446:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8007448:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 800744c:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007450:	d00e      	beq.n	8007470 <TIM_OC1_SetConfig+0x4c>
 8007452:	4c12      	ldr	r4, [pc, #72]	; (800749c <TIM_OC1_SetConfig+0x78>)
 8007454:	42a0      	cmp	r0, r4
 8007456:	d00b      	beq.n	8007470 <TIM_OC1_SetConfig+0x4c>
 8007458:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800745c:	42a0      	cmp	r0, r4
 800745e:	d007      	beq.n	8007470 <TIM_OC1_SetConfig+0x4c>
 8007460:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007464:	42a0      	cmp	r0, r4
 8007466:	d003      	beq.n	8007470 <TIM_OC1_SetConfig+0x4c>
 8007468:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800746c:	42a0      	cmp	r0, r4
 800746e:	d10b      	bne.n	8007488 <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007470:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007472:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007476:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007478:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800747c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007480:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007482:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007486:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007488:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800748a:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800748c:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800748e:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8007490:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8007492:	6203      	str	r3, [r0, #32]
}
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	40012c00 	.word	0x40012c00
 800749c:	40013400 	.word	0x40013400

080074a0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074a0:	6a03      	ldr	r3, [r0, #32]
 80074a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074a6:	6203      	str	r3, [r0, #32]
{
 80074a8:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ac:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ae:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074b0:	4f19      	ldr	r7, [pc, #100]	; (8007518 <TIM_OC3_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074b2:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80074b4:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 80074ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074c2:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074c4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80074c8:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074cc:	d00f      	beq.n	80074ee <TIM_OC3_SetConfig+0x4e>
 80074ce:	4c13      	ldr	r4, [pc, #76]	; (800751c <TIM_OC3_SetConfig+0x7c>)
 80074d0:	42a0      	cmp	r0, r4
 80074d2:	d00c      	beq.n	80074ee <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d4:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d00f      	beq.n	80074fc <TIM_OC3_SetConfig+0x5c>
 80074dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80074e0:	42a0      	cmp	r0, r4
 80074e2:	d00b      	beq.n	80074fc <TIM_OC3_SetConfig+0x5c>
 80074e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80074e8:	42a0      	cmp	r0, r4
 80074ea:	d10e      	bne.n	800750a <TIM_OC3_SetConfig+0x6a>
 80074ec:	e006      	b.n	80074fc <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074ee:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80074f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074f4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80074f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074fc:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007500:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007504:	432c      	orrs	r4, r5
 8007506:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800750a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800750c:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800750e:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007510:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8007512:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8007514:	6203      	str	r3, [r0, #32]
}
 8007516:	4770      	bx	lr
 8007518:	40012c00 	.word	0x40012c00
 800751c:	40013400 	.word	0x40013400

08007520 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007520:	6a03      	ldr	r3, [r0, #32]
 8007522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007526:	6203      	str	r3, [r0, #32]
{
 8007528:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800752c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800752e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007530:	4f19      	ldr	r7, [pc, #100]	; (8007598 <TIM_OC4_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007532:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007534:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007536:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 800753a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800753e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007542:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007544:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007548:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800754c:	d00f      	beq.n	800756e <TIM_OC4_SetConfig+0x4e>
 800754e:	4c13      	ldr	r4, [pc, #76]	; (800759c <TIM_OC4_SetConfig+0x7c>)
 8007550:	42a0      	cmp	r0, r4
 8007552:	d00c      	beq.n	800756e <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007554:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007558:	42a0      	cmp	r0, r4
 800755a:	d00f      	beq.n	800757c <TIM_OC4_SetConfig+0x5c>
 800755c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007560:	42a0      	cmp	r0, r4
 8007562:	d00b      	beq.n	800757c <TIM_OC4_SetConfig+0x5c>
 8007564:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007568:	42a0      	cmp	r0, r4
 800756a:	d10e      	bne.n	800758a <TIM_OC4_SetConfig+0x6a>
 800756c:	e006      	b.n	800757c <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800756e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007570:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007574:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800757c:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007580:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007584:	432c      	orrs	r4, r5
 8007586:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800758a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800758c:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800758e:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007590:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8007592:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8007594:	6203      	str	r3, [r0, #32]
}
 8007596:	4770      	bx	lr
 8007598:	40012c00 	.word	0x40012c00
 800759c:	40013400 	.word	0x40013400

080075a0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d07d      	beq.n	80076a0 <HAL_TIM_Base_Init+0x100>
{
 80075a4:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80075a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80075aa:	4604      	mov	r4, r0
 80075ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d06d      	beq.n	8007690 <HAL_TIM_Base_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b4:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075b6:	4a3b      	ldr	r2, [pc, #236]	; (80076a4 <HAL_TIM_Base_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 80075b8:	2302      	movs	r3, #2
 80075ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075be:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 80075c0:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075c2:	d051      	beq.n	8007668 <HAL_TIM_Base_Init+0xc8>
 80075c4:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80075c8:	d021      	beq.n	800760e <HAL_TIM_Base_Init+0x6e>
 80075ca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80075ce:	4291      	cmp	r1, r2
 80075d0:	d01d      	beq.n	800760e <HAL_TIM_Base_Init+0x6e>
 80075d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075d6:	4291      	cmp	r1, r2
 80075d8:	d019      	beq.n	800760e <HAL_TIM_Base_Init+0x6e>
 80075da:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80075de:	4291      	cmp	r1, r2
 80075e0:	d042      	beq.n	8007668 <HAL_TIM_Base_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075e2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80075e6:	4291      	cmp	r1, r2
 80075e8:	d057      	beq.n	800769a <HAL_TIM_Base_Init+0xfa>
 80075ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075ee:	4291      	cmp	r1, r2
 80075f0:	d053      	beq.n	800769a <HAL_TIM_Base_Init+0xfa>
 80075f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075f6:	4291      	cmp	r1, r2
 80075f8:	d04f      	beq.n	800769a <HAL_TIM_Base_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075fa:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075fc:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80075fe:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007604:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007606:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007608:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800760a:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800760c:	e010      	b.n	8007630 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800760e:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007610:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007612:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007618:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800761a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800761e:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007620:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007626:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8007628:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800762a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800762c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800762e:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007630:	2301      	movs	r3, #1
 8007632:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007634:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007638:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800763c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007640:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007644:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800764c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007650:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007654:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007658:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800765c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007660:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007664:	2000      	movs	r0, #0
}
 8007666:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007668:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800766a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800766c:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800766e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007672:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8007674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007678:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800767a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800767e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007680:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007682:	68e3      	ldr	r3, [r4, #12]
 8007684:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007686:	6863      	ldr	r3, [r4, #4]
 8007688:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800768a:	6963      	ldr	r3, [r4, #20]
 800768c:	630b      	str	r3, [r1, #48]	; 0x30
 800768e:	e7cf      	b.n	8007630 <HAL_TIM_Base_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8007690:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007694:	f7fd f8d8 	bl	8004848 <HAL_TIM_Base_MspInit>
 8007698:	e78c      	b.n	80075b4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800769a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800769c:	69a2      	ldr	r2, [r4, #24]
 800769e:	e7e9      	b.n	8007674 <HAL_TIM_Base_Init+0xd4>
    return HAL_ERROR;
 80076a0:	2001      	movs	r0, #1
}
 80076a2:	4770      	bx	lr
 80076a4:	40012c00 	.word	0x40012c00

080076a8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80076a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d122      	bne.n	80076f6 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076b0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076b2:	4917      	ldr	r1, [pc, #92]	; (8007710 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 80076b4:	2202      	movs	r2, #2
 80076b6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076ba:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076bc:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c4:	d019      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x52>
 80076c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ca:	d016      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x52>
 80076cc:	4a11      	ldr	r2, [pc, #68]	; (8007714 <HAL_TIM_Base_Start_IT+0x6c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d013      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x52>
 80076d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00f      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x52>
 80076da:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00b      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x52>
 80076e2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d007      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	f042 0201 	orr.w	r2, r2, #1
 80076f0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80076f2:	2000      	movs	r0, #0
 80076f4:	4770      	bx	lr
    return HAL_ERROR;
 80076f6:	2001      	movs	r0, #1
 80076f8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076fa:	6899      	ldr	r1, [r3, #8]
 80076fc:	4a06      	ldr	r2, [pc, #24]	; (8007718 <HAL_TIM_Base_Start_IT+0x70>)
 80076fe:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007700:	2a06      	cmp	r2, #6
 8007702:	d002      	beq.n	800770a <HAL_TIM_Base_Start_IT+0x62>
 8007704:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007708:	d1ef      	bne.n	80076ea <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 800770a:	2000      	movs	r0, #0
}
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	40012c00 	.word	0x40012c00
 8007714:	40000400 	.word	0x40000400
 8007718:	00010007 	.word	0x00010007

0800771c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800771c:	6803      	ldr	r3, [r0, #0]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	f022 0201 	bic.w	r2, r2, #1
 8007724:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8007726:	6a1a      	ldr	r2, [r3, #32]
 8007728:	f241 1111 	movw	r1, #4369	; 0x1111
 800772c:	420a      	tst	r2, r1
 800772e:	d108      	bne.n	8007742 <HAL_TIM_Base_Stop_IT+0x26>
 8007730:	6a19      	ldr	r1, [r3, #32]
 8007732:	f244 4244 	movw	r2, #17476	; 0x4444
 8007736:	4211      	tst	r1, r2
 8007738:	d103      	bne.n	8007742 <HAL_TIM_Base_Stop_IT+0x26>
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	f022 0201 	bic.w	r2, r2, #1
 8007740:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007742:	2301      	movs	r3, #1
 8007744:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8007748:	2000      	movs	r0, #0
 800774a:	4770      	bx	lr

0800774c <HAL_TIM_PWM_MspInit>:
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop

08007750 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007750:	2800      	cmp	r0, #0
 8007752:	d07d      	beq.n	8007850 <HAL_TIM_PWM_Init+0x100>
{
 8007754:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007756:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800775a:	4604      	mov	r4, r0
 800775c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007760:	2b00      	cmp	r3, #0
 8007762:	d06d      	beq.n	8007840 <HAL_TIM_PWM_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007764:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007766:	4a3b      	ldr	r2, [pc, #236]	; (8007854 <HAL_TIM_PWM_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007768:	2302      	movs	r3, #2
 800776a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800776e:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8007770:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007772:	d051      	beq.n	8007818 <HAL_TIM_PWM_Init+0xc8>
 8007774:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8007778:	d021      	beq.n	80077be <HAL_TIM_PWM_Init+0x6e>
 800777a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800777e:	4291      	cmp	r1, r2
 8007780:	d01d      	beq.n	80077be <HAL_TIM_PWM_Init+0x6e>
 8007782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007786:	4291      	cmp	r1, r2
 8007788:	d019      	beq.n	80077be <HAL_TIM_PWM_Init+0x6e>
 800778a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800778e:	4291      	cmp	r1, r2
 8007790:	d042      	beq.n	8007818 <HAL_TIM_PWM_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007792:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007796:	4291      	cmp	r1, r2
 8007798:	d057      	beq.n	800784a <HAL_TIM_PWM_Init+0xfa>
 800779a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800779e:	4291      	cmp	r1, r2
 80077a0:	d053      	beq.n	800784a <HAL_TIM_PWM_Init+0xfa>
 80077a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077a6:	4291      	cmp	r1, r2
 80077a8:	d04f      	beq.n	800784a <HAL_TIM_PWM_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077aa:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077ac:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80077ae:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077b4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80077b6:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b8:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80077ba:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077bc:	e010      	b.n	80077e0 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80077be:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077c0:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077c2:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80077c8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077ce:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077d0:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d6:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80077d8:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80077da:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077dc:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80077de:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80077e0:	2301      	movs	r3, #1
 80077e2:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80077ec:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80077f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80077f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80077f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007800:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007804:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007808:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800780c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007810:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007814:	2000      	movs	r0, #0
}
 8007816:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007818:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800781a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800781c:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800781e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007822:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8007824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007828:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800782a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800782e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007830:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007832:	68e3      	ldr	r3, [r4, #12]
 8007834:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007836:	6863      	ldr	r3, [r4, #4]
 8007838:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800783a:	6963      	ldr	r3, [r4, #20]
 800783c:	630b      	str	r3, [r1, #48]	; 0x30
 800783e:	e7cf      	b.n	80077e0 <HAL_TIM_PWM_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8007840:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007844:	f7ff ff82 	bl	800774c <HAL_TIM_PWM_MspInit>
 8007848:	e78c      	b.n	8007764 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800784a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800784c:	69a2      	ldr	r2, [r4, #24]
 800784e:	e7e9      	b.n	8007824 <HAL_TIM_PWM_Init+0xd4>
    return HAL_ERROR;
 8007850:	2001      	movs	r0, #1
}
 8007852:	4770      	bx	lr
 8007854:	40012c00 	.word	0x40012c00

08007858 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8007858:	2800      	cmp	r0, #0
 800785a:	f000 80ab 	beq.w	80079b4 <HAL_TIM_Encoder_Init+0x15c>
{
 800785e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007862:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007866:	460d      	mov	r5, r1
 8007868:	4604      	mov	r4, r0
 800786a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 8095 	beq.w	800799e <HAL_TIM_Encoder_Init+0x146>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007874:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007876:	4950      	ldr	r1, [pc, #320]	; (80079b8 <HAL_TIM_Encoder_Init+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007878:	2202      	movs	r2, #2
 800787a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 8007884:	f022 0207 	bic.w	r2, r2, #7
 8007888:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800788a:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 800788c:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800788e:	d072      	beq.n	8007976 <HAL_TIM_Encoder_Init+0x11e>
 8007890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007894:	d021      	beq.n	80078da <HAL_TIM_Encoder_Init+0x82>
 8007896:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800789a:	428b      	cmp	r3, r1
 800789c:	d01d      	beq.n	80078da <HAL_TIM_Encoder_Init+0x82>
 800789e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80078a2:	428b      	cmp	r3, r1
 80078a4:	d019      	beq.n	80078da <HAL_TIM_Encoder_Init+0x82>
 80078a6:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80078aa:	428b      	cmp	r3, r1
 80078ac:	d063      	beq.n	8007976 <HAL_TIM_Encoder_Init+0x11e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ae:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80078b2:	428b      	cmp	r3, r1
 80078b4:	d078      	beq.n	80079a8 <HAL_TIM_Encoder_Init+0x150>
 80078b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80078ba:	428b      	cmp	r3, r1
 80078bc:	d074      	beq.n	80079a8 <HAL_TIM_Encoder_Init+0x150>
 80078be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80078c2:	428b      	cmp	r3, r1
 80078c4:	d070      	beq.n	80079a8 <HAL_TIM_Encoder_Init+0x150>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078c6:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078c8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078ce:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80078d0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80078d2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078d4:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80078d6:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078d8:	e010      	b.n	80078fc <HAL_TIM_Encoder_Init+0xa4>
    tmpcr1 |= Structure->CounterMode;
 80078da:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078dc:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80078e2:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80078e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078e8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ea:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078f0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078f2:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80078f4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80078f6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078f8:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80078fa:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80078fc:	2601      	movs	r6, #1
 80078fe:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8007900:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8007904:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007906:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007908:	69af      	ldr	r7, [r5, #24]
 800790a:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800790c:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007910:	f420 7840 	bic.w	r8, r0, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007914:	69e8      	ldr	r0, [r5, #28]
 8007916:	0112      	lsls	r2, r2, #4
 8007918:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800791c:	68e8      	ldr	r0, [r5, #12]
 800791e:	4302      	orrs	r2, r0
 8007920:	6a28      	ldr	r0, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007922:	f028 0803 	bic.w	r8, r8, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007926:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800792a:	ea41 0108 	orr.w	r1, r1, r8
  tmpccer = htim->Instance->CCER;
 800792e:	6a1f      	ldr	r7, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007930:	f8d5 8014 	ldr.w	r8, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007934:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007938:	6868      	ldr	r0, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800793a:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800793e:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007942:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007946:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800794a:	4307      	orrs	r7, r0
  tmpsmcr |= sConfig->EncoderMode;
 800794c:	ea4c 050e 	orr.w	r5, ip, lr
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007950:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8007952:	609d      	str	r5, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8007954:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8007956:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007958:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800795c:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007960:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007964:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007968:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800796c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 8007970:	2000      	movs	r0, #0
}
 8007972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpcr1 |= Structure->CounterMode;
 8007976:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007978:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800797a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800797e:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007980:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007984:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007986:	69a1      	ldr	r1, [r4, #24]
 8007988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800798c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800798e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007990:	68e2      	ldr	r2, [r4, #12]
 8007992:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007994:	6862      	ldr	r2, [r4, #4]
 8007996:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007998:	6962      	ldr	r2, [r4, #20]
 800799a:	631a      	str	r2, [r3, #48]	; 0x30
 800799c:	e7ae      	b.n	80078fc <HAL_TIM_Encoder_Init+0xa4>
    htim->Lock = HAL_UNLOCKED;
 800799e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80079a2:	f7fc ff9f 	bl	80048e4 <HAL_TIM_Encoder_MspInit>
 80079a6:	e765      	b.n	8007874 <HAL_TIM_Encoder_Init+0x1c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079a8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079aa:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079b0:	4302      	orrs	r2, r0
 80079b2:	e7e9      	b.n	8007988 <HAL_TIM_Encoder_Init+0x130>
    return HAL_ERROR;
 80079b4:	2001      	movs	r0, #1
}
 80079b6:	4770      	bx	lr
 80079b8:	40012c00 	.word	0x40012c00

080079bc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80079bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	f000 8083 	beq.w	8007acc <HAL_TIM_ConfigClockSource+0x110>
{
 80079c6:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 80079c8:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 80079ca:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80079cc:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80079ce:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80079d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80079d6:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80079d8:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079da:	4c58      	ldr	r4, [pc, #352]	; (8007b3c <HAL_TIM_ConfigClockSource+0x180>)
  switch (sClockSourceConfig->ClockSource)
 80079dc:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079de:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 80079e2:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80079e4:	d074      	beq.n	8007ad0 <HAL_TIM_ConfigClockSource+0x114>
 80079e6:	d91f      	bls.n	8007a28 <HAL_TIM_ConfigClockSource+0x6c>
 80079e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ec:	d05e      	beq.n	8007aac <HAL_TIM_ConfigClockSource+0xf0>
 80079ee:	d947      	bls.n	8007a80 <HAL_TIM_ConfigClockSource+0xc4>
 80079f0:	4953      	ldr	r1, [pc, #332]	; (8007b40 <HAL_TIM_ConfigClockSource+0x184>)
 80079f2:	428b      	cmp	r3, r1
 80079f4:	d006      	beq.n	8007a04 <HAL_TIM_ConfigClockSource+0x48>
 80079f6:	d93c      	bls.n	8007a72 <HAL_TIM_ConfigClockSource+0xb6>
 80079f8:	4952      	ldr	r1, [pc, #328]	; (8007b44 <HAL_TIM_ConfigClockSource+0x188>)
 80079fa:	428b      	cmp	r3, r1
 80079fc:	d002      	beq.n	8007a04 <HAL_TIM_ConfigClockSource+0x48>
 80079fe:	3130      	adds	r1, #48	; 0x30
 8007a00:	428b      	cmp	r3, r1
 8007a02:	d108      	bne.n	8007a16 <HAL_TIM_ConfigClockSource+0x5a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a04:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a06:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8007a0a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a0e:	430b      	orrs	r3, r1
 8007a10:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a14:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8007a16:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007a1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8007a22:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8007a24:	4618      	mov	r0, r3
}
 8007a26:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007a28:	2b40      	cmp	r3, #64	; 0x40
 8007a2a:	d06c      	beq.n	8007b06 <HAL_TIM_ConfigClockSource+0x14a>
 8007a2c:	d91b      	bls.n	8007a66 <HAL_TIM_ConfigClockSource+0xaa>
 8007a2e:	2b50      	cmp	r3, #80	; 0x50
 8007a30:	d1f1      	bne.n	8007a16 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8007a32:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a34:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a36:	684c      	ldr	r4, [r1, #4]
 8007a38:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a3a:	f026 0601 	bic.w	r6, r6, #1
 8007a3e:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a40:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a42:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a4a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007a4e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007a50:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8007a52:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007a54:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a56:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a5e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007a62:	6093      	str	r3, [r2, #8]
}
 8007a64:	e7d7      	b.n	8007a16 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007a66:	2b20      	cmp	r3, #32
 8007a68:	d0cc      	beq.n	8007a04 <HAL_TIM_ConfigClockSource+0x48>
 8007a6a:	d91b      	bls.n	8007aa4 <HAL_TIM_ConfigClockSource+0xe8>
 8007a6c:	2b30      	cmp	r3, #48	; 0x30
 8007a6e:	d1d2      	bne.n	8007a16 <HAL_TIM_ConfigClockSource+0x5a>
 8007a70:	e7c8      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x48>
 8007a72:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007a76:	d0c5      	beq.n	8007a04 <HAL_TIM_ConfigClockSource+0x48>
 8007a78:	3910      	subs	r1, #16
 8007a7a:	428b      	cmp	r3, r1
 8007a7c:	d0c2      	beq.n	8007a04 <HAL_TIM_ConfigClockSource+0x48>
 8007a7e:	e7ca      	b.n	8007a16 <HAL_TIM_ConfigClockSource+0x5a>
 8007a80:	2b70      	cmp	r3, #112	; 0x70
 8007a82:	d1c8      	bne.n	8007a16 <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a84:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8007a88:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007a8a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a8c:	432b      	orrs	r3, r5
 8007a8e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a92:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a96:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a98:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007a9a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007aa0:	6093      	str	r3, [r2, #8]
      break;
 8007aa2:	e7b8      	b.n	8007a16 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007aa4:	f033 0110 	bics.w	r1, r3, #16
 8007aa8:	d1b5      	bne.n	8007a16 <HAL_TIM_ConfigClockSource+0x5a>
 8007aaa:	e7ab      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x48>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007aac:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8007ab0:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007ab2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ab4:	432b      	orrs	r3, r5
 8007ab6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aba:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007abe:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007ac0:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ac2:	6893      	ldr	r3, [r2, #8]
 8007ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ac8:	6093      	str	r3, [r2, #8]
      break;
 8007aca:	e7a4      	b.n	8007a16 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8007acc:	2002      	movs	r0, #2
}
 8007ace:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ad0:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ad2:	684d      	ldr	r5, [r1, #4]
 8007ad4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ad6:	f024 0410 	bic.w	r4, r4, #16
 8007ada:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007adc:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8007ade:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ae0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ae4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ae8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aec:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007af0:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8007af2:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007af4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007af6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007afe:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8007b02:	6093      	str	r3, [r2, #8]
}
 8007b04:	e787      	b.n	8007a16 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8007b06:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b08:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b0a:	684c      	ldr	r4, [r1, #4]
 8007b0c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b0e:	f026 0601 	bic.w	r6, r6, #1
 8007b12:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b14:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b16:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b1e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007b22:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007b24:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8007b26:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8007b28:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b2a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b32:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007b36:	6093      	str	r3, [r2, #8]
}
 8007b38:	e76d      	b.n	8007a16 <HAL_TIM_ConfigClockSource+0x5a>
 8007b3a:	bf00      	nop
 8007b3c:	ffce0088 	.word	0xffce0088
 8007b40:	00100030 	.word	0x00100030
 8007b44:	00100040 	.word	0x00100040

08007b48 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8007b48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d04d      	beq.n	8007bec <HAL_TIM_SlaveConfigSynchro+0xa4>
 8007b50:	4602      	mov	r2, r0
{
 8007b52:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 8007b54:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8007b56:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007b58:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8007b5a:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007b62:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007b64:	e9d1 5400 	ldrd	r5, r4, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007b70:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b76:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007b7a:	432b      	orrs	r3, r5
  switch (sSlaveConfig->InputTrigger)
 8007b7c:	2c60      	cmp	r4, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8007b7e:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8007b80:	d051      	beq.n	8007c26 <HAL_TIM_SlaveConfigSynchro+0xde>
 8007b82:	d825      	bhi.n	8007bd0 <HAL_TIM_SlaveConfigSynchro+0x88>
 8007b84:	2c40      	cmp	r4, #64	; 0x40
 8007b86:	d033      	beq.n	8007bf0 <HAL_TIM_SlaveConfigSynchro+0xa8>
 8007b88:	2c50      	cmp	r4, #80	; 0x50
 8007b8a:	d110      	bne.n	8007bae <HAL_TIM_SlaveConfigSynchro+0x66>
  tmpccer = TIMx->CCER;
 8007b8c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b8e:	6a06      	ldr	r6, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b90:	688c      	ldr	r4, [r1, #8]
 8007b92:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b94:	f026 0601 	bic.w	r6, r6, #1
 8007b98:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b9a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b9c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ba0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8007ba4:	4321      	orrs	r1, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ba6:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007baa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007bac:	6201      	str	r1, [r0, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007bae:	68c3      	ldr	r3, [r0, #12]
 8007bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bb4:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007bb6:	68c3      	ldr	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8007bb8:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 8007bba:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc0:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8007bc2:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007bc6:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 8007bca:	4608      	mov	r0, r1
}
 8007bcc:	bcf0      	pop	{r4, r5, r6, r7}
 8007bce:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8007bd0:	2c70      	cmp	r4, #112	; 0x70
 8007bd2:	d1ec      	bne.n	8007bae <HAL_TIM_SlaveConfigSynchro+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bd4:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8007bd8:	690c      	ldr	r4, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8007bda:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bdc:	432b      	orrs	r3, r5
 8007bde:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007be2:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007be6:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007be8:	6083      	str	r3, [r0, #8]
 8007bea:	e7e0      	b.n	8007bae <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8007bec:	2002      	movs	r0, #2
}
 8007bee:	4770      	bx	lr
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8007bf0:	2d05      	cmp	r5, #5
 8007bf2:	d010      	beq.n	8007c16 <HAL_TIM_SlaveConfigSynchro+0xce>
 8007bf4:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 8007bf8:	d00d      	beq.n	8007c16 <HAL_TIM_SlaveConfigSynchro+0xce>
      tmpccer = htim->Instance->CCER;
 8007bfa:	6a05      	ldr	r5, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007bfc:	6a04      	ldr	r4, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007bfe:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007c00:	f024 0401 	bic.w	r4, r4, #1
 8007c04:	6204      	str	r4, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007c06:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007c0c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8007c10:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8007c12:	6205      	str	r5, [r0, #32]
      break;
 8007c14:	e7cb      	b.n	8007bae <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 8007c16:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8007c18:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8007c1a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007c1e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8007c22:	bcf0      	pop	{r4, r5, r6, r7}
 8007c24:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c26:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c28:	688d      	ldr	r5, [r1, #8]
 8007c2a:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c2c:	f024 0410 	bic.w	r4, r4, #16
 8007c30:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c32:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8007c34:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c36:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c3e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c42:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8007c46:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8007c48:	6203      	str	r3, [r0, #32]
 8007c4a:	e7b0      	b.n	8007bae <HAL_TIM_SlaveConfigSynchro+0x66>

08007c4c <HAL_TIM_OC_DelayElapsedCallback>:
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop

08007c50 <HAL_TIM_IC_CaptureCallback>:
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop

08007c54 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop

08007c58 <HAL_TIM_TriggerCallback>:
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop

08007c5c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c5c:	6803      	ldr	r3, [r0, #0]
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	0791      	lsls	r1, r2, #30
{
 8007c62:	b510      	push	{r4, lr}
 8007c64:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c66:	d503      	bpl.n	8007c70 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	0792      	lsls	r2, r2, #30
 8007c6c:	f100 808a 	bmi.w	8007d84 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c70:	691a      	ldr	r2, [r3, #16]
 8007c72:	0752      	lsls	r2, r2, #29
 8007c74:	d502      	bpl.n	8007c7c <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	0750      	lsls	r0, r2, #29
 8007c7a:	d470      	bmi.n	8007d5e <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	0711      	lsls	r1, r2, #28
 8007c80:	d502      	bpl.n	8007c88 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	0712      	lsls	r2, r2, #28
 8007c86:	d458      	bmi.n	8007d3a <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c88:	691a      	ldr	r2, [r3, #16]
 8007c8a:	06d1      	lsls	r1, r2, #27
 8007c8c:	d502      	bpl.n	8007c94 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	06d2      	lsls	r2, r2, #27
 8007c92:	d43e      	bmi.n	8007d12 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c94:	691a      	ldr	r2, [r3, #16]
 8007c96:	07d0      	lsls	r0, r2, #31
 8007c98:	d503      	bpl.n	8007ca2 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	07d1      	lsls	r1, r2, #31
 8007c9e:	f100 808a 	bmi.w	8007db6 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	0612      	lsls	r2, r2, #24
 8007ca6:	d503      	bpl.n	8007cb0 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	0610      	lsls	r0, r2, #24
 8007cac:	f100 808b 	bmi.w	8007dc6 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007cb0:	691a      	ldr	r2, [r3, #16]
 8007cb2:	05d1      	lsls	r1, r2, #23
 8007cb4:	d503      	bpl.n	8007cbe <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	0612      	lsls	r2, r2, #24
 8007cba:	f100 808c 	bmi.w	8007dd6 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	0650      	lsls	r0, r2, #25
 8007cc2:	d503      	bpl.n	8007ccc <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	0651      	lsls	r1, r2, #25
 8007cc8:	f100 808d 	bmi.w	8007de6 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ccc:	691a      	ldr	r2, [r3, #16]
 8007cce:	0692      	lsls	r2, r2, #26
 8007cd0:	d503      	bpl.n	8007cda <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	0690      	lsls	r0, r2, #26
 8007cd6:	f100 808e 	bmi.w	8007df6 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007cda:	691a      	ldr	r2, [r3, #16]
 8007cdc:	02d1      	lsls	r1, r2, #11
 8007cde:	d503      	bpl.n	8007ce8 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	02d2      	lsls	r2, r2, #11
 8007ce4:	f100 808f 	bmi.w	8007e06 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007ce8:	691a      	ldr	r2, [r3, #16]
 8007cea:	0290      	lsls	r0, r2, #10
 8007cec:	d503      	bpl.n	8007cf6 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	0291      	lsls	r1, r2, #10
 8007cf2:	f100 8090 	bmi.w	8007e16 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	0252      	lsls	r2, r2, #9
 8007cfa:	d503      	bpl.n	8007d04 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	0250      	lsls	r0, r2, #9
 8007d00:	f100 8091 	bmi.w	8007e26 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007d04:	691a      	ldr	r2, [r3, #16]
 8007d06:	0211      	lsls	r1, r2, #8
 8007d08:	d502      	bpl.n	8007d10 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	0212      	lsls	r2, r2, #8
 8007d0e:	d44a      	bmi.n	8007da6 <HAL_TIM_IRQHandler+0x14a>
}
 8007d10:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d12:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d16:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d18:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d1a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007d22:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d24:	f040 8090 	bne.w	8007e48 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d28:	f7ff ff90 	bl	8007c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f7ff ff91 	bl	8007c54 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d32:	2200      	movs	r2, #0
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	7722      	strb	r2, [r4, #28]
 8007d38:	e7ac      	b.n	8007c94 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d3a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d3e:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d40:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d42:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007d48:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d4a:	d17a      	bne.n	8007e42 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4c:	f7ff ff7e 	bl	8007c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d50:	4620      	mov	r0, r4
 8007d52:	f7ff ff7f 	bl	8007c54 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d56:	2200      	movs	r2, #0
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	7722      	strb	r2, [r4, #28]
 8007d5c:	e794      	b.n	8007c88 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d5e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d62:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d64:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d66:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d70:	d164      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d72:	f7ff ff6b 	bl	8007c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d76:	4620      	mov	r0, r4
 8007d78:	f7ff ff6c 	bl	8007c54 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	7722      	strb	r2, [r4, #28]
 8007d82:	e77b      	b.n	8007c7c <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d84:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d88:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d8a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d8c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	0799      	lsls	r1, r3, #30
 8007d92:	d150      	bne.n	8007e36 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d94:	f7ff ff5a 	bl	8007c4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f7ff ff5b 	bl	8007c54 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d9e:	2200      	movs	r2, #0
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	7722      	strb	r2, [r4, #28]
 8007da4:	e764      	b.n	8007c70 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007da6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007daa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007dac:	611a      	str	r2, [r3, #16]
}
 8007dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007db2:	f000 ba81 	b.w	80082b8 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007db6:	f06f 0201 	mvn.w	r2, #1
 8007dba:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f7f9 fca1 	bl	8001704 <HAL_TIM_PeriodElapsedCallback>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	e76d      	b.n	8007ca2 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 fa69 	bl	80082a4 <HAL_TIMEx_BreakCallback>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	e76c      	b.n	8007cb0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007dd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007dda:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 fa63 	bl	80082a8 <HAL_TIMEx_Break2Callback>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	e76b      	b.n	8007cbe <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007de6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dea:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7ff ff33 	bl	8007c58 <HAL_TIM_TriggerCallback>
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	e76a      	b.n	8007ccc <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007df6:	f06f 0220 	mvn.w	r2, #32
 8007dfa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f000 fa4f 	bl	80082a0 <HAL_TIMEx_CommutCallback>
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	e769      	b.n	8007cda <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007e06:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007e0a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f000 fa4d 	bl	80082ac <HAL_TIMEx_EncoderIndexCallback>
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	e768      	b.n	8007ce8 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007e16:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007e1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f000 fa47 	bl	80082b0 <HAL_TIMEx_DirectionChangeCallback>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	e767      	b.n	8007cf6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007e26:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007e2a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f000 fa41 	bl	80082b4 <HAL_TIMEx_IndexErrorCallback>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	e766      	b.n	8007d04 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8007e36:	f7ff ff0b 	bl	8007c50 <HAL_TIM_IC_CaptureCallback>
 8007e3a:	e7b0      	b.n	8007d9e <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8007e3c:	f7ff ff08 	bl	8007c50 <HAL_TIM_IC_CaptureCallback>
 8007e40:	e79c      	b.n	8007d7c <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8007e42:	f7ff ff05 	bl	8007c50 <HAL_TIM_IC_CaptureCallback>
 8007e46:	e786      	b.n	8007d56 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8007e48:	f7ff ff02 	bl	8007c50 <HAL_TIM_IC_CaptureCallback>
 8007e4c:	e771      	b.n	8007d32 <HAL_TIM_IRQHandler+0xd6>
 8007e4e:	bf00      	nop

08007e50 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e50:	6a03      	ldr	r3, [r0, #32]
 8007e52:	f023 0310 	bic.w	r3, r3, #16
 8007e56:	6203      	str	r3, [r0, #32]
{
 8007e58:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8007e5a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007e5c:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007e5e:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e60:	4f19      	ldr	r7, [pc, #100]	; (8007ec8 <TIM_OC2_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e62:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e64:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e66:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8007e6a:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e6e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e72:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e74:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e78:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e7c:	d00f      	beq.n	8007e9e <TIM_OC2_SetConfig+0x4e>
 8007e7e:	4c13      	ldr	r4, [pc, #76]	; (8007ecc <TIM_OC2_SetConfig+0x7c>)
 8007e80:	42a0      	cmp	r0, r4
 8007e82:	d00c      	beq.n	8007e9e <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e84:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8007e88:	42a0      	cmp	r0, r4
 8007e8a:	d00f      	beq.n	8007eac <TIM_OC2_SetConfig+0x5c>
 8007e8c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007e90:	42a0      	cmp	r0, r4
 8007e92:	d00b      	beq.n	8007eac <TIM_OC2_SetConfig+0x5c>
 8007e94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007e98:	42a0      	cmp	r0, r4
 8007e9a:	d10e      	bne.n	8007eba <TIM_OC2_SetConfig+0x6a>
 8007e9c:	e006      	b.n	8007eac <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e9e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ea4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007eac:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007eb0:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007eb4:	432c      	orrs	r4, r5
 8007eb6:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8007eba:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007ebc:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007ebe:	6182      	str	r2, [r0, #24]
}
 8007ec0:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8007ec2:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007ec4:	6203      	str	r3, [r0, #32]
}
 8007ec6:	4770      	bx	lr
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	40013400 	.word	0x40013400

08007ed0 <HAL_TIM_PWM_ConfigChannel>:
{
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8007ed2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	f000 80e4 	beq.w	80080a4 <HAL_TIM_PWM_ConfigChannel+0x1d4>
 8007edc:	2301      	movs	r3, #1
 8007ede:	4604      	mov	r4, r0
 8007ee0:	460d      	mov	r5, r1
 8007ee2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007ee6:	2a14      	cmp	r2, #20
 8007ee8:	d844      	bhi.n	8007f74 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8007eea:	e8df f002 	tbb	[pc, r2]
 8007eee:	4347      	.short	0x4347
 8007ef0:	435b4343 	.word	0x435b4343
 8007ef4:	43704343 	.word	0x43704343
 8007ef8:	43844343 	.word	0x43844343
 8007efc:	43994343 	.word	0x43994343
 8007f00:	4343      	.short	0x4343
 8007f02:	0b          	.byte	0x0b
 8007f03:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f04:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f06:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f0a:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f0c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f0e:	4e6c      	ldr	r6, [pc, #432]	; (80080c0 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f10:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8007f14:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8007f16:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007f18:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8007f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f1c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f20:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f24:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f28:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f2a:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f2e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f32:	d008      	beq.n	8007f46 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007f34:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007f38:	42b3      	cmp	r3, r6
 8007f3a:	d004      	beq.n	8007f46 <HAL_TIM_PWM_ConfigChannel+0x76>
 8007f3c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007f40:	42b3      	cmp	r3, r6
 8007f42:	f040 80b1 	bne.w	80080a8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f46:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f48:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f4c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8007f50:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8007f52:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007f54:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8007f56:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8007f58:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f5a:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f5c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f5e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007f62:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007f66:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007f6a:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f6e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007f72:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8007f74:	2000      	movs	r0, #0
 8007f76:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f7c:	6800      	ldr	r0, [r0, #0]
 8007f7e:	f7ff fa51 	bl	8007424 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f82:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f84:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f86:	6999      	ldr	r1, [r3, #24]
 8007f88:	f041 0108 	orr.w	r1, r1, #8
 8007f8c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f8e:	6999      	ldr	r1, [r3, #24]
 8007f90:	f021 0104 	bic.w	r1, r1, #4
 8007f94:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f96:	699a      	ldr	r2, [r3, #24]
 8007f98:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8007f9a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f9c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8007f9e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007fa2:	e7ea      	b.n	8007f7a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fa4:	6800      	ldr	r0, [r0, #0]
 8007fa6:	f7ff ff53 	bl	8007e50 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007faa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fac:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fae:	6999      	ldr	r1, [r3, #24]
 8007fb0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007fb4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fb6:	6999      	ldr	r1, [r3, #24]
 8007fb8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007fbc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8007fc4:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fc6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8007fc8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007fcc:	e7d5      	b.n	8007f7a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fce:	6800      	ldr	r0, [r0, #0]
 8007fd0:	f7ff fa66 	bl	80074a0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fd4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fd6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fd8:	69d9      	ldr	r1, [r3, #28]
 8007fda:	f041 0108 	orr.w	r1, r1, #8
 8007fde:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fe0:	69d9      	ldr	r1, [r3, #28]
 8007fe2:	f021 0104 	bic.w	r1, r1, #4
 8007fe6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fe8:	69da      	ldr	r2, [r3, #28]
 8007fea:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8007fec:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fee:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8007ff0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007ff4:	e7c1      	b.n	8007f7a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ff6:	6800      	ldr	r0, [r0, #0]
 8007ff8:	f7ff fa92 	bl	8007520 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ffc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ffe:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008000:	69d9      	ldr	r1, [r3, #28]
 8008002:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008006:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008008:	69d9      	ldr	r1, [r3, #28]
 800800a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800800e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008010:	69da      	ldr	r2, [r3, #28]
 8008012:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8008016:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008018:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800801a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800801e:	e7ac      	b.n	8007f7a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008020:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008022:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008026:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8008028:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800802a:	4e25      	ldr	r6, [pc, #148]	; (80080c0 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800802c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8008030:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8008032:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008034:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008036:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008038:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 800803c:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008040:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008044:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008046:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800804a:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800804e:	d00f      	beq.n	8008070 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8008050:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008054:	42b3      	cmp	r3, r6
 8008056:	d00b      	beq.n	8008070 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8008058:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800805c:	42b3      	cmp	r3, r6
 800805e:	d007      	beq.n	8008070 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8008060:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008064:	42b3      	cmp	r3, r6
 8008066:	d003      	beq.n	8008070 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8008068:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800806c:	42b3      	cmp	r3, r6
 800806e:	d104      	bne.n	800807a <HAL_TIM_PWM_ConfigChannel+0x1aa>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008070:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008072:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008076:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 800807a:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800807c:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800807e:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8008080:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8008082:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008084:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008086:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008088:	f041 0108 	orr.w	r1, r1, #8
 800808c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800808e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008090:	f021 0104 	bic.w	r1, r1, #4
 8008094:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008098:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800809a:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800809c:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800809e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80080a2:	e76a      	b.n	8007f7a <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 80080a4:	2002      	movs	r0, #2
}
 80080a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80080ac:	42b3      	cmp	r3, r6
 80080ae:	f43f af4a 	beq.w	8007f46 <HAL_TIM_PWM_ConfigChannel+0x76>
 80080b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80080b6:	42b3      	cmp	r3, r6
 80080b8:	f47f af4a 	bne.w	8007f50 <HAL_TIM_PWM_ConfigChannel+0x80>
 80080bc:	e743      	b.n	8007f46 <HAL_TIM_PWM_ConfigChannel+0x76>
 80080be:	bf00      	nop
 80080c0:	40012c00 	.word	0x40012c00

080080c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d03c      	beq.n	8008146 <HAL_TIMEx_MasterConfigSynchronization+0x82>
{
 80080cc:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080ce:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080d0:	4c1e      	ldr	r4, [pc, #120]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 80080d2:	2302      	movs	r3, #2
 80080d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080d8:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 80080da:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80080dc:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080de:	d026      	beq.n	800812e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80080e0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80080e4:	42a2      	cmp	r2, r4
 80080e6:	d022      	beq.n	800812e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080e8:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80080ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80080ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080f2:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080f4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80080f8:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080fa:	d00a      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80080fc:	4b14      	ldr	r3, [pc, #80]	; (8008150 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 80080fe:	429a      	cmp	r2, r3
 8008100:	d007      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8008102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008106:	429a      	cmp	r2, r3
 8008108:	d003      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800810a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800810e:	429a      	cmp	r2, r3
 8008110:	d104      	bne.n	800811c <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008112:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008114:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008118:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800811a:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800811c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800811e:	2201      	movs	r2, #1
 8008120:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008124:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8008128:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800812a:	4618      	mov	r0, r3
}
 800812c:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800812e:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008132:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008136:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008138:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800813c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008140:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8008142:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008144:	e7e5      	b.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 8008146:	2002      	movs	r0, #2
}
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40012c00 	.word	0x40012c00
 8008150:	40000400 	.word	0x40000400

08008154 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008154:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008158:	2b01      	cmp	r3, #1
 800815a:	d044      	beq.n	80081e6 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 800815c:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800815e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8008162:	4602      	mov	r2, r0
 8008164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008168:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800816c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800816e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008172:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008178:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800817c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800817e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008182:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008188:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800818a:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800818c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800818e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008192:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008194:	4c15      	ldr	r4, [pc, #84]	; (80081ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8008196:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008198:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800819c:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800819e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80081a2:	d00a      	beq.n	80081ba <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80081a4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80081a8:	42a0      	cmp	r0, r4
 80081aa:	d006      	beq.n	80081ba <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80081ac:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80081ae:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80081b0:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80081b4:	4608      	mov	r0, r1
}
 80081b6:	bc30      	pop	{r4, r5}
 80081b8:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80081ba:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80081bc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80081be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081c2:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80081c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081c8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80081cc:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80081d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081d4:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80081d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80081da:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80081dc:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80081de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80081e2:	430b      	orrs	r3, r1
 80081e4:	e7e2      	b.n	80081ac <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 80081e6:	2002      	movs	r0, #2
}
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	40012c00 	.word	0x40012c00

080081f0 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80081f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d048      	beq.n	800828a <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 80081f8:	6813      	ldr	r3, [r2, #0]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	2b0f      	cmp	r3, #15
{
 80081fe:	b4f0      	push	{r4, r5, r6, r7}
 8008200:	d826      	bhi.n	8008250 <HAL_TIMEx_ConfigBreakInput+0x60>
 8008202:	4e23      	ldr	r6, [pc, #140]	; (8008290 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8008204:	4c23      	ldr	r4, [pc, #140]	; (8008294 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 8008206:	4f24      	ldr	r7, [pc, #144]	; (8008298 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8008208:	4d24      	ldr	r5, [pc, #144]	; (800829c <HAL_TIMEx_ConfigBreakInput+0xac>)
 800820a:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 800820e:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8008212:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 8008216:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 800821a:	2901      	cmp	r1, #1
 800821c:	d01e      	beq.n	800825c <HAL_TIMEx_ConfigBreakInput+0x6c>
 800821e:	2902      	cmp	r1, #2
 8008220:	d110      	bne.n	8008244 <HAL_TIMEx_ConfigBreakInput+0x54>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8008222:	6801      	ldr	r1, [r0, #0]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008224:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF2;
 8008226:	f8d1 c064 	ldr.w	ip, [r1, #100]	; 0x64

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800822a:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800822c:	40bb      	lsls	r3, r7
 800822e:	ea83 030c 	eor.w	r3, r3, ip
 8008232:	4033      	ands	r3, r6
 8008234:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008238:	fa02 f505 	lsl.w	r5, r2, r5
 800823c:	405d      	eors	r5, r3
 800823e:	402c      	ands	r4, r5
 8008240:	4063      	eors	r3, r4

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8008242:	664b      	str	r3, [r1, #100]	; 0x64
    }
    default:
      break;
  }

  __HAL_UNLOCK(htim);
 8008244:	2300      	movs	r3, #0
 8008246:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800824a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800824c:	4618      	mov	r0, r3
}
 800824e:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8008250:	2500      	movs	r5, #0
  switch (BreakInput)
 8008252:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8008254:	462f      	mov	r7, r5
 8008256:	462c      	mov	r4, r5
 8008258:	462e      	mov	r6, r5
  switch (BreakInput)
 800825a:	d1e0      	bne.n	800821e <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 800825c:	6801      	ldr	r1, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800825e:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 8008260:	f8d1 c060 	ldr.w	ip, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008264:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008266:	40bb      	lsls	r3, r7
 8008268:	ea83 030c 	eor.w	r3, r3, ip
 800826c:	4033      	ands	r3, r6
 800826e:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008272:	fa02 f505 	lsl.w	r5, r2, r5
 8008276:	405d      	eors	r5, r3
 8008278:	402c      	ands	r4, r5
 800827a:	4063      	eors	r3, r4
      htim->Instance->AF1 = tmporx;
 800827c:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 800827e:	2300      	movs	r3, #0
 8008280:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8008284:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8008286:	4618      	mov	r0, r3
}
 8008288:	4770      	bx	lr
  __HAL_LOCK(htim);
 800828a:	2002      	movs	r0, #2
}
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	0800af14 	.word	0x0800af14
 8008294:	0800af54 	.word	0x0800af54
 8008298:	0800af94 	.word	0x0800af94
 800829c:	0800afd4 	.word	0x0800afd4

080082a0 <HAL_TIMEx_CommutCallback>:
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop

080082a4 <HAL_TIMEx_BreakCallback>:
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop

080082a8 <HAL_TIMEx_Break2Callback>:
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop

080082ac <HAL_TIMEx_EncoderIndexCallback>:
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop

080082b0 <HAL_TIMEx_DirectionChangeCallback>:
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop

080082b4 <HAL_TIMEx_IndexErrorCallback>:
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop

080082b8 <HAL_TIMEx_TransitionErrorCallback>:
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop

080082bc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80082be:	07da      	lsls	r2, r3, #31
{
 80082c0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082c2:	d506      	bpl.n	80082d2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082c4:	6801      	ldr	r1, [r0, #0]
 80082c6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80082c8:	684a      	ldr	r2, [r1, #4]
 80082ca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80082ce:	4322      	orrs	r2, r4
 80082d0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082d2:	079c      	lsls	r4, r3, #30
 80082d4:	d506      	bpl.n	80082e4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082d6:	6801      	ldr	r1, [r0, #0]
 80082d8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80082da:	684a      	ldr	r2, [r1, #4]
 80082dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80082e0:	4322      	orrs	r2, r4
 80082e2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082e4:	0759      	lsls	r1, r3, #29
 80082e6:	d506      	bpl.n	80082f6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082e8:	6801      	ldr	r1, [r0, #0]
 80082ea:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80082ec:	684a      	ldr	r2, [r1, #4]
 80082ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082f2:	4322      	orrs	r2, r4
 80082f4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082f6:	071a      	lsls	r2, r3, #28
 80082f8:	d506      	bpl.n	8008308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082fa:	6801      	ldr	r1, [r0, #0]
 80082fc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80082fe:	684a      	ldr	r2, [r1, #4]
 8008300:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008304:	4322      	orrs	r2, r4
 8008306:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008308:	06dc      	lsls	r4, r3, #27
 800830a:	d506      	bpl.n	800831a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800830c:	6801      	ldr	r1, [r0, #0]
 800830e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008310:	688a      	ldr	r2, [r1, #8]
 8008312:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008316:	4322      	orrs	r2, r4
 8008318:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800831a:	0699      	lsls	r1, r3, #26
 800831c:	d506      	bpl.n	800832c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800831e:	6801      	ldr	r1, [r0, #0]
 8008320:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008322:	688a      	ldr	r2, [r1, #8]
 8008324:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008328:	4322      	orrs	r2, r4
 800832a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800832c:	065a      	lsls	r2, r3, #25
 800832e:	d509      	bpl.n	8008344 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008330:	6801      	ldr	r1, [r0, #0]
 8008332:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008334:	684a      	ldr	r2, [r1, #4]
 8008336:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800833a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800833c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008340:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008342:	d00b      	beq.n	800835c <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008344:	061b      	lsls	r3, r3, #24
 8008346:	d506      	bpl.n	8008356 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008348:	6802      	ldr	r2, [r0, #0]
 800834a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800834c:	6853      	ldr	r3, [r2, #4]
 800834e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008352:	430b      	orrs	r3, r1
 8008354:	6053      	str	r3, [r2, #4]
  }
}
 8008356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800835a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800835c:	684a      	ldr	r2, [r1, #4]
 800835e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008360:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008364:	4322      	orrs	r2, r4
 8008366:	604a      	str	r2, [r1, #4]
 8008368:	e7ec      	b.n	8008344 <UART_AdvFeatureConfig+0x88>
 800836a:	bf00      	nop

0800836c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800836c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836e:	2300      	movs	r3, #0
{
 8008370:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008372:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008376:	f7fc fd51 	bl	8004e1c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8008380:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008382:	d40d      	bmi.n	80083a0 <UART_CheckIdleState+0x34>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	0752      	lsls	r2, r2, #29
 8008388:	d431      	bmi.n	80083ee <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800838c:	2220      	movs	r2, #32

  __HAL_UNLOCK(huart);
 800838e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8008392:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

  return HAL_OK;
 8008396:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8008398:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800839e:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a0:	69da      	ldr	r2, [r3, #28]
 80083a2:	0292      	lsls	r2, r2, #10
 80083a4:	d4ee      	bmi.n	8008384 <UART_CheckIdleState+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083a6:	f7fc fd39 	bl	8004e1c <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80083aa:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ac:	1b40      	subs	r0, r0, r5
 80083ae:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80083b2:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b4:	d22c      	bcs.n	8008410 <UART_CheckIdleState+0xa4>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083b6:	0750      	lsls	r0, r2, #29
 80083b8:	d5f2      	bpl.n	80083a0 <UART_CheckIdleState+0x34>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083ba:	69da      	ldr	r2, [r3, #28]
 80083bc:	0511      	lsls	r1, r2, #20
 80083be:	d5ef      	bpl.n	80083a0 <UART_CheckIdleState+0x34>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80083cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ce:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083d0:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d2:	f021 0101 	bic.w	r1, r1, #1
 80083d6:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80083d8:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 80083da:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 80083de:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 80083e2:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 80083e4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083e8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	0258      	lsls	r0, r3, #9
 80083f2:	d4ca      	bmi.n	800838a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083f4:	f7fc fd12 	bl	8004e1c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80083f8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083fa:	1b40      	subs	r0, r0, r5
 80083fc:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008400:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008402:	d205      	bcs.n	8008410 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008404:	0751      	lsls	r1, r2, #29
 8008406:	d5f2      	bpl.n	80083ee <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008408:	69da      	ldr	r2, [r3, #28]
 800840a:	0512      	lsls	r2, r2, #20
 800840c:	d5ef      	bpl.n	80083ee <UART_CheckIdleState+0x82>
 800840e:	e7d7      	b.n	80083c0 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008410:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008414:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008416:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8008418:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841a:	f022 0201 	bic.w	r2, r2, #1
 800841e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008420:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8008422:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8008426:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 800842a:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 800842c:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8008430:	bd38      	pop	{r3, r4, r5, pc}
 8008432:	bf00      	nop

08008434 <HAL_UART_Init>:
  if (huart == NULL)
 8008434:	2800      	cmp	r0, #0
 8008436:	f000 817f 	beq.w	8008738 <HAL_UART_Init+0x304>
  if (huart->gState == HAL_UART_STATE_RESET)
 800843a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800843e:	b570      	push	{r4, r5, r6, lr}
 8008440:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008442:	2b00      	cmp	r3, #0
 8008444:	d056      	beq.n	80084f4 <HAL_UART_Init+0xc0>
  __HAL_UART_DISABLE(huart);
 8008446:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008448:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800844a:	49c1      	ldr	r1, [pc, #772]	; (8008750 <HAL_UART_Init+0x31c>)
  huart->gState = HAL_UART_STATE_BUSY;
 800844c:	2224      	movs	r2, #36	; 0x24
 800844e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8008452:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008454:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8008456:	f020 0001 	bic.w	r0, r0, #1
 800845a:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800845c:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800845e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008460:	4332      	orrs	r2, r6
 8008462:	4302      	orrs	r2, r0
 8008464:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008466:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008468:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800846a:	430a      	orrs	r2, r1
 800846c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008472:	49b8      	ldr	r1, [pc, #736]	; (8008754 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008474:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008478:	432a      	orrs	r2, r5
 800847a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800847c:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800847e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008480:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008482:	d03c      	beq.n	80084fe <HAL_UART_Init+0xca>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008484:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008488:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800848c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8008490:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008492:	430a      	orrs	r2, r1
 8008494:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008498:	49af      	ldr	r1, [pc, #700]	; (8008758 <HAL_UART_Init+0x324>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800849a:	f022 020f 	bic.w	r2, r2, #15
 800849e:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084a0:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084a2:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084a4:	d012      	beq.n	80084cc <HAL_UART_Init+0x98>
 80084a6:	4aad      	ldr	r2, [pc, #692]	; (800875c <HAL_UART_Init+0x328>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d07b      	beq.n	80085a4 <HAL_UART_Init+0x170>
 80084ac:	4aac      	ldr	r2, [pc, #688]	; (8008760 <HAL_UART_Init+0x32c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	f000 8130 	beq.w	8008714 <HAL_UART_Init+0x2e0>
 80084b4:	4aab      	ldr	r2, [pc, #684]	; (8008764 <HAL_UART_Init+0x330>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	f000 80cf 	beq.w	800865a <HAL_UART_Init+0x226>
  huart->NbRxDataToProcess = 1;
 80084bc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 80084c0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80084c2:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80084c6:	66a2      	str	r2, [r4, #104]	; 0x68
}
 80084c8:	2001      	movs	r0, #1
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084cc:	4ba6      	ldr	r3, [pc, #664]	; (8008768 <HAL_UART_Init+0x334>)
 80084ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d2:	f003 0303 	and.w	r3, r3, #3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b02      	cmp	r3, #2
 80084da:	f240 80d7 	bls.w	800868c <HAL_UART_Init+0x258>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80084e2:	f000 8131 	beq.w	8008748 <HAL_UART_Init+0x314>
        pclk = HAL_RCC_GetPCLK2Freq();
 80084e6:	f7fe fe3f 	bl	8007168 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80084ea:	2800      	cmp	r0, #0
 80084ec:	f000 80d1 	beq.w	8008692 <HAL_UART_Init+0x25e>
 80084f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80084f2:	e081      	b.n	80085f8 <HAL_UART_Init+0x1c4>
    huart->Lock = HAL_UNLOCKED;
 80084f4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80084f8:	f7fc fa8a 	bl	8004a10 <HAL_UART_MspInit>
 80084fc:	e7a3      	b.n	8008446 <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084fe:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008502:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008506:	430a      	orrs	r2, r1
 8008508:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800850a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800850e:	4896      	ldr	r0, [pc, #600]	; (8008768 <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008510:	f022 020f 	bic.w	r2, r2, #15
 8008514:	430a      	orrs	r2, r1
 8008516:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008518:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800851c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008524:	f000 8134 	beq.w	8008790 <HAL_UART_Init+0x35c>
 8008528:	d80c      	bhi.n	8008544 <HAL_UART_Init+0x110>
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 812b 	beq.w	8008786 <HAL_UART_Init+0x352>
 8008530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008534:	d1c2      	bne.n	80084bc <HAL_UART_Init+0x88>
        pclk = HAL_RCC_GetSysClockFreq();
 8008536:	f7fe fcb5 	bl	8006ea4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800853a:	2800      	cmp	r0, #0
 800853c:	f000 80a9 	beq.w	8008692 <HAL_UART_Init+0x25e>
 8008540:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008542:	e004      	b.n	800854e <HAL_UART_Init+0x11a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008548:	d1b8      	bne.n	80084bc <HAL_UART_Init+0x88>
        pclk = (uint32_t) LSE_VALUE;
 800854a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800854e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008550:	4b86      	ldr	r3, [pc, #536]	; (800876c <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008552:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008556:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800855a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800855e:	42b3      	cmp	r3, r6
 8008560:	d3ac      	bcc.n	80084bc <HAL_UART_Init+0x88>
 8008562:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8008566:	d8a9      	bhi.n	80084bc <HAL_UART_Init+0x88>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008568:	2600      	movs	r6, #0
 800856a:	2300      	movs	r3, #0
 800856c:	4631      	mov	r1, r6
 800856e:	f7f8 f989 	bl	8000884 <__aeabi_uldivmod>
 8008572:	020b      	lsls	r3, r1, #8
 8008574:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008578:	0202      	lsls	r2, r0, #8
 800857a:	0868      	lsrs	r0, r5, #1
 800857c:	1810      	adds	r0, r2, r0
 800857e:	f143 0100 	adc.w	r1, r3, #0
 8008582:	462a      	mov	r2, r5
 8008584:	4633      	mov	r3, r6
 8008586:	f7f8 f97d 	bl	8000884 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800858a:	4b79      	ldr	r3, [pc, #484]	; (8008770 <HAL_UART_Init+0x33c>)
 800858c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8008590:	429a      	cmp	r2, r3
 8008592:	d893      	bhi.n	80084bc <HAL_UART_Init+0x88>
          huart->Instance->BRR = usartdiv;
 8008594:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8008596:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 800859a:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 800859c:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80085a0:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 80085a2:	e043      	b.n	800862c <HAL_UART_Init+0x1f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085a4:	4b70      	ldr	r3, [pc, #448]	; (8008768 <HAL_UART_Init+0x334>)
 80085a6:	4a73      	ldr	r2, [pc, #460]	; (8008774 <HAL_UART_Init+0x340>)
 80085a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ac:	f003 030c 	and.w	r3, r3, #12
 80085b0:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80085b6:	d079      	beq.n	80086ac <HAL_UART_Init+0x278>
    switch (clocksource)
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	f63f af7f 	bhi.w	80084bc <HAL_UART_Init+0x88>
 80085be:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <HAL_UART_Init+0x190>)
 80085c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c4:	08008687 	.word	0x08008687
 80085c8:	080084e7 	.word	0x080084e7
 80085cc:	08008657 	.word	0x08008657
 80085d0:	080084bd 	.word	0x080084bd
 80085d4:	0800867b 	.word	0x0800867b
 80085d8:	080084bd 	.word	0x080084bd
 80085dc:	080084bd 	.word	0x080084bd
 80085e0:	080084bd 	.word	0x080084bd
 80085e4:	080085f5 	.word	0x080085f5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085e8:	2b30      	cmp	r3, #48	; 0x30
 80085ea:	f47f af67 	bne.w	80084bc <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80085f2:	d074      	beq.n	80086de <HAL_UART_Init+0x2aa>
 80085f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085f8:	6862      	ldr	r2, [r4, #4]
 80085fa:	4b5c      	ldr	r3, [pc, #368]	; (800876c <HAL_UART_Init+0x338>)
 80085fc:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8008600:	fbb0 f3f3 	udiv	r3, r0, r3
 8008604:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008608:	fbb3 f3f2 	udiv	r3, r3, r2
 800860c:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800860e:	f1a3 0110 	sub.w	r1, r3, #16
 8008612:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008616:	4291      	cmp	r1, r2
 8008618:	f63f af50 	bhi.w	80084bc <HAL_UART_Init+0x88>
        huart->Instance->BRR = usartdiv;
 800861c:	6820      	ldr	r0, [r4, #0]
 800861e:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 8008620:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8008622:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8008626:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800862a:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800862c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800862e:	2b00      	cmp	r3, #0
 8008630:	d138      	bne.n	80086a4 <HAL_UART_Init+0x270>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800863a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800863c:	689a      	ldr	r2, [r3, #8]
 800863e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008642:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800864a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800864c:	601a      	str	r2, [r3, #0]
}
 800864e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 8008652:	f7ff be8b 	b.w	800836c <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 8008656:	4848      	ldr	r0, [pc, #288]	; (8008778 <HAL_UART_Init+0x344>)
 8008658:	e7ce      	b.n	80085f8 <HAL_UART_Init+0x1c4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800865a:	4b43      	ldr	r3, [pc, #268]	; (8008768 <HAL_UART_Init+0x334>)
 800865c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008660:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008664:	2b80      	cmp	r3, #128	; 0x80
 8008666:	f000 8095 	beq.w	8008794 <HAL_UART_Init+0x360>
 800866a:	d861      	bhi.n	8008730 <HAL_UART_Init+0x2fc>
 800866c:	b143      	cbz	r3, 8008680 <HAL_UART_Init+0x24c>
 800866e:	2b40      	cmp	r3, #64	; 0x40
 8008670:	f47f af24 	bne.w	80084bc <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008674:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008678:	d060      	beq.n	800873c <HAL_UART_Init+0x308>
        pclk = HAL_RCC_GetSysClockFreq();
 800867a:	f7fe fc13 	bl	8006ea4 <HAL_RCC_GetSysClockFreq>
        break;
 800867e:	e734      	b.n	80084ea <HAL_UART_Init+0xb6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008680:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008684:	d07c      	beq.n	8008780 <HAL_UART_Init+0x34c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008686:	f7fe fd5d 	bl	8007144 <HAL_RCC_GetPCLK1Freq>
        break;
 800868a:	e72e      	b.n	80084ea <HAL_UART_Init+0xb6>
 800868c:	4a3b      	ldr	r2, [pc, #236]	; (800877c <HAL_UART_Init+0x348>)
 800868e:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8008690:	e78f      	b.n	80085b2 <HAL_UART_Init+0x17e>
  huart->RxISR = NULL;
 8008692:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008694:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008698:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 800869a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800869e:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0c6      	beq.n	8008632 <HAL_UART_Init+0x1fe>
    UART_AdvFeatureConfig(huart);
 80086a4:	4620      	mov	r0, r4
 80086a6:	f7ff fe09 	bl	80082bc <UART_AdvFeatureConfig>
 80086aa:	e7c2      	b.n	8008632 <HAL_UART_Init+0x1fe>
    switch (clocksource)
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	f63f af05 	bhi.w	80084bc <HAL_UART_Init+0x88>
 80086b2:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <HAL_UART_Init+0x284>)
 80086b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b8:	08008781 	.word	0x08008781
 80086bc:	08008749 	.word	0x08008749
 80086c0:	080086dd 	.word	0x080086dd
 80086c4:	080084bd 	.word	0x080084bd
 80086c8:	0800873d 	.word	0x0800873d
 80086cc:	080084bd 	.word	0x080084bd
 80086d0:	080084bd 	.word	0x080084bd
 80086d4:	080084bd 	.word	0x080084bd
 80086d8:	080086df 	.word	0x080086df
        pclk = (uint32_t) HSI_VALUE;
 80086dc:	4826      	ldr	r0, [pc, #152]	; (8008778 <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086de:	6862      	ldr	r2, [r4, #4]
 80086e0:	4922      	ldr	r1, [pc, #136]	; (800876c <HAL_UART_Init+0x338>)
 80086e2:	0853      	lsrs	r3, r2, #1
 80086e4:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 80086e8:	fbb0 f0f1 	udiv	r0, r0, r1
 80086ec:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80086f0:	fbb0 f0f2 	udiv	r0, r0, r2
 80086f4:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086f6:	f1a2 0110 	sub.w	r1, r2, #16
 80086fa:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80086fe:	4299      	cmp	r1, r3
 8008700:	f63f aedc 	bhi.w	80084bc <HAL_UART_Init+0x88>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008704:	f020 030f 	bic.w	r3, r0, #15
 8008708:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800870a:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800870e:	6820      	ldr	r0, [r4, #0]
 8008710:	4313      	orrs	r3, r2
 8008712:	e784      	b.n	800861e <HAL_UART_Init+0x1ea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008714:	4b14      	ldr	r3, [pc, #80]	; (8008768 <HAL_UART_Init+0x334>)
 8008716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800871a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800871e:	2b20      	cmp	r3, #32
 8008720:	d038      	beq.n	8008794 <HAL_UART_Init+0x360>
 8008722:	f63f af61 	bhi.w	80085e8 <HAL_UART_Init+0x1b4>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0aa      	beq.n	8008680 <HAL_UART_Init+0x24c>
 800872a:	2b10      	cmp	r3, #16
 800872c:	d0a2      	beq.n	8008674 <HAL_UART_Init+0x240>
 800872e:	e6c5      	b.n	80084bc <HAL_UART_Init+0x88>
 8008730:	2bc0      	cmp	r3, #192	; 0xc0
 8008732:	f43f af5c 	beq.w	80085ee <HAL_UART_Init+0x1ba>
 8008736:	e6c1      	b.n	80084bc <HAL_UART_Init+0x88>
}
 8008738:	2001      	movs	r0, #1
 800873a:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 800873c:	f7fe fbb2 	bl	8006ea4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8008740:	2800      	cmp	r0, #0
 8008742:	d0a6      	beq.n	8008692 <HAL_UART_Init+0x25e>
 8008744:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008746:	e7ca      	b.n	80086de <HAL_UART_Init+0x2aa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008748:	f7fe fd0e 	bl	8007168 <HAL_RCC_GetPCLK2Freq>
        break;
 800874c:	e7f8      	b.n	8008740 <HAL_UART_Init+0x30c>
 800874e:	bf00      	nop
 8008750:	cfff69f3 	.word	0xcfff69f3
 8008754:	40008000 	.word	0x40008000
 8008758:	40013800 	.word	0x40013800
 800875c:	40004400 	.word	0x40004400
 8008760:	40004800 	.word	0x40004800
 8008764:	40004c00 	.word	0x40004c00
 8008768:	40021000 	.word	0x40021000
 800876c:	0800b028 	.word	0x0800b028
 8008770:	000ffcff 	.word	0x000ffcff
 8008774:	0800b018 	.word	0x0800b018
 8008778:	00f42400 	.word	0x00f42400
 800877c:	0800b014 	.word	0x0800b014
        pclk = HAL_RCC_GetPCLK1Freq();
 8008780:	f7fe fce0 	bl	8007144 <HAL_RCC_GetPCLK1Freq>
        break;
 8008784:	e7dc      	b.n	8008740 <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008786:	f7fe fcdd 	bl	8007144 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800878a:	2800      	cmp	r0, #0
 800878c:	d081      	beq.n	8008692 <HAL_UART_Init+0x25e>
 800878e:	e6d7      	b.n	8008540 <HAL_UART_Init+0x10c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008790:	4803      	ldr	r0, [pc, #12]	; (80087a0 <HAL_UART_Init+0x36c>)
 8008792:	e6dc      	b.n	800854e <HAL_UART_Init+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008794:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8008798:	4801      	ldr	r0, [pc, #4]	; (80087a0 <HAL_UART_Init+0x36c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800879a:	f47f af2d 	bne.w	80085f8 <HAL_UART_Init+0x1c4>
 800879e:	e79e      	b.n	80086de <HAL_UART_Init+0x2aa>
 80087a0:	00f42400 	.word	0x00f42400

080087a4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087a4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80087a8:	2a01      	cmp	r2, #1
 80087aa:	d017      	beq.n	80087dc <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087ac:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80087ae:	2124      	movs	r1, #36	; 0x24
{
 80087b0:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 80087b2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 80087b6:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087b8:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087ba:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087bc:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087be:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80087c2:	f024 0401 	bic.w	r4, r4, #1
 80087c6:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 80087c8:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087ca:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087cc:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087ce:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 80087d2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80087d4:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80087d8:	bc30      	pop	{r4, r5}
 80087da:	4770      	bx	lr
  __HAL_LOCK(huart);
 80087dc:	2002      	movs	r0, #2
}
 80087de:	4770      	bx	lr

080087e0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087e0:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80087e4:	2a01      	cmp	r2, #1
 80087e6:	d033      	beq.n	8008850 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 80087e8:	4603      	mov	r3, r0
 80087ea:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087ec:	681a      	ldr	r2, [r3, #0]
{
 80087ee:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80087f0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087f4:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087f6:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087f8:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 80087fa:	f020 0001 	bic.w	r0, r0, #1
 80087fe:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008800:	6890      	ldr	r0, [r2, #8]
 8008802:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8008806:	4301      	orrs	r1, r0
 8008808:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800880a:	b1f5      	cbz	r5, 800884a <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800880c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800880e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008810:	4810      	ldr	r0, [pc, #64]	; (8008854 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8008812:	4f11      	ldr	r7, [pc, #68]	; (8008858 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008814:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008818:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800881a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800881c:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 800881e:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008820:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008822:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008824:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008826:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800882a:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800882e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8008832:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8008834:	2520      	movs	r5, #32
 8008836:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800883a:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800883c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8008840:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008842:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8008846:	bcf0      	pop	{r4, r5, r6, r7}
 8008848:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800884a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800884c:	4608      	mov	r0, r1
 800884e:	e7ee      	b.n	800882e <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8008850:	2002      	movs	r0, #2
}
 8008852:	4770      	bx	lr
 8008854:	0800b048 	.word	0x0800b048
 8008858:	0800b040 	.word	0x0800b040

0800885c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800885c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8008860:	2a01      	cmp	r2, #1
 8008862:	d033      	beq.n	80088cc <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 8008864:	4603      	mov	r3, r0
 8008866:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008868:	681a      	ldr	r2, [r3, #0]
{
 800886a:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800886c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008870:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008872:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008874:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8008876:	f020 0001 	bic.w	r0, r0, #1
 800887a:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800887c:	6890      	ldr	r0, [r2, #8]
 800887e:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8008882:	4301      	orrs	r1, r0
 8008884:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008886:	b1f5      	cbz	r5, 80088c6 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008888:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800888a:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800888c:	4810      	ldr	r0, [pc, #64]	; (80088d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800888e:	4f11      	ldr	r7, [pc, #68]	; (80088d4 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008890:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008894:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008896:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008898:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 800889a:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 800889c:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800889e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088a0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088a2:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088a6:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088aa:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80088ae:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80088b0:	2520      	movs	r5, #32
 80088b2:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088b6:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80088b8:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80088bc:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80088be:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80088c2:	bcf0      	pop	{r4, r5, r6, r7}
 80088c4:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80088c6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80088c8:	4608      	mov	r0, r1
 80088ca:	e7ee      	b.n	80088aa <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 80088cc:	2002      	movs	r0, #2
}
 80088ce:	4770      	bx	lr
 80088d0:	0800b048 	.word	0x0800b048
 80088d4:	0800b040 	.word	0x0800b040

080088d8 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80088d8:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80088da:	8840      	ldrh	r0, [r0, #2]
 80088dc:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80088e0:	0c00      	lsrs	r0, r0, #16
 80088e2:	4770      	bx	lr

080088e4 <Circle_Limitation>:

#if defined CIRCLE_LIMITATION_SQRT_M0
const uint16_t SqrtTable[1025] = SQRT_CIRCLE_LIMITATION;
#endif
__weak qd_t Circle_Limitation(CircleLimitation_Handle_t * pHandle, qd_t Vqd)
{
 80088e4:	b570      	push	{r4, r5, r6, lr}
  int32_t vd_square_limit;
  int32_t new_q;
  int32_t new_d;
  qd_t Local_Vqd=Vqd;

  MaxModule = pHandle->MaxModule;
 80088e6:	8803      	ldrh	r3, [r0, #0]
 80088e8:	140c      	asrs	r4, r1, #16
{
 80088ea:	b084      	sub	sp, #16
 80088ec:	b20d      	sxth	r5, r1

  square_q = (int32_t)(Vqd.q) * Vqd.q;
  square_d = (int32_t)(Vqd.d) * Vqd.d;
 80088ee:	fb04 f204 	mul.w	r2, r4, r4
{
 80088f2:	9101      	str	r1, [sp, #4]
  square_limit = MaxModule * MaxModule;
 80088f4:	fb03 f303 	mul.w	r3, r3, r3
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
  square_sum = square_q + square_d;
 80088f8:	fb05 2105 	mla	r1, r5, r5, r2

  if (square_sum > square_limit)
 80088fc:	428b      	cmp	r3, r1
 80088fe:	da10      	bge.n	8008922 <Circle_Limitation+0x3e>
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
 8008900:	8846      	ldrh	r6, [r0, #2]
 8008902:	fb06 f006 	mul.w	r0, r6, r6
  {
    if(square_d <= vd_square_limit)
 8008906:	4282      	cmp	r2, r0
 8008908:	dd14      	ble.n	8008934 <Circle_Limitation+0x50>
      new_d = Vqd.d;
    }
    else
    {
      new_d = pHandle->MaxVd;
      if(Vqd.d < 0)
 800890a:	2c00      	cmp	r4, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
      square_temp = (square_limit - vd_square_limit)/1048576;
      new_q = SqrtTable[square_temp];
#else
      square_temp = square_limit - vd_square_limit;
      new_q = MCM_Sqrt(square_temp);
 800890c:	eba3 0000 	sub.w	r0, r3, r0
        new_d = -new_d;
 8008910:	bfb8      	it	lt
 8008912:	4276      	neglt	r6, r6
      new_q = MCM_Sqrt(square_temp);
 8008914:	f7f9 fdd0 	bl	80024b8 <MCM_Sqrt>
#endif
      if(Vqd.q < 0)
 8008918:	2d00      	cmp	r5, #0
      {
        new_q = - new_q;
 800891a:	bfb8      	it	lt
 800891c:	4240      	neglt	r0, r0
 800891e:	b234      	sxth	r4, r6
      }
    }
    Local_Vqd.q = new_q;
 8008920:	b205      	sxth	r5, r0
    Local_Vqd.d = new_d;
  }
  return(Local_Vqd);
 8008922:	b2ad      	uxth	r5, r5
 8008924:	2000      	movs	r0, #0
 8008926:	b2a4      	uxth	r4, r4
 8008928:	f365 000f 	bfi	r0, r5, #0, #16
 800892c:	f364 401f 	bfi	r0, r4, #16, #16
}
 8008930:	b004      	add	sp, #16
 8008932:	bd70      	pop	{r4, r5, r6, pc}
      new_q = MCM_Sqrt(square_temp);
 8008934:	1a98      	subs	r0, r3, r2
 8008936:	f7f9 fdbf 	bl	80024b8 <MCM_Sqrt>
      if(Vqd.q < 0)
 800893a:	2d00      	cmp	r5, #0
 800893c:	daf0      	bge.n	8008920 <Circle_Limitation+0x3c>
        new_q = -new_q;
 800893e:	4240      	negs	r0, r0
 8008940:	e7ee      	b.n	8008920 <Circle_Limitation+0x3c>
 8008942:	bf00      	nop

08008944 <EAC_Init>:
* @param  pENC: the encoder used by the EAC.
* @retval none.
*/
__weak void EAC_Init( EncAlign_Handle_t * pHandle, SpeednTorqCtrl_Handle_t * pSTC, VirtualSpeedSensor_Handle_t * pVSS,
               ENCODER_Handle_t * pENC )
{
 8008944:	b410      	push	{r4}
  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pENC = pENC;
  pHandle->EncAligned = false;
 8008946:	2400      	movs	r4, #0
 8008948:	81c4      	strh	r4, [r0, #14]
  pHandle->pVSS = pVSS;
 800894a:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->EncRestart = false;
}
 800894e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pENC = pENC;
 8008952:	6083      	str	r3, [r0, #8]
}
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop

08008958 <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 8008958:	b510      	push	{r4, lr}
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 800895a:	2200      	movs	r2, #0
{
 800895c:	4604      	mov	r4, r0
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 800895e:	4611      	mov	r1, r2
 8008960:	6840      	ldr	r0, [r0, #4]
 8008962:	f002 f909 	bl	800ab78 <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 8008966:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800896a:	6860      	ldr	r0, [r4, #4]
 800896c:	f002 f8fc 	bl	800ab68 <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8008970:	6820      	ldr	r0, [r4, #0]
 8008972:	2100      	movs	r1, #0
 8008974:	f001 fd32 	bl	800a3dc <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 8008978:	2200      	movs	r2, #0
 800897a:	4611      	mov	r1, r2
 800897c:	6820      	ldr	r0, [r4, #0]
 800897e:	f001 fd31 	bl	800a3e4 <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 8008982:	8ae2      	ldrh	r2, [r4, #22]
 8008984:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8008988:	6820      	ldr	r0, [r4, #0]
 800898a:	f001 fd2b 	bl	800a3e4 <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 800898e:	8ae1      	ldrh	r1, [r4, #22]
 8008990:	8a23      	ldrh	r3, [r4, #16]
  wAux /= 1000u;
 8008992:	4a04      	ldr	r2, [pc, #16]	; (80089a4 <EAC_StartAlignment+0x4c>)
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8008994:	fb03 f301 	mul.w	r3, r3, r1
  wAux /= 1000u;
 8008998:	fba2 2303 	umull	r2, r3, r2, r3
 800899c:	099b      	lsrs	r3, r3, #6
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
  pHandle->hRemainingTicks++;
 800899e:	3301      	adds	r3, #1
 80089a0:	81a3      	strh	r3, [r4, #12]
}
 80089a2:	bd10      	pop	{r4, pc}
 80089a4:	10624dd3 	.word	0x10624dd3

080089a8 <EAC_Exec>:
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hRemainingTicks > 0u )
 80089a8:	8983      	ldrh	r3, [r0, #12]
 80089aa:	b13b      	cbz	r3, 80089bc <EAC_Exec+0x14>
  {
    pHandle->hRemainingTicks--;
 80089ac:	3b01      	subs	r3, #1
 80089ae:	b29b      	uxth	r3, r3
{
 80089b0:	b510      	push	{r4, lr}
 80089b2:	4604      	mov	r4, r0
    pHandle->hRemainingTicks--;
 80089b4:	8183      	strh	r3, [r0, #12]

    if ( pHandle->hRemainingTicks == 0u )
 80089b6:	b11b      	cbz	r3, 80089c0 <EAC_Exec+0x18>
      pHandle->EncAligned = true;
      retVal = true;
    }
    else
    {
      retVal = false;
 80089b8:	2000      	movs	r0, #0
    }
  }

  return retVal;
}
 80089ba:	bd10      	pop	{r4, pc}
  bool retVal = true;
 80089bc:	2001      	movs	r0, #1
}
 80089be:	4770      	bx	lr
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 80089c0:	7e03      	ldrb	r3, [r0, #24]
 80089c2:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 80089c6:	6880      	ldr	r0, [r0, #8]
 80089c8:	fb91 f1f3 	sdiv	r1, r1, r3
 80089cc:	f000 f948 	bl	8008c60 <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 80089d0:	2001      	movs	r0, #1
 80089d2:	73a0      	strb	r0, [r4, #14]
}
 80089d4:	bd10      	pop	{r4, pc}
 80089d6:	bf00      	nop

080089d8 <EAC_IsAligned>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncAligned;
}
 80089d8:	7b80      	ldrb	r0, [r0, #14]
 80089da:	4770      	bx	lr

080089dc <EAC_SetRestartState>:
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
  pHandle->EncRestart = restart;
 80089dc:	73c1      	strb	r1, [r0, #15]
}
 80089de:	4770      	bx	lr

080089e0 <EAC_GetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncRestart;
}
 80089e0:	7bc0      	ldrb	r0, [r0, #15]
 80089e2:	4770      	bx	lr

080089e4 <ENC_Init>:
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{

  TIM_TypeDef * TIMx = pHandle->TIMx;
 80089e4:	6a03      	ldr	r3, [r0, #32]
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80089e6:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
{
 80089ea:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80089ec:	681d      	ldr	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80089ee:	f8b0 606e 	ldrh.w	r6, [r0, #110]	; 0x6e
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80089f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80089f6:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 80089f8:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80089fa:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 80089fe:	601d      	str	r5, [r3, #0]
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8008a00:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 8008a04:	6259      	str	r1, [r3, #36]	; 0x24
 8008a06:	fbb4 f4f6 	udiv	r4, r4, r6
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 8008a0a:	6242      	str	r2, [r0, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 8008a0c:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8008a0e:	699a      	ldr	r2, [r3, #24]

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 8008a10:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8008a14:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008a18:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8008a1c:	619a      	str	r2, [r3, #24]
 8008a1e:	699a      	ldr	r2, [r3, #24]
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH2, ( uint32_t )(pHandle->ICx_Filter << 20));
 8008a20:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 8008a24:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8008a28:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a2c:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8008a30:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a32:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	f042 0201 	orr.w	r2, r2, #1
 8008a3a:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	f042 0201 	orr.w	r2, r2, #1
 8008a42:	601a      	str	r2, [r3, #0]

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 8008a44:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75

  for ( Index = 0u; Index < BufferSize; Index++ )
 8008a48:	b13a      	cbz	r2, 8008a5a <ENC_Init+0x76>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8008a4a:	3a01      	subs	r2, #1
 8008a4c:	b2d2      	uxtb	r2, r2
 8008a4e:	3201      	adds	r2, #1
  }
}
 8008a50:	bc70      	pop	{r4, r5, r6}
 8008a52:	0092      	lsls	r2, r2, #2
 8008a54:	3028      	adds	r0, #40	; 0x28
 8008a56:	f002 b8ff 	b.w	800ac58 <memset>
 8008a5a:	bc70      	pop	{r4, r5, r6}
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop

08008a60 <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 8008a60:	b510      	push	{r4, lr}
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8008a62:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
{
 8008a66:	4604      	mov	r4, r0
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8008a68:	b13a      	cbz	r2, 8008a7a <ENC_Clear+0x1a>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8008a6a:	3a01      	subs	r2, #1
 8008a6c:	b2d2      	uxtb	r2, r2
 8008a6e:	3201      	adds	r2, #1
 8008a70:	0092      	lsls	r2, r2, #2
 8008a72:	2100      	movs	r1, #0
 8008a74:	3028      	adds	r0, #40	; 0x28
 8008a76:	f002 f8ef 	bl	800ac58 <memset>
  }
  pHandle->SensorIsReliable = true;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
}
 8008a80:	bd10      	pop	{r4, pc}
 8008a82:	bf00      	nop

08008a84 <ENC_CalcAngle>:
  int32_t wtemp1;
  int16_t elAngle;  /* s16degree format */
  int16_t mecAngle; /* s16degree format */
  /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1 
   if the overflow occurs just after the entry in the High frequency task */
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8008a84:	6a01      	ldr	r1, [r0, #32]
 8008a86:	6e82      	ldr	r2, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 8008a88:	6a49      	ldr	r1, [r1, #36]	; 0x24
{
 8008a8a:	b410      	push	{r4}
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8008a8c:	b289      	uxth	r1, r1
 8008a8e:	fb02 f201 	mul.w	r2, r2, r1
{
 8008a92:	4603      	mov	r3, r0
           ( int32_t )( pHandle->U32MAXdivPulseNumber );

  /*Computes and stores the rotor mechanical angle*/
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8008a94:	2a00      	cmp	r2, #0
 8008a96:	bfb8      	it	lt
 8008a98:	f64f 70ff 	movwlt	r0, #65535	; 0xffff

  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8008a9c:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;

  pHandle->_Super.hElAngle = elAngle;
  
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8008aa0:	689c      	ldr	r4, [r3, #8]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8008aa2:	bfb8      	it	lt
 8008aa4:	1812      	addlt	r2, r2, r0
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8008aa6:	7858      	ldrb	r0, [r3, #1]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8008aa8:	1412      	asrs	r2, r2, #16
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8008aaa:	fb00 f002 	mul.w	r0, r0, r2
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8008aae:	1a51      	subs	r1, r2, r1
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8008ab0:	b200      	sxth	r0, r0
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8008ab2:	fa04 f181 	sxtah	r1, r4, r1
  pHandle->_Super.hElAngle = elAngle;
 8008ab6:	8098      	strh	r0, [r3, #4]

  /*Returns rotor electrical angle*/
  return ( elAngle );
}
 8008ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8008abc:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8008abe:	6099      	str	r1, [r3, #8]
}
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop

08008ac4 <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 8008ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8008ac6:	6a03      	ldr	r3, [r0, #32]
  int32_t wOverallAngleVariation = 0;
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
  bool bReliability = true;
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8008ac8:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008acc:	68dc      	ldr	r4, [r3, #12]
 8008ace:	f024 0401 	bic.w	r4, r4, #1
 8008ad2:	60dc      	str	r4, [r3, #12]
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
  OverflowCntSample = pHandle->TimerOverflowNb;
  pHandle->TimerOverflowNb = 0;
 8008ad4:	2600      	movs	r6, #0
  return (uint32_t)(READ_REG(TIMx->CNT));
 8008ad6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  OverflowCntSample = pHandle->TimerOverflowNb;
 8008ad8:	f8b0 4070 	ldrh.w	r4, [r0, #112]	; 0x70
  pHandle->TimerOverflowNb = 0;
 8008adc:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8008ae0:	681e      	ldr	r6, [r3, #0]
  directionSample =  LL_TIM_GetDirection( TIMx );
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
  if ( OFbit )
 8008ae2:	0fef      	lsrs	r7, r5, #31
 8008ae4:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008ae8:	bf1c      	itt	ne
 8008aea:	f06f 0601 	mvnne.w	r6, #1
 8008aee:	611e      	strne	r6, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008af0:	68de      	ldr	r6, [r3, #12]
  OverflowCntSample = pHandle->TimerOverflowNb;
 8008af2:	b2a4      	uxth	r4, r4
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 8008af4:	443c      	add	r4, r7
 8008af6:	f046 0601 	orr.w	r6, r6, #1
 8008afa:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8008afe:	60de      	str	r6, [r3, #12]
  {
    pHandle->TimerOverflowError = true;
 8008b00:	bf8a      	itet	hi
 8008b02:	2601      	movhi	r6, #1
 8008b04:	f890 6079 	ldrbls.w	r6, [r0, #121]	; 0x79
 8008b08:	f880 6079 	strbhi.w	r6, [r0, #121]	; 0x79
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 8008b0c:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
  }

  /*Calculation of delta angle*/
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 8008b10:	f1bc 0f00 	cmp.w	ip, #0
 8008b14:	f000 808d 	beq.w	8008c32 <ENC_CalcAvrgMecSpeedUnit+0x16e>
    /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
    OverflowCntSample = ( CntCapture > pHandle->PreviousCapture ) ? 1 : 0;
#endif
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8008b18:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008b1c:	f890 c078 	ldrb.w	ip, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8008b20:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8008b24:	1aeb      	subs	r3, r5, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008b26:	f10c 0c0a 	add.w	ip, ip, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 8008b2a:	fb07 3414 	mls	r4, r7, r4, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008b2e:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
  }


  /*Computes & returns average mechanical speed */
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	f000 808d 	beq.w	8008c52 <ENC_CalcAvrgMecSpeedUnit+0x18e>
 8008b38:	2a01      	cmp	r2, #1
  {
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b3c:	d939      	bls.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b3e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b40:	2a02      	cmp	r2, #2
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b42:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b44:	d035      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b46:	6b04      	ldr	r4, [r0, #48]	; 0x30
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b48:	2a03      	cmp	r2, #3
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b4a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b4c:	d031      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b4e:	6b44      	ldr	r4, [r0, #52]	; 0x34
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b50:	2a04      	cmp	r2, #4
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b52:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b54:	d02d      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b56:	6b84      	ldr	r4, [r0, #56]	; 0x38
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b58:	2a05      	cmp	r2, #5
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b5a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b5c:	d029      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b5e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b60:	2a06      	cmp	r2, #6
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b62:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b64:	d025      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b66:	6c04      	ldr	r4, [r0, #64]	; 0x40
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b68:	2a07      	cmp	r2, #7
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b6a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b6c:	d021      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b6e:	6c44      	ldr	r4, [r0, #68]	; 0x44
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b70:	2a08      	cmp	r2, #8
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b72:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b74:	d01d      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b76:	6c84      	ldr	r4, [r0, #72]	; 0x48
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b78:	2a09      	cmp	r2, #9
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b7a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b7c:	d019      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b7e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b80:	2a0a      	cmp	r2, #10
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b82:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b84:	d015      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b86:	6d04      	ldr	r4, [r0, #80]	; 0x50
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b88:	2a0b      	cmp	r2, #11
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b8a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b8c:	d011      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b8e:	6d44      	ldr	r4, [r0, #84]	; 0x54
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b90:	2a0c      	cmp	r2, #12
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b92:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b94:	d00d      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b96:	6d84      	ldr	r4, [r0, #88]	; 0x58
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b98:	2a0d      	cmp	r2, #13
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b9a:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008b9c:	d009      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008b9e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008ba0:	2a0e      	cmp	r2, #14
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008ba2:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008ba4:	d005      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008ba6:	6e04      	ldr	r4, [r0, #96]	; 0x60
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008ba8:	2a0f      	cmp	r2, #15
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008baa:	4423      	add	r3, r4
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008bac:	d001      	beq.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8008bae:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8008bb0:	4423      	add	r3, r4
  }
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8008bb2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 8008bb4:	fb07 f202 	mul.w	r2, r7, r2
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8008bb8:	fb04 f303 	mul.w	r3, r4, r3
           ( int32_t )( pHandle->SpeedBufferSize );
  wtemp1 /= wtemp2;
 8008bbc:	fb93 f3f2 	sdiv	r3, r3, r2
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 8008bc0:	b21f      	sxth	r7, r3
 8008bc2:	800f      	strh	r7, [r1, #0]

  /*Stores average mechanical speed */
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;

  /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8008bc4:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;

  /*last captured value update*/
  pHandle->PreviousCapture = CntCapture;
  /*Buffer index update*/
  pHandle->DeltaCapturesIndex++;
 8008bc8:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8008bcc:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 8008bd0:	f8b0 e06c 	ldrh.w	lr, [r0, #108]	; 0x6c
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 8008bd4:	8187      	strh	r7, [r0, #12]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8008bd6:	340a      	adds	r4, #10
  pHandle->DeltaCapturesIndex++;
 8008bd8:	3201      	adds	r2, #1
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8008bda:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8008bde:	69c4      	ldr	r4, [r0, #28]
  pHandle->PreviousCapture = CntCapture;
 8008be0:	f8a0 5072 	strh.w	r5, [r0, #114]	; 0x72
  pHandle->DeltaCapturesIndex++;
 8008be4:	b2d2      	uxtb	r2, r2
 8008be6:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 8008bea:	eba3 020c 	sub.w	r2, r3, ip
 8008bee:	8242      	strh	r2, [r0, #18]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8008bf0:	fb07 f30e 	mul.w	r3, r7, lr

  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8008bf4:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 8008bf8:	f890 7078 	ldrb.w	r7, [r0, #120]	; 0x78
           ( int32_t )pHandle->_Super.bElToMecRatio;
 8008bfc:	7845      	ldrb	r5, [r0, #1]
  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 8008bfe:	42ba      	cmp	r2, r7
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 8008c00:	fb05 f303 	mul.w	r3, r5, r3
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 8008c04:	f8b0 506e 	ldrh.w	r5, [r0, #110]	; 0x6e
 8008c08:	fb93 f3f5 	sdiv	r3, r3, r5
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 8008c0c:	fb04 f403 	mul.w	r4, r4, r3
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8008c10:	8b43      	ldrh	r3, [r0, #26]
 8008c12:	fb94 f4f3 	sdiv	r4, r4, r3
  {
    pHandle->DeltaCapturesIndex = 0u;
 8008c16:	bf08      	it	eq
 8008c18:	2300      	moveq	r3, #0
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 8008c1a:	81c4      	strh	r4, [r0, #14]
    pHandle->DeltaCapturesIndex = 0u;
 8008c1c:	bf08      	it	eq
 8008c1e:	f880 3078 	strbeq.w	r3, [r0, #120]	; 0x78
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 8008c22:	b1c6      	cbz	r6, 8008c56 <ENC_CalcAvrgMecSpeedUnit+0x192>
  {
    bReliability = false;
    pHandle->SensorIsReliable = false;
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008c24:	78c2      	ldrb	r2, [r0, #3]
 8008c26:	7002      	strb	r2, [r0, #0]
    pHandle->SensorIsReliable = false;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
  }

  return ( bReliability );
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8008c32:	f8b0 c072 	ldrh.w	ip, [r0, #114]	; 0x72
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008c36:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8008c3a:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8008c3e:	eba5 0c0c 	sub.w	ip, r5, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008c42:	330a      	adds	r3, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8008c44:	fb07 c404 	mla	r4, r7, r4, ip
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8008c48:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8008c4c:	2a00      	cmp	r2, #0
 8008c4e:	f47f af73 	bne.w	8008b38 <ENC_CalcAvrgMecSpeedUnit+0x74>
  int32_t wOverallAngleVariation = 0;
 8008c52:	4613      	mov	r3, r2
 8008c54:	e7ad      	b.n	8008bb2 <ENC_CalcAvrgMecSpeedUnit+0xee>
}
 8008c56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 8008c5a:	f001 bb59 	b.w	800a310 <SPD_IsMecSpeedReliable>
 8008c5e:	bf00      	nop

08008c60 <ENC_SetMecAngle>:

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  pHandle->_Super.hMecAngle = hMecAngle;
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8008c60:	7843      	ldrb	r3, [r0, #1]
  pHandle->_Super.hMecAngle = hMecAngle;
 8008c62:	80c1      	strh	r1, [r0, #6]
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8008c64:	fb03 f301 	mul.w	r3, r3, r1
 8008c68:	8083      	strh	r3, [r0, #4]
  if ( hMecAngle < 0 )
 8008c6a:	2900      	cmp	r1, #0
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8008c6c:	b28b      	uxth	r3, r1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8008c6e:	6a02      	ldr	r2, [r0, #32]
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8008c70:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 8008c74:	4905      	ldr	r1, [pc, #20]	; (8008c8c <ENC_SetMecAngle+0x2c>)
 8008c76:	bfbc      	itt	lt
 8008c78:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008c7c:	b29b      	uxthlt	r3, r3
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 8008c7e:	fb03 f300 	mul.w	r3, r3, r0
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8008c82:	fba1 1303 	umull	r1, r3, r1, r3
 8008c86:	0bdb      	lsrs	r3, r3, #15

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 8008c88:	6253      	str	r3, [r2, #36]	; 0x24
  
}
 8008c8a:	4770      	bx	lr
 8008c8c:	80008001 	.word	0x80008001

08008c90 <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 8008c90:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;

  return MC_NULL;
}
 8008c92:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1u;
 8008c94:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8008c98:	3301      	adds	r3, #1
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop

08008ca4 <MCP_ReceivedPacket>:
#include "mcp.h"
#include "register_interface.h"
#include "mc_config.h"

void MCP_ReceivedPacket(MCP_Handle_t * pHandle)
{
 8008ca4:	b538      	push	{r3, r4, r5, lr}
  uint16_t * packetHeader;
  uint16_t command;
  uint8_t motorID;
  uint8_t MCPResponse;
  
  if (pHandle->rxLength != 0)
 8008ca6:	8983      	ldrh	r3, [r0, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d03a      	beq.n	8008d22 <MCP_ReceivedPacket+0x7e>
  {
    packetHeader = (uint16_t *) pHandle->rxBuffer;  
    command = *packetHeader & CMD_MASK;
 8008cac:	6843      	ldr	r3, [r0, #4]
    motorID = (*packetHeader & MOTOR_MASK)-1;
    
    MCI_Handle_t * pMCI = &Mci[motorID];
 8008cae:	4d39      	ldr	r5, [pc, #228]	; (8008d94 <MCP_ReceivedPacket+0xf0>)
    command = *packetHeader & CMD_MASK;
 8008cb0:	881b      	ldrh	r3, [r3, #0]
    motorID = (*packetHeader & MOTOR_MASK)-1;
 8008cb2:	f003 0207 	and.w	r2, r3, #7
 8008cb6:	3a01      	subs	r2, #1
    command = *packetHeader & CMD_MASK;
 8008cb8:	f023 0307 	bic.w	r3, r3, #7
    MCI_Handle_t * pMCI = &Mci[motorID];
 8008cbc:	b2d2      	uxtb	r2, r2
    /* Initialization of the tx length, command which send back data has to increment the txLength (case of Read register)*/
    pHandle->txLength = 0;
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	3b08      	subs	r3, #8
 8008cc2:	4604      	mov	r4, r0
    MCI_Handle_t * pMCI = &Mci[motorID];
 8008cc4:	eb05 1542 	add.w	r5, r5, r2, lsl #5
    pHandle->txLength = 0;
 8008cc8:	81c1      	strh	r1, [r0, #14]
    
    switch (command) 
 8008cca:	2b40      	cmp	r3, #64	; 0x40
 8008ccc:	d822      	bhi.n	8008d14 <MCP_ReceivedPacket+0x70>
 8008cce:	e8df f003 	tbb	[pc, r3]
 8008cd2:	2141      	.short	0x2141
 8008cd4:	21212121 	.word	0x21212121
 8008cd8:	21452121 	.word	0x21452121
 8008cdc:	21212121 	.word	0x21212121
 8008ce0:	21332121 	.word	0x21332121
 8008ce4:	21212121 	.word	0x21212121
 8008ce8:	212d2121 	.word	0x212d2121
 8008cec:	21212121 	.word	0x21212121
 8008cf0:	21492121 	.word	0x21492121
 8008cf4:	21212121 	.word	0x21212121
 8008cf8:	21292121 	.word	0x21292121
 8008cfc:	21212121 	.word	0x21212121
 8008d00:	21512121 	.word	0x21512121
 8008d04:	21212121 	.word	0x21212121
 8008d08:	21572121 	.word	0x21572121
 8008d0c:	21212121 	.word	0x21212121
 8008d10:	2121      	.short	0x2121
 8008d12:	3b          	.byte	0x3b
 8008d13:	00          	.byte	0x00
    pHandle->txLength = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	2002      	movs	r0, #2
      case PFC_DISABLE:
      case PFC_FAULT_ACK:
      default :
        MCPResponse = MCP_CMD_UNKNOWN;
      }
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008d18:	68a2      	ldr	r2, [r4, #8]
 8008d1a:	54d0      	strb	r0, [r2, r3]
      pHandle->txLength++;
 8008d1c:	89e3      	ldrh	r3, [r4, #14]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	81e3      	strh	r3, [r4, #14]
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
    /* Nothing to do, txBuffer and txLength have not been modified */
  } 
}
 8008d22:	bd38      	pop	{r3, r4, r5, pc}
          if (MCI_GetSTMState(pMCI) == IDLE)
 8008d24:	4628      	mov	r0, r5
 8008d26:	f7f9 fa9b 	bl	8002260 <MCI_GetSTMState>
 8008d2a:	b128      	cbz	r0, 8008d38 <MCP_ReceivedPacket+0x94>
            MCI_StopMotor(pMCI);
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	f7f9 fa4f 	bl	80021d0 <MCI_StopMotor>
            MCPResponse = MCP_CMD_OK;
 8008d32:	89e3      	ldrh	r3, [r4, #14]
 8008d34:	2000      	movs	r0, #0
 8008d36:	e7ef      	b.n	8008d18 <MCP_ReceivedPacket+0x74>
            MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f7f9 fa3f 	bl	80021bc <MCI_StartMotor>
 8008d3e:	f080 0001 	eor.w	r0, r0, #1
 8008d42:	89e3      	ldrh	r3, [r4, #14]
 8008d44:	b2c0      	uxtb	r0, r0
 8008d46:	e7e7      	b.n	8008d18 <MCP_ReceivedPacket+0x74>
        MCI_Clear_Iqdref(pMCI);
 8008d48:	4628      	mov	r0, r5
 8008d4a:	f7f9 fb09 	bl	8002360 <MCI_Clear_Iqdref>
        break;
 8008d4e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008d50:	2000      	movs	r0, #0
        break;
 8008d52:	e7e1      	b.n	8008d18 <MCP_ReceivedPacket+0x74>
        MCPResponse = RI_SetRegCommandParser (pHandle); 
 8008d54:	f7fa f9c8 	bl	80030e8 <RI_SetRegCommandParser>
      break;
 8008d58:	89e3      	ldrh	r3, [r4, #14]
 8008d5a:	e7dd      	b.n	8008d18 <MCP_ReceivedPacket+0x74>
        MCPResponse = RI_GetRegCommandParser (pHandle); 
 8008d5c:	f7fa fce2 	bl	8003724 <RI_GetRegCommandParser>
        break;
 8008d60:	89e3      	ldrh	r3, [r4, #14]
 8008d62:	e7d9      	b.n	8008d18 <MCP_ReceivedPacket+0x74>
          if (MCI_GetSTMState(pMCI) == RUN)
 8008d64:	4628      	mov	r0, r5
 8008d66:	f7f9 fa7b 	bl	8002260 <MCI_GetSTMState>
 8008d6a:	2806      	cmp	r0, #6
 8008d6c:	d00c      	beq.n	8008d88 <MCP_ReceivedPacket+0xe4>
        break;
 8008d6e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008d70:	2000      	movs	r0, #0
        break;
 8008d72:	e7d1      	b.n	8008d18 <MCP_ReceivedPacket+0x74>
          MCI_FaultAcknowledged(pMCI);
 8008d74:	4628      	mov	r0, r5
 8008d76:	f7f9 fa2f 	bl	80021d8 <MCI_FaultAcknowledged>
        break;
 8008d7a:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 8008d7c:	2000      	movs	r0, #0
        break;
 8008d7e:	e7cb      	b.n	8008d18 <MCP_ReceivedPacket+0x74>
        MCI_EncoderAlign(pMCI);
 8008d80:	4628      	mov	r0, r5
 8008d82:	f7f9 fa2d 	bl	80021e0 <MCI_EncoderAlign>
 8008d86:	e7f2      	b.n	8008d6e <MCP_ReceivedPacket+0xca>
            MCI_StopRamp(pMCI);
 8008d88:	4628      	mov	r0, r5
 8008d8a:	f7f9 fa81 	bl	8002290 <MCI_StopRamp>
 8008d8e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008d90:	2000      	movs	r0, #0
 8008d92:	e7c1      	b.n	8008d18 <MCP_ReceivedPacket+0x74>
 8008d94:	20000bf4 	.word	0x20000bf4

08008d98 <MCPA_dataLog>:
#include "mcpa.h"

uint32_t GLOBAL_TIMESTAMP = 0;

void MCPA_dataLog (MCPA_Handle_t *pHandle)
{
 8008d98:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8008d9a:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
 8008d9e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8008da2:	429a      	cmp	r2, r3
{
 8008da4:	4604      	mov	r4, r0
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8008da6:	d003      	beq.n	8008db0 <MCPA_dataLog+0x18>
    }     
  }
  else 
  {
    /* nothing to log just waiting next call to MCPA_datalog*/
    pHandle->HFIndex++;
 8008da8:	3301      	adds	r3, #1
 8008daa:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
  }
}  
 8008dae:	bd70      	pop	{r4, r5, r6, pc}
    if (pHandle->bufferIndex == 0)
 8008db0:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
    pHandle->HFIndex = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
    if (pHandle->bufferIndex == 0)
 8008dba:	b1bd      	cbz	r5, 8008dec <MCPA_dataLog+0x54>
 8008dbc:	6e61      	ldr	r1, [r4, #100]	; 0x64
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8008dbe:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 8008dc2:	42aa      	cmp	r2, r5
 8008dc4:	d25c      	bcs.n	8008e80 <MCPA_dataLog+0xe8>
 8008dc6:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
      if (pHandle->MFRateBuff == 254) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8008dca:	2bfe      	cmp	r3, #254	; 0xfe
 8008dcc:	d07a      	beq.n	8008ec4 <MCPA_dataLog+0x12c>
       *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008dce:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
 8008dd2:	534b      	strh	r3, [r1, r5]
       pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008dd4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008dd8:	6820      	ldr	r0, [r4, #0]
 8008dda:	3202      	adds	r2, #2
 8008ddc:	2309      	movs	r3, #9
 8008dde:	6845      	ldr	r5, [r0, #4]
 8008de0:	b292      	uxth	r2, r2
 8008de2:	47a8      	blx	r5
       pHandle->bufferIndex = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}  
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
      if ( pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer, (void **) &pHandle->currentBuffer, MCTL_ASYNC))
 8008dec:	4601      	mov	r1, r0
 8008dee:	2209      	movs	r2, #9
 8008df0:	f851 0b64 	ldr.w	r0, [r1], #100
 8008df4:	6803      	ldr	r3, [r0, #0]
 8008df6:	4798      	blx	r3
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d03c      	beq.n	8008e76 <MCPA_dataLog+0xde>
        *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8008dfc:	4b76      	ldr	r3, [pc, #472]	; (8008fd8 <MCPA_dataLog+0x240>)
        logValue = (uint32_t *) pHandle->currentBuffer;
 8008dfe:	6e61      	ldr	r1, [r4, #100]	; 0x64
        *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	600b      	str	r3, [r1, #0]
        if (pHandle->Mark != pHandle->MarkBuff)
 8008e04:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8008e08:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
        pHandle->MFIndex = 0; /* Restart the motif from scratch at each buffer*/
 8008e0c:	f884 507f 	strb.w	r5, [r4, #127]	; 0x7f
        if (pHandle->Mark != pHandle->MarkBuff)
 8008e10:	429a      	cmp	r2, r3
        pHandle->bufferIndex = 4; 
 8008e12:	f04f 0504 	mov.w	r5, #4
 8008e16:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
        if (pHandle->Mark != pHandle->MarkBuff)
 8008e1a:	d0d0      	beq.n	8008dbe <MCPA_dataLog+0x26>
          pHandle->HFNumBuff = pHandle->HFNum;
 8008e1c:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
          pHandle->HFRateBuff = pHandle->HFRate;
 8008e20:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
          pHandle->MFRateBuff = pHandle->MFRate;
 8008e24:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
          pHandle->MFNumBuff = pHandle->MFNum;
 8008e28:	f894 5086 	ldrb.w	r5, [r4, #134]	; 0x86
          pHandle->MarkBuff = pHandle->Mark;
 8008e2c:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8008e30:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
          pHandle->HFNumBuff = pHandle->HFNum;
 8008e34:	f884 2083 	strb.w	r2, [r4, #131]	; 0x83
          pHandle->HFRateBuff = pHandle->HFRate;
 8008e38:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          memcpy(pHandle->pHFTableIDBuff, pHandle->pHFTableID, pHandle->HFNum*4); /* We store pointer here, so 4 bytes */
 8008e3c:	0092      	lsls	r2, r2, #2
          pHandle->MFRateBuff = pHandle->MFRate;
 8008e3e:	f884 1085 	strb.w	r1, [r4, #133]	; 0x85
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8008e42:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
          memcpy(pHandle->pHFTableIDBuff, pHandle->pHFTableID, pHandle->HFNum*4); /* We store pointer here, so 4 bytes */
 8008e46:	1d21      	adds	r1, r4, #4
          pHandle->MFNumBuff = pHandle->MFNum;
 8008e48:	f884 5087 	strb.w	r5, [r4, #135]	; 0x87
          memcpy(pHandle->pHFTableIDBuff, pHandle->pHFTableID, pHandle->HFNum*4); /* We store pointer here, so 4 bytes */
 8008e4c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008e50:	f001 fef4 	bl	800ac3c <memcpy>
          memcpy(pHandle->pMFTableIDBuff, pHandle->pMFTableID, pHandle->MFNum*4);
 8008e54:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
 8008e58:	f104 011c 	add.w	r1, r4, #28
 8008e5c:	0092      	lsls	r2, r2, #2
 8008e5e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8008e62:	f001 feeb 	bl	800ac3c <memcpy>
          memcpy(pHandle->MFIDSizeBuff, pHandle->MFIDSize, pHandle->MFNum ); /* 1 size byte per MF ID*/
 8008e66:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
 8008e6a:	f104 0172 	add.w	r1, r4, #114	; 0x72
 8008e6e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8008e72:	f001 fee3 	bl	800ac3c <memcpy>
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8008e76:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 8008e7a:	2d00      	cmp	r5, #0
 8008e7c:	d19e      	bne.n	8008dbc <MCPA_dataLog+0x24>
}  
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
      for (i=0; i<pHandle->HFNumBuff; i++)
 8008e80:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
      logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008e84:	1948      	adds	r0, r1, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d057      	beq.n	8008f3a <MCPA_dataLog+0x1a2>
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	4613      	mov	r3, r2
        *logValue16 = *((uint16_t *) pHandle->pHFTableIDBuff[i]);
 8008e8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e92:	3201      	adds	r2, #1
 8008e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	f820 3b02 	strh.w	r3, [r0], #2
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8008e9c:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
      for (i=0; i<pHandle->HFNumBuff; i++)
 8008ea0:	f894 6083 	ldrb.w	r6, [r4, #131]	; 0x83
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8008ea4:	3502      	adds	r5, #2
      for (i=0; i<pHandle->HFNumBuff; i++)
 8008ea6:	b2d3      	uxtb	r3, r2
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8008ea8:	b2ad      	uxth	r5, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 8008eaa:	429e      	cmp	r6, r3
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8008eac:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
      for (i=0; i<pHandle->HFNumBuff; i++)
 8008eb0:	d8ed      	bhi.n	8008e8e <MCPA_dataLog+0xf6>
      if (pHandle->MFRateBuff < 254) 
 8008eb2:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
 8008eb6:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 8008eba:	2bfd      	cmp	r3, #253	; 0xfd
 8008ebc:	d942      	bls.n	8008f44 <MCPA_dataLog+0x1ac>
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008ebe:	42aa      	cmp	r2, r5
 8008ec0:	d383      	bcc.n	8008dca <MCPA_dataLog+0x32>
}  
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008ec4:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d080      	beq.n	8008dce <MCPA_dataLog+0x36>
         *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008ecc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008ece:	6812      	ldr	r2, [r2, #0]
 8008ed0:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008ed2:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008ed6:	2b01      	cmp	r3, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008ed8:	4415      	add	r5, r2
 8008eda:	b2ad      	uxth	r5, r5
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008edc:	d92a      	bls.n	8008f34 <MCPA_dataLog+0x19c>
         *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008ede:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008ee0:	6812      	ldr	r2, [r2, #0]
 8008ee2:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008ee4:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008ee8:	2b02      	cmp	r3, #2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008eea:	4415      	add	r5, r2
 8008eec:	b2ad      	uxth	r5, r5
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008eee:	d021      	beq.n	8008f34 <MCPA_dataLog+0x19c>
         *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008ef0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008ef2:	6812      	ldr	r2, [r2, #0]
 8008ef4:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008ef6:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008efa:	2b03      	cmp	r3, #3
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008efc:	4415      	add	r5, r2
 8008efe:	b2ad      	uxth	r5, r5
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008f00:	d018      	beq.n	8008f34 <MCPA_dataLog+0x19c>
         *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008f02:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008f04:	6812      	ldr	r2, [r2, #0]
 8008f06:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008f08:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008f0c:	2b04      	cmp	r3, #4
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008f0e:	4415      	add	r5, r2
 8008f10:	b2ad      	uxth	r5, r5
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008f12:	d00f      	beq.n	8008f34 <MCPA_dataLog+0x19c>
         *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008f14:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008f16:	6812      	ldr	r2, [r2, #0]
 8008f18:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008f1a:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008f1e:	2b05      	cmp	r3, #5
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008f20:	4415      	add	r5, r2
 8008f22:	b2ad      	uxth	r5, r5
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008f24:	d006      	beq.n	8008f34 <MCPA_dataLog+0x19c>
         *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008f26:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	514b      	str	r3, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008f2c:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8008f30:	441d      	add	r5, r3
 8008f32:	b2ad      	uxth	r5, r5
        for (i=0; i<pHandle->MFNumBuff; i++)
 8008f34:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
 8008f38:	e749      	b.n	8008dce <MCPA_dataLog+0x36>
      if (pHandle->MFRateBuff < 254) 
 8008f3a:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
 8008f3e:	2bfd      	cmp	r3, #253	; 0xfd
 8008f40:	f63f af35 	bhi.w	8008dae <MCPA_dataLog+0x16>
        if (pHandle->MFIndex == pHandle->MFRateBuff)  
 8008f44:	f894 007f 	ldrb.w	r0, [r4, #127]	; 0x7f
 8008f48:	4298      	cmp	r0, r3
 8008f4a:	d006      	beq.n	8008f5a <MCPA_dataLog+0x1c2>
          pHandle->MFIndex ++;
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	f884 007f 	strb.w	r0, [r4, #127]	; 0x7f
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008f52:	42aa      	cmp	r2, r5
 8008f54:	f4ff af3b 	bcc.w	8008dce <MCPA_dataLog+0x36>
}  
 8008f58:	bd70      	pop	{r4, r5, r6, pc}
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008f5a:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
          pHandle->MFIndex = 0;
 8008f5e:	2000      	movs	r0, #0
 8008f60:	f884 007f 	strb.w	r0, [r4, #127]	; 0x7f
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0f4      	beq.n	8008f52 <MCPA_dataLog+0x1ba>
            *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008f68:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008f6a:	6800      	ldr	r0, [r0, #0]
 8008f6c:	5148      	str	r0, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008f6e:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008f72:	2b01      	cmp	r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008f74:	4405      	add	r5, r0
 8008f76:	b2ad      	uxth	r5, r5
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008f78:	d92a      	bls.n	8008fd0 <MCPA_dataLog+0x238>
            *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008f7a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008f7c:	6800      	ldr	r0, [r0, #0]
 8008f7e:	5148      	str	r0, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008f80:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008f84:	2b02      	cmp	r3, #2
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008f86:	4405      	add	r5, r0
 8008f88:	b2ad      	uxth	r5, r5
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008f8a:	d021      	beq.n	8008fd0 <MCPA_dataLog+0x238>
            *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008f8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f8e:	6800      	ldr	r0, [r0, #0]
 8008f90:	5148      	str	r0, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008f92:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008f96:	2b03      	cmp	r3, #3
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008f98:	4405      	add	r5, r0
 8008f9a:	b2ad      	uxth	r5, r5
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008f9c:	d018      	beq.n	8008fd0 <MCPA_dataLog+0x238>
            *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008f9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fa0:	6800      	ldr	r0, [r0, #0]
 8008fa2:	5148      	str	r0, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008fa4:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008fa8:	2b04      	cmp	r3, #4
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008faa:	4405      	add	r5, r0
 8008fac:	b2ad      	uxth	r5, r5
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008fae:	d00f      	beq.n	8008fd0 <MCPA_dataLog+0x238>
            *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008fb0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008fb2:	6800      	ldr	r0, [r0, #0]
 8008fb4:	5148      	str	r0, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008fb6:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008fba:	2b05      	cmp	r3, #5
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008fbc:	4405      	add	r5, r0
 8008fbe:	b2ad      	uxth	r5, r5
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008fc0:	d006      	beq.n	8008fd0 <MCPA_dataLog+0x238>
            *logValue = *((uint32_t *) pHandle->pMFTableIDBuff[i]);
 8008fc2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	514b      	str	r3, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->MFIDSizeBuff[i];
 8008fc8:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8008fcc:	441d      	add	r5, r3
 8008fce:	b2ad      	uxth	r5, r5
          for (i=0; i<pHandle->MFNumBuff; i++)
 8008fd0:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
 8008fd4:	e7bd      	b.n	8008f52 <MCPA_dataLog+0x1ba>
 8008fd6:	bf00      	nop
 8008fd8:	200006e0 	.word	0x200006e0

08008fdc <MCPA_cfgLog>:
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
  uint16_t *logValue16;
  uint8_t result = MCP_CMD_OK;
  
  buffSize = *((uint16_t *) cfgdata);
  if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8008fdc:	6803      	ldr	r3, [r0, #0]
{
 8008fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8008fe2:	89db      	ldrh	r3, [r3, #14]
  buffSize = *((uint16_t *) cfgdata);
 8008fe4:	f8b1 8000 	ldrh.w	r8, [r1]
  if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8008fe8:	4543      	cmp	r3, r8
 8008fea:	d363      	bcc.n	80090b4 <MCPA_cfgLog+0xd8>
  {
    result = MCP_ERROR_NO_TXASYNC_SPACE;
  }
  else
  {
     pHandle->HFRate = *((uint8_t *) &cfgdata[2]);
 8008fec:	788b      	ldrb	r3, [r1, #2]
 8008fee:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
     pHandle->HFNum  = *((uint8_t *) &cfgdata[3]);
 8008ff2:	78cc      	ldrb	r4, [r1, #3]
 8008ff4:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
     pHandle->MFRate = *((uint8_t *) &cfgdata[4]);
 8008ff8:	790b      	ldrb	r3, [r1, #4]
 8008ffa:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
     pHandle->MFNum =  *((uint8_t *) &cfgdata[5]);
 8008ffe:	794b      	ldrb	r3, [r1, #5]
 8009000:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
     cfgdata = &cfgdata[6]; /* Start of the HF IDs*/
 8009004:	4605      	mov	r5, r0
 8009006:	1d8f      	adds	r7, r1, #6
     for (i =0; i <  pHandle->HFNum ; i++)
 8009008:	b19c      	cbz	r4, 8009032 <MCPA_cfgLog+0x56>
 800900a:	2600      	movs	r6, #0
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
 800900c:	4634      	mov	r4, r6
 800900e:	4631      	mov	r1, r6
     {
       newID = *((uint16_t *) cfgdata);
       RI_GetPtrReg (newID, &pHandle->pHFTableID[i]);
 8009010:	3101      	adds	r1, #1
 8009012:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8009016:	f837 0b02 	ldrh.w	r0, [r7], #2
 800901a:	f7fa ff5d 	bl	8003ed8 <RI_GetPtrReg>
       cfgdata = cfgdata+2; /* Point to the next UID */
       logSize = logSize+2;
 800901e:	3601      	adds	r6, #1
     for (i =0; i <  pHandle->HFNum ; i++)
 8009020:	f895 2082 	ldrb.w	r2, [r5, #130]	; 0x82
 8009024:	b2f1      	uxtb	r1, r6
       logSize = logSize+2;
 8009026:	1ca3      	adds	r3, r4, #2
     for (i =0; i <  pHandle->HFNum ; i++)
 8009028:	428a      	cmp	r2, r1
       logSize = logSize+2;
 800902a:	b2dc      	uxtb	r4, r3
     for (i =0; i <  pHandle->HFNum ; i++)
 800902c:	d8f0      	bhi.n	8009010 <MCPA_cfgLog+0x34>
 800902e:	f895 3086 	ldrb.w	r3, [r5, #134]	; 0x86
     }
     for (i =0; i <  pHandle->MFNum ; i++)
 8009032:	b1d3      	cbz	r3, 800906a <MCPA_cfgLog+0x8e>
 8009034:	f04f 0900 	mov.w	r9, #0
 8009038:	464e      	mov	r6, r9
     {
       newID = *((uint16_t *) cfgdata);
 800903a:	f837 ab02 	ldrh.w	sl, [r7], #2
       RI_GetPtrReg (newID, &pHandle->pMFTableID[i]);
 800903e:	1df1      	adds	r1, r6, #7
 8009040:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8009044:	4650      	mov	r0, sl
 8009046:	f7fa ff47 	bl	8003ed8 <RI_GetPtrReg>
       pHandle->MFIDSize[i] = RI_GetIDSize(newID);
 800904a:	4650      	mov	r0, sl
 800904c:	f7fa ff38 	bl	8003ec0 <RI_GetIDSize>
 8009050:	442e      	add	r6, r5
 8009052:	f109 0901 	add.w	r9, r9, #1
 8009056:	f886 0072 	strb.w	r0, [r6, #114]	; 0x72
     for (i =0; i <  pHandle->MFNum ; i++)
 800905a:	f895 2086 	ldrb.w	r2, [r5, #134]	; 0x86
 800905e:	fa5f f689 	uxtb.w	r6, r9
       logSize = logSize + pHandle->MFIDSize[i];
 8009062:	1903      	adds	r3, r0, r4
     for (i =0; i <  pHandle->MFNum ; i++)
 8009064:	42b2      	cmp	r2, r6
       logSize = logSize + pHandle->MFIDSize[i];
 8009066:	b2dc      	uxtb	r4, r3
     for (i =0; i <  pHandle->MFNum ; i++)
 8009068:	d8e7      	bhi.n	800903a <MCPA_cfgLog+0x5e>
       cfgdata = cfgdata+2; /* Point to the next UID */
     }
     if (buffSize < (logSize+2+4) ) /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
 800906a:	1d63      	adds	r3, r4, #5
 800906c:	4543      	cmp	r3, r8
 800906e:	da21      	bge.n	80090b4 <MCPA_cfgLog+0xd8>
     {
       result = MCP_ERROR_NO_TXASYNC_SPACE;
     }
     else
     {
       pHandle->bufferTxTrigger = buffSize-logSize-2; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8009070:	f1a8 0302 	sub.w	r3, r8, #2
 8009074:	1b1b      	subs	r3, r3, r4
 8009076:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
       pHandle->Mark =   *((uint8_t *) cfgdata);
 800907a:	783b      	ldrb	r3, [r7, #0]
 800907c:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
       if (pHandle->Mark == 0 && pHandle->MarkBuff != 0)
 8009080:	b9db      	cbnz	r3, 80090ba <MCPA_cfgLog+0xde>
 8009082:	f895 0089 	ldrb.w	r0, [r5, #137]	; 0x89
 8009086:	b1b0      	cbz	r0, 80090b6 <MCPA_cfgLog+0xda>
       {  /* Switch Off condition */
          /* if Mark is cleared, dataLog is disabled. We send buffer if not empty*/
          /* Not empty means Index>4 because 4 first bytes are used for TimeStamp*/
          if (pHandle->bufferIndex > 4) {  
 8009088:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 800908c:	2b04      	cmp	r3, #4
 800908e:	d90a      	bls.n	80090a6 <MCPA_cfgLog+0xca>
            logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8009090:	6e69      	ldr	r1, [r5, #100]	; 0x64
            *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
            pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8009092:	682c      	ldr	r4, [r5, #0]
            *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8009094:	52c8      	strh	r0, [r1, r3]
            pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8009096:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
 800909a:	6866      	ldr	r6, [r4, #4]
 800909c:	3202      	adds	r2, #2
 800909e:	b292      	uxth	r2, r2
 80090a0:	4620      	mov	r0, r4
 80090a2:	2309      	movs	r3, #9
 80090a4:	47b0      	blx	r6
          }  
          pHandle->bufferIndex = 0;
 80090a6:	2000      	movs	r0, #0
          pHandle->MarkBuff = 0;
 80090a8:	f885 0089 	strb.w	r0, [r5, #137]	; 0x89
          pHandle->bufferIndex = 0;
 80090ac:	f8a5 0068 	strh.w	r0, [r5, #104]	; 0x68
       }
     }
  }
  return result;
}
 80090b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    result = MCP_ERROR_NO_TXASYNC_SPACE;
 80090b4:	2009      	movs	r0, #9
}
 80090b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t result = MCP_CMD_OK;
 80090ba:	2000      	movs	r0, #0
}
 80090bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080090c0 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80090c0:	b510      	push	{r4, lr}
 80090c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090c6:	4604      	mov	r4, r0
 80090c8:	2100      	movs	r1, #0
 80090ca:	f001 fdc5 	bl	800ac58 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80090ce:	2300      	movs	r3, #0
 80090d0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 80090d4:	bd10      	pop	{r4, pc}
 80090d6:	bf00      	nop

080090d8 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80090d8:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 80090dc:	1c53      	adds	r3, r2, #1
 80090de:	b29b      	uxth	r3, r3
{
 80090e0:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 80090e2:	2b7f      	cmp	r3, #127	; 0x7f
{
 80090e4:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 80090e6:	bf88      	it	hi
 80090e8:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80090ea:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 80090ee:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80090f0:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 80090f4:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80090f8:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 80090fc:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 80090fe:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8009100:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009104:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8009106:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009108:	d1fa      	bne.n	8009100 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800910a:	2a00      	cmp	r2, #0
 800910c:	bfb8      	it	lt
 800910e:	327f      	addlt	r2, #127	; 0x7f
 8009110:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8009112:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8009116:	bc70      	pop	{r4, r5, r6}
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop

0800911c <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 800911c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop

08009124 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8009124:	8a03      	ldrh	r3, [r0, #16]
 8009126:	8b42      	ldrh	r2, [r0, #26]
 8009128:	429a      	cmp	r2, r3
 800912a:	d306      	bcc.n	800913a <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 800912c:	8b82      	ldrh	r2, [r0, #28]
 800912e:	429a      	cmp	r2, r3
 8009130:	d901      	bls.n	8009136 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8009132:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8009134:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8009136:	8ac0      	ldrh	r0, [r0, #22]
 8009138:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 800913a:	2008      	movs	r0, #8
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop

08009140 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8009140:	2300      	movs	r3, #0
 8009142:	8203      	strh	r3, [r0, #16]
}
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop

08009148 <NTC_Init>:
{
 8009148:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 800914a:	7803      	ldrb	r3, [r0, #0]
{
 800914c:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 800914e:	b123      	cbz	r3, 800915a <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8009150:	8a43      	ldrh	r3, [r0, #18]
 8009152:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8009154:	2200      	movs	r2, #0
 8009156:	82c2      	strh	r2, [r0, #22]
}
 8009158:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800915a:	3004      	adds	r0, #4
 800915c:	f7fa ff6c 	bl	8004038 <RCM_RegisterRegConv>
 8009160:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8009164:	4620      	mov	r0, r4
 8009166:	f7ff ffeb 	bl	8009140 <NTC_Clear>
}
 800916a:	bd10      	pop	{r4, pc}

0800916c <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 800916c:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800916e:	7803      	ldrb	r3, [r0, #0]
{
 8009170:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8009172:	b113      	cbz	r3, 800917a <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8009174:	2000      	movs	r0, #0
 8009176:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8009178:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800917a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800917e:	f7fb f82f 	bl	80041e0 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8009182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009186:	4298      	cmp	r0, r3
 8009188:	d007      	beq.n	800919a <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800918a:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 800918c:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800918e:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8009190:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8009194:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8009198:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800919a:	4620      	mov	r0, r4
 800919c:	f7ff ffc2 	bl	8009124 <NTC_SetFaultState>
 80091a0:	82e0      	strh	r0, [r4, #22]
}
 80091a2:	bd10      	pop	{r4, pc}

080091a4 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80091a4:	7803      	ldrb	r3, [r0, #0]
 80091a6:	b983      	cbnz	r3, 80091ca <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80091a8:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80091aa:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 80091ac:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80091b0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 80091b2:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 80091b4:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bfbc      	itt	lt
 80091bc:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80091c0:	33ff      	addlt	r3, #255	; 0xff
 80091c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 80091c6:	b200      	sxth	r0, r0
 80091c8:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 80091ca:	8a80      	ldrh	r0, [r0, #20]
}
 80091cc:	b200      	sxth	r0, r0
 80091ce:	4770      	bx	lr

080091d0 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 80091d0:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80091d2:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80091d4:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80091d6:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80091d8:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 80091da:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 80091dc:	6283      	str	r3, [r0, #40]	; 0x28
}
 80091de:	4770      	bx	lr

080091e0 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 80091e0:	8081      	strh	r1, [r0, #4]
}
 80091e2:	4770      	bx	lr

080091e4 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 80091e4:	80c1      	strh	r1, [r0, #6]
}
 80091e6:	4770      	bx	lr

080091e8 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 80091e8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop

080091f0 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 80091f0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop

080091f8 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 80091f8:	6081      	str	r1, [r0, #8]

  return;
}
 80091fa:	4770      	bx	lr

080091fc <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 80091fc:	8b00      	ldrh	r0, [r0, #24]
 80091fe:	4770      	bx	lr

08009200 <PID_SetKPDivisorPOW2>:
 * @retval None
 */
__weak void PID_SetKPDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKpDivisorPOW2 )
{
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 8009200:	2301      	movs	r3, #1
 8009202:	408b      	lsls	r3, r1
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8009204:	8381      	strh	r1, [r0, #28]
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 8009206:	8303      	strh	r3, [r0, #24]
}
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop

0800920c <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 800920c:	8b40      	ldrh	r0, [r0, #26]
 800920e:	4770      	bx	lr

08009210 <PID_SetLowerIntegralTermLimit>:
 * @param  wLowerLimit: new lower integral term limit value
 * @retval None
 */
__weak void PID_SetLowerIntegralTermLimit( PID_Handle_t * pHandle, int32_t wLowerLimit )
{
  pHandle->wLowerIntegralLimit = wLowerLimit;
 8009210:	6101      	str	r1, [r0, #16]
}
 8009212:	4770      	bx	lr

08009214 <PID_SetUpperIntegralTermLimit>:
 * @param  wUpperLimit: new upper integral term limit value
 * @retval None
 */
__weak void PID_SetUpperIntegralTermLimit( PID_Handle_t * pHandle, int32_t wUpperLimit )
{
  pHandle->wUpperIntegralLimit = wUpperLimit;
 8009214:	60c1      	str	r1, [r0, #12]
}
 8009216:	4770      	bx	lr

08009218 <PID_SetKIDivisorPOW2>:
{
 8009218:	b538      	push	{r3, r4, r5, lr}
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 800921a:	2301      	movs	r3, #1
{
 800921c:	460c      	mov	r4, r1
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 800921e:	408b      	lsls	r3, r1
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8009220:	f647 71ff 	movw	r1, #32767	; 0x7fff
  pHandle->hKiDivisor = ( uint16_t )( wKiDiv );
 8009224:	8343      	strh	r3, [r0, #26]
  pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8009226:	83c4      	strh	r4, [r0, #30]
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8009228:	40a1      	lsls	r1, r4
{
 800922a:	4605      	mov	r5, r0
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 800922c:	f7ff fff2 	bl	8009214 <PID_SetUpperIntegralTermLimit>
  PID_SetLowerIntegralTermLimit( pHandle, ( int32_t ) - INT16_MAX * wKiDiv );
 8009230:	4902      	ldr	r1, [pc, #8]	; (800923c <PID_SetKIDivisorPOW2+0x24>)
 8009232:	4628      	mov	r0, r5
 8009234:	40a1      	lsls	r1, r4
 8009236:	f7ff ffeb 	bl	8009210 <PID_SetLowerIntegralTermLimit>
}
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	ffff8001 	.word	0xffff8001

08009240 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8009240:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8009242:	4770      	bx	lr

08009244 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8009244:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop

0800924c <PID_GetKDDivisor>:
 * @retval Kd gain divisor
 */
__weak uint16_t PID_GetKDDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKdDivisor );
}
 800924c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 800924e:	4770      	bx	lr

08009250 <PID_SetKDDivisorPOW2>:
 * @param hKdDivisorPOW2
 */
__weak void PID_SetKDDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKdDivisorPOW2 )
{
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 8009250:	2301      	movs	r3, #1
 8009252:	408b      	lsls	r3, r1
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8009254:	84c1      	strh	r1, [r0, #38]	; 0x26
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 8009256:	8483      	strh	r3, [r0, #36]	; 0x24
}
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop

0800925c <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800925c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8009260:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8009264:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009266:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800926a:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800926e:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8009272:	b162      	cbz	r2, 800928e <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8009274:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8009276:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 800927a:	1872      	adds	r2, r6, r1
 800927c:	d420      	bmi.n	80092c0 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 800927e:	2e00      	cmp	r6, #0
 8009280:	db29      	blt.n	80092d6 <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8009282:	68c1      	ldr	r1, [r0, #12]
 8009284:	4291      	cmp	r1, r2
 8009286:	db03      	blt.n	8009290 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8009288:	6901      	ldr	r1, [r0, #16]
 800928a:	4291      	cmp	r1, r2
 800928c:	dc00      	bgt.n	8009290 <PI_Controller+0x34>
 800928e:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8009290:	8b86      	ldrh	r6, [r0, #28]
 8009292:	8bc2      	ldrh	r2, [r0, #30]
 8009294:	4133      	asrs	r3, r6
 8009296:	fa41 f202 	asr.w	r2, r1, r2
 800929a:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 800929c:	429c      	cmp	r4, r3
 800929e:	da05      	bge.n	80092ac <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 80092a0:	1ae3      	subs	r3, r4, r3
 80092a2:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 80092a4:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 80092a6:	4620      	mov	r0, r4
 80092a8:	bc70      	pop	{r4, r5, r6}
 80092aa:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 80092ac:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 80092ae:	bfc9      	itett	gt
 80092b0:	1aeb      	subgt	r3, r5, r3
 80092b2:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 80092b4:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 80092b6:	18c9      	addgt	r1, r1, r3
 80092b8:	6081      	str	r1, [r0, #8]
}
 80092ba:	4620      	mov	r0, r4
 80092bc:	bc70      	pop	{r4, r5, r6}
 80092be:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 80092c0:	2e00      	cmp	r6, #0
 80092c2:	ddde      	ble.n	8009282 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 80092c4:	2900      	cmp	r1, #0
 80092c6:	dddc      	ble.n	8009282 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80092c8:	68c1      	ldr	r1, [r0, #12]
 80092ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80092ce:	4291      	cmp	r1, r2
 80092d0:	d1de      	bne.n	8009290 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 80092d2:	460a      	mov	r2, r1
 80092d4:	e7db      	b.n	800928e <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 80092d6:	4e03      	ldr	r6, [pc, #12]	; (80092e4 <PI_Controller+0x88>)
 80092d8:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 80092dc:	bf28      	it	cs
 80092de:	4632      	movcs	r2, r6
 80092e0:	e7cf      	b.n	8009282 <PI_Controller+0x26>
 80092e2:	bf00      	nop
 80092e4:	80000001 	.word	0x80000001

080092e8 <PID_Controller>:
{
  int32_t wDifferential_Term;
  int32_t wDeltaError;
  int32_t wTemp_output;

  if ( pHandle->hKdGain != 0 ) /* derivative terms not used */
 80092e8:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
{
 80092ec:	b570      	push	{r4, r5, r6, lr}
  if ( pHandle->hKdGain != 0 ) /* derivative terms not used */
 80092ee:	b18a      	cbz	r2, 8009314 <PID_Controller+0x2c>
  {
    wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 80092f0:	6a86      	ldr	r6, [r0, #40]	; 0x28
#else
    /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right)
    is used by the compiler to perform the shifts (instead of LSR
    logical shift right)*/
    wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 80092f2:	8cc5      	ldrh	r5, [r0, #38]	; 0x26
#endif

    pHandle->wPrevProcessVarError = wProcessVarError;
 80092f4:	6281      	str	r1, [r0, #40]	; 0x28
    wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 80092f6:	1b8b      	subs	r3, r1, r6
    wDifferential_Term = pHandle->hKdGain * wDeltaError;
 80092f8:	fb02 f303 	mul.w	r3, r2, r3
    wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 80092fc:	4604      	mov	r4, r0
 80092fe:	fa43 f505 	asr.w	r5, r3, r5

    wTemp_output = PI_Controller( pHandle, wProcessVarError ) + wDifferential_Term;
 8009302:	f7ff ffab 	bl	800925c <PI_Controller>

    if ( wTemp_output > pHandle->hUpperOutputLimit )
 8009306:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    wTemp_output = PI_Controller( pHandle, wProcessVarError ) + wDifferential_Term;
 800930a:	4428      	add	r0, r5
    if ( wTemp_output > pHandle->hUpperOutputLimit )
 800930c:	4282      	cmp	r2, r0
 800930e:	da06      	bge.n	800931e <PID_Controller+0x36>
  else
  {
    wTemp_output = PI_Controller( pHandle, wProcessVarError );
  }
  return ( ( int16_t ) wTemp_output );
}
 8009310:	4610      	mov	r0, r2
 8009312:	bd70      	pop	{r4, r5, r6, pc}
    wTemp_output = PI_Controller( pHandle, wProcessVarError );
 8009314:	f7ff ffa2 	bl	800925c <PI_Controller>
 8009318:	4602      	mov	r2, r0
}
 800931a:	4610      	mov	r0, r2
 800931c:	bd70      	pop	{r4, r5, r6, pc}
    else if ( wTemp_output < pHandle->hLowerOutputLimit )
 800931e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8009322:	4290      	cmp	r0, r2
 8009324:	bfb8      	it	lt
 8009326:	4610      	movlt	r0, r2
 8009328:	b202      	sxth	r2, r0
}
 800932a:	4610      	mov	r0, r2
 800932c:	bd70      	pop	{r4, r5, r6, pc}
 800932e:	bf00      	nop

08009330 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8009330:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8009332:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8009336:	8b11      	ldrh	r1, [r2, #24]
 8009338:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800933a:	8995      	ldrh	r5, [r2, #12]
 800933c:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800933e:	fb13 f301 	smulbb	r3, r3, r1
{
 8009342:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8009344:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8009348:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800934c:	f7ff fac4 	bl	80088d8 <VBS_GetAvBusVoltage_V>
 8009350:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8009354:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8009356:	480e      	ldr	r0, [pc, #56]	; (8009390 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8009358:	490e      	ldr	r1, [pc, #56]	; (8009394 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 800935a:	bfb8      	it	lt
 800935c:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8009360:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8009364:	bfb8      	it	lt
 8009366:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8009368:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 800936a:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800936c:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8009370:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8009374:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009378:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 800937a:	fb81 2103 	smull	r2, r1, r1, r3
 800937e:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8009380:	4630      	mov	r0, r6
 8009382:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8009386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800938a:	f7ff bea5 	b.w	80090d8 <MPM_CalcElMotorPower>
 800938e:	bf00      	nop
 8009390:	1b4e81b5 	.word	0x1b4e81b5
 8009394:	66666667 	.word	0x66666667

08009398 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8009398:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 800939a:	4b18      	ldr	r3, [pc, #96]	; (80093fc <startTimers+0x64>)
 800939c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800939e:	07d2      	lsls	r2, r2, #31
 80093a0:	b082      	sub	sp, #8
 80093a2:	d415      	bmi.n	80093d0 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80093a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80093a6:	f042 0201 	orr.w	r2, r2, #1
 80093aa:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80093ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80093ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80093b2:	f002 0201 	and.w	r2, r2, #1
 80093b6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80093b8:	9a01      	ldr	r2, [sp, #4]
 80093ba:	694a      	ldr	r2, [r1, #20]
 80093bc:	f042 0201 	orr.w	r2, r2, #1
 80093c0:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80093c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80093c4:	f022 0201 	bic.w	r2, r2, #1
 80093c8:	659a      	str	r2, [r3, #88]	; 0x58
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
#endif
}
 80093ca:	b002      	add	sp, #8
 80093cc:	bc30      	pop	{r4, r5}
 80093ce:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 80093d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80093d4:	4c0a      	ldr	r4, [pc, #40]	; (8009400 <startTimers+0x68>)
 80093d6:	685a      	ldr	r2, [r3, #4]
 80093d8:	6859      	ldr	r1, [r3, #4]
 80093da:	4d0a      	ldr	r5, [pc, #40]	; (8009404 <startTimers+0x6c>)
 80093dc:	4021      	ands	r1, r4
 80093de:	f041 0120 	orr.w	r1, r1, #32
 80093e2:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80093e4:	6958      	ldr	r0, [r3, #20]
 80093e6:	f040 0001 	orr.w	r0, r0, #1
 80093ea:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80093ec:	6859      	ldr	r1, [r3, #4]
 80093ee:	402a      	ands	r2, r5
 80093f0:	4021      	ands	r1, r4
 80093f2:	430a      	orrs	r2, r1
 80093f4:	605a      	str	r2, [r3, #4]
}
 80093f6:	b002      	add	sp, #8
 80093f8:	bc30      	pop	{r4, r5}
 80093fa:	4770      	bx	lr
 80093fc:	40021000 	.word	0x40021000
 8009400:	fdffff8f 	.word	0xfdffff8f
 8009404:	02000070 	.word	0x02000070

08009408 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8009408:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800940a:	1c56      	adds	r6, r2, #1
 800940c:	0876      	lsrs	r6, r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800940e:	f06f 0702 	mvn.w	r7, #2
 8009412:	0176      	lsls	r6, r6, #5
 8009414:	6107      	str	r7, [r0, #16]

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8009416:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8009418:	781c      	ldrb	r4, [r3, #0]
 800941a:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 800941c:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8009420:	d80b      	bhi.n	800943a <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8009422:	6904      	ldr	r4, [r0, #16]
 8009424:	07a4      	lsls	r4, r4, #30
 8009426:	d5f7      	bpl.n	8009418 <waitForPolarizationEnd+0x10>
      hCalibrationPeriodCounter++;
 8009428:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800942a:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800942c:	6107      	str	r7, [r0, #16]
 800942e:	d8f3      	bhi.n	8009418 <waitForPolarizationEnd+0x10>
      {
        if (*cnt < NB_CONVERSIONS)
 8009430:	781c      	ldrb	r4, [r3, #0]
 8009432:	2c0f      	cmp	r4, #15
 8009434:	d8f0      	bhi.n	8009418 <waitForPolarizationEnd+0x10>
        {
          *SWerror = 1u;
 8009436:	2301      	movs	r3, #1
 8009438:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 800943a:	bcf0      	pop	{r4, r5, r6, r7}
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop

08009440 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009440:	6883      	ldr	r3, [r0, #8]
 8009442:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8009446:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800944a:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800944c:	6883      	ldr	r3, [r0, #8]
 800944e:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 8009450:	b082      	sub	sp, #8
 8009452:	d418      	bmi.n	8009486 <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8009454:	4b24      	ldr	r3, [pc, #144]	; (80094e8 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8009456:	6882      	ldr	r2, [r0, #8]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4924      	ldr	r1, [pc, #144]	; (80094ec <R3_2_ADCxInit+0xac>)
 800945c:	099b      	lsrs	r3, r3, #6
 800945e:	fba1 1303 	umull	r1, r3, r1, r3
 8009462:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8009466:	099b      	lsrs	r3, r3, #6
 8009468:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800946c:	005b      	lsls	r3, r3, #1
 800946e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009472:	6082      	str	r2, [r0, #8]
 8009474:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8009476:	9b01      	ldr	r3, [sp, #4]
 8009478:	b12b      	cbz	r3, 8009486 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 800947a:	9b01      	ldr	r3, [sp, #4]
 800947c:	3b01      	subs	r3, #1
 800947e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8009480:	9b01      	ldr	r3, [sp, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1f9      	bne.n	800947a <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8009486:	6883      	ldr	r3, [r0, #8]
 8009488:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800948c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009490:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009494:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8009496:	6883      	ldr	r3, [r0, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	dbfc      	blt.n	8009496 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800949c:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800949e:	07da      	lsls	r2, r3, #31
 80094a0:	d408      	bmi.n	80094b4 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 80094a2:	4a13      	ldr	r2, [pc, #76]	; (80094f0 <R3_2_ADCxInit+0xb0>)
 80094a4:	6883      	ldr	r3, [r0, #8]
 80094a6:	4013      	ands	r3, r2
 80094a8:	f043 0301 	orr.w	r3, r3, #1
 80094ac:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80094ae:	6803      	ldr	r3, [r0, #0]
 80094b0:	07db      	lsls	r3, r3, #31
 80094b2:	d5f7      	bpl.n	80094a4 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 80094b4:	6882      	ldr	r2, [r0, #8]
 80094b6:	490e      	ldr	r1, [pc, #56]	; (80094f0 <R3_2_ADCxInit+0xb0>)
 80094b8:	400a      	ands	r2, r1
 80094ba:	f042 0208 	orr.w	r2, r2, #8
 80094be:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 80094c0:	6882      	ldr	r2, [r0, #8]
 80094c2:	400a      	ands	r2, r1
 80094c4:	f042 0220 	orr.w	r2, r2, #32
 80094c8:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 80094ca:	68c3      	ldr	r3, [r0, #12]
 80094cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094d8:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 80094da:	6883      	ldr	r3, [r0, #8]
 80094dc:	400b      	ands	r3, r1
 80094de:	f043 0304 	orr.w	r3, r3, #4
 80094e2:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 80094e4:	b002      	add	sp, #8
 80094e6:	4770      	bx	lr
 80094e8:	200006a0 	.word	0x200006a0
 80094ec:	053e2d63 	.word	0x053e2d63
 80094f0:	7fffffc0 	.word	0x7fffffc0

080094f4 <R3_2_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80094f4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 80094f8:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
{
 80094fc:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80094fe:	689c      	ldr	r4, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8009500:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009504:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8009506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8009508:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800950a:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800950c:	6863      	ldr	r3, [r4, #4]
 800950e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009516:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 8009518:	2a05      	cmp	r2, #5
 800951a:	f200 8099 	bhi.w	8009650 <R3_2_GetPhaseCurrents+0x15c>
 800951e:	e8df f002 	tbb	[pc, r2]
 8009522:	1e38      	.short	0x1e38
 8009524:	3803031e 	.word	0x3803031e
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8009528:	6f04      	ldr	r4, [r0, #112]	; 0x70

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800952a:	4b4d      	ldr	r3, [pc, #308]	; (8009660 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800952c:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 800952e:	429c      	cmp	r4, r3
 8009530:	da55      	bge.n	80095de <R3_2_GetPhaseCurrents+0xea>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 8009532:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8009534:	6f42      	ldr	r2, [r0, #116]	; 0x74

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 8009536:	4f4a      	ldr	r7, [pc, #296]	; (8009660 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8009538:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 800953a:	42ba      	cmp	r2, r7
 800953c:	da55      	bge.n	80095ea <R3_2_GetPhaseCurrents+0xf6>
      {
        Iab->b = -INT16_MAX;
 800953e:	f9b1 5000 	ldrsh.w	r5, [r1]
 8009542:	804f      	strh	r7, [r1, #2]
 8009544:	b2ab      	uxth	r3, r5
 8009546:	f248 0201 	movw	r2, #32769	; 0x8001
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800954a:	4413      	add	r3, r2
 800954c:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 800954e:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
  pHandle->_Super.Ib = Iab->b;
 8009552:	f8a0 704e 	strh.w	r7, [r0, #78]	; 0x4e
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009556:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 800955a:	bcf0      	pop	{r4, r5, r6, r7}
 800955c:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800955e:	6f04      	ldr	r4, [r0, #112]	; 0x70
      if ( Aux < -INT16_MAX )
 8009560:	4b3f      	ldr	r3, [pc, #252]	; (8009660 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8009562:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8009564:	429c      	cmp	r4, r3
 8009566:	db34      	blt.n	80095d2 <R3_2_GetPhaseCurrents+0xde>
      else  if ( Aux > INT16_MAX )
 8009568:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800956c:	db68      	blt.n	8009640 <R3_2_GetPhaseCurrents+0x14c>
        Iab->a = INT16_MAX;
 800956e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009572:	4613      	mov	r3, r2
 8009574:	800a      	strh	r2, [r1, #0]
 8009576:	4614      	mov	r4, r2
 8009578:	4615      	mov	r5, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800957a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800957c:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 800957e:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 8009580:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009584:	db44      	blt.n	8009610 <R3_2_GetPhaseCurrents+0x11c>
        Iab->b = INT16_MAX;
 8009586:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800958a:	4622      	mov	r2, r4
 800958c:	804c      	strh	r4, [r1, #2]
 800958e:	4627      	mov	r7, r4
 8009590:	e7db      	b.n	800954a <R3_2_GetPhaseCurrents+0x56>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8009592:	6f44      	ldr	r4, [r0, #116]	; 0x74
      if ( Aux < -INT16_MAX )
 8009594:	4b32      	ldr	r3, [pc, #200]	; (8009660 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8009596:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8009598:	429c      	cmp	r4, r3
 800959a:	db14      	blt.n	80095c6 <R3_2_GetPhaseCurrents+0xd2>
      else  if ( Aux > INT16_MAX )
 800959c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80095a0:	db43      	blt.n	800962a <R3_2_GetPhaseCurrents+0x136>
        Iab->b = INT16_MAX;
 80095a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80095a6:	461a      	mov	r2, r3
 80095a8:	804b      	strh	r3, [r1, #2]
 80095aa:	461c      	mov	r4, r3
 80095ac:	461f      	mov	r7, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 80095ae:	6f85      	ldr	r5, [r0, #120]	; 0x78
 80095b0:	1b73      	subs	r3, r6, r5
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 80095b2:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 80095b4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80095b8:	db23      	blt.n	8009602 <R3_2_GetPhaseCurrents+0x10e>
        Iab->a = INT16_MAX;
 80095ba:	f647 74ff 	movw	r4, #32767	; 0x7fff
 80095be:	4623      	mov	r3, r4
 80095c0:	800c      	strh	r4, [r1, #0]
 80095c2:	4625      	mov	r5, r4
 80095c4:	e7c1      	b.n	800954a <R3_2_GetPhaseCurrents+0x56>
        Iab->b = -INT16_MAX;
 80095c6:	461c      	mov	r4, r3
 80095c8:	804b      	strh	r3, [r1, #2]
 80095ca:	461f      	mov	r7, r3
 80095cc:	f248 0201 	movw	r2, #32769	; 0x8001
 80095d0:	e7ed      	b.n	80095ae <R3_2_GetPhaseCurrents+0xba>
        Iab->a = -INT16_MAX;
 80095d2:	461c      	mov	r4, r3
 80095d4:	800b      	strh	r3, [r1, #0]
 80095d6:	461d      	mov	r5, r3
 80095d8:	f248 0301 	movw	r3, #32769	; 0x8001
 80095dc:	e7cd      	b.n	800957a <R3_2_GetPhaseCurrents+0x86>
      else  if ( Aux > INT16_MAX )
 80095de:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80095e2:	db1c      	blt.n	800961e <R3_2_GetPhaseCurrents+0x12a>
        Iab->a = INT16_MAX;
 80095e4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80095e8:	e7a3      	b.n	8009532 <R3_2_GetPhaseCurrents+0x3e>
      else  if ( Aux > INT16_MAX )
 80095ea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80095ee:	db20      	blt.n	8009632 <R3_2_GetPhaseCurrents+0x13e>
        Iab->b = INT16_MAX;
 80095f0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80095f4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80095f8:	804b      	strh	r3, [r1, #2]
 80095fa:	461a      	mov	r2, r3
 80095fc:	461f      	mov	r7, r3
 80095fe:	b2ab      	uxth	r3, r5
 8009600:	e7a3      	b.n	800954a <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 8009602:	4d17      	ldr	r5, [pc, #92]	; (8009660 <R3_2_GetPhaseCurrents+0x16c>)
 8009604:	42ac      	cmp	r4, r5
 8009606:	da1f      	bge.n	8009648 <R3_2_GetPhaseCurrents+0x154>
        Iab->a = -INT16_MAX;
 8009608:	800d      	strh	r5, [r1, #0]
 800960a:	f248 0301 	movw	r3, #32769	; 0x8001
 800960e:	e79c      	b.n	800954a <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 8009610:	4f13      	ldr	r7, [pc, #76]	; (8009660 <R3_2_GetPhaseCurrents+0x16c>)
 8009612:	42ba      	cmp	r2, r7
 8009614:	da05      	bge.n	8009622 <R3_2_GetPhaseCurrents+0x12e>
        Iab->b = -INT16_MAX;
 8009616:	804f      	strh	r7, [r1, #2]
 8009618:	f248 0201 	movw	r2, #32769	; 0x8001
 800961c:	e795      	b.n	800954a <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 800961e:	800c      	strh	r4, [r1, #0]
 8009620:	e788      	b.n	8009534 <R3_2_GetPhaseCurrents+0x40>
        Iab->b = ( int16_t )Aux;
 8009622:	b217      	sxth	r7, r2
 8009624:	804f      	strh	r7, [r1, #2]
 8009626:	b292      	uxth	r2, r2
 8009628:	e78f      	b.n	800954a <R3_2_GetPhaseCurrents+0x56>
        Iab->b = ( int16_t )Aux;
 800962a:	b227      	sxth	r7, r4
 800962c:	804f      	strh	r7, [r1, #2]
 800962e:	b2a2      	uxth	r2, r4
 8009630:	e7bd      	b.n	80095ae <R3_2_GetPhaseCurrents+0xba>
        Iab->b = ( int16_t )Aux;
 8009632:	f9b1 5000 	ldrsh.w	r5, [r1]
 8009636:	b217      	sxth	r7, r2
 8009638:	b2ab      	uxth	r3, r5
 800963a:	804f      	strh	r7, [r1, #2]
 800963c:	b292      	uxth	r2, r2
 800963e:	e784      	b.n	800954a <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 8009640:	b225      	sxth	r5, r4
 8009642:	800d      	strh	r5, [r1, #0]
 8009644:	b2a3      	uxth	r3, r4
 8009646:	e798      	b.n	800957a <R3_2_GetPhaseCurrents+0x86>
        Iab->a = ( int16_t )Aux;
 8009648:	b225      	sxth	r5, r4
 800964a:	800d      	strh	r5, [r1, #0]
 800964c:	b2a3      	uxth	r3, r4
 800964e:	e77c      	b.n	800954a <R3_2_GetPhaseCurrents+0x56>
 8009650:	f9b1 5000 	ldrsh.w	r5, [r1]
 8009654:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 8009658:	880b      	ldrh	r3, [r1, #0]
 800965a:	884a      	ldrh	r2, [r1, #2]
 800965c:	e775      	b.n	800954a <R3_2_GetPhaseCurrents+0x56>
 800965e:	bf00      	nop
 8009660:	ffff8001 	.word	0xffff8001

08009664 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8009664:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009666:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800966a:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 800966e:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8009672:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009676:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8009678:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
  WRITE_REG(TIMx->CCR1, CompareValue);
 800967a:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800967c:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800967e:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8009680:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009682:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8009684:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009686:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009688:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800968a:	4904      	ldr	r1, [pc, #16]	; (800969c <R3_2_SetADCSampPointPolarization+0x38>)
 800968c:	685b      	ldr	r3, [r3, #4]
}
 800968e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8009692:	420b      	tst	r3, r1
}
 8009694:	bf14      	ite	ne
 8009696:	2001      	movne	r0, #1
 8009698:	2000      	moveq	r0, #0
 800969a:	4770      	bx	lr
 800969c:	02000070 	.word	0x02000070

080096a0 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 80096a0:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80096a2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80096a6:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 80096aa:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80096ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80096b0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80096b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80096b4:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80096b6:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80096b8:	6853      	ldr	r3, [r2, #4]
 80096ba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80096be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c2:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80096c4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80096c8:	2b0f      	cmp	r3, #15
 80096ca:	d80b      	bhi.n	80096e4 <R3_2_HFCurrentsPolarizationAB+0x44>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 80096cc:	e9d0 421c 	ldrd	r4, r2, [r0, #112]	; 0x70
    pHandle->PolarizationCounter++;
 80096d0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    pHandle-> PhaseAOffset += ADCDataReg1;
 80096d4:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 80096d6:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 80096d8:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 80096da:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
    pHandle->PolarizationCounter++;
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 80096e4:	2300      	movs	r3, #0
  Iab->b = 0;
}
 80096e6:	bc70      	pop	{r4, r5, r6}
  Iab->a = 0;
 80096e8:	600b      	str	r3, [r1, #0]
}
 80096ea:	4770      	bx	lr

080096ec <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80096ec:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 80096f0:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80096f2:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80096f6:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80096f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80096fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096fe:	681c      	ldr	r4, [r3, #0]
 8009700:	6853      	ldr	r3, [r2, #4]
 8009702:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800970a:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800970c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009710:	2b0f      	cmp	r3, #15
 8009712:	d808      	bhi.n	8009726 <R3_2_HFCurrentsPolarizationC+0x3a>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 8009714:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8009718:	6f82      	ldr	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 800971a:	3301      	adds	r3, #1
 800971c:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800971e:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8009720:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8009724:	6782      	str	r2, [r0, #120]	; 0x78
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8009726:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8009728:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 800972c:	600b      	str	r3, [r1, #0]
}
 800972e:	4770      	bx	lr

08009730 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009730:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->_Super.TurnOnLowSidesAction = true;
 8009734:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009736:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8009738:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  WRITE_REG(TIMx->CCR1, CompareValue);
 800973c:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800973e:	f06f 0001 	mvn.w	r0, #1
 8009742:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009744:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009746:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009748:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800974a:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800974c:	07db      	lsls	r3, r3, #31
 800974e:	d5fc      	bpl.n	800974a <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009750:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8009752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009756:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009758:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 800975c:	2b02      	cmp	r3, #2
 800975e:	d000      	beq.n	8009762 <R3_2_TurnOnLowSides+0x32>
 8009760:	4770      	bx	lr
{
 8009762:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009764:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009768:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800976a:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800976e:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009772:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009776:	61ae      	str	r6, [r5, #24]
 8009778:	6184      	str	r4, [r0, #24]
  }
  return;
}
 800977a:	bc70      	pop	{r4, r5, r6}
 800977c:	619a      	str	r2, [r3, #24]
 800977e:	4770      	bx	lr

08009780 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009780:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8009784:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009788:	688b      	ldr	r3, [r1, #8]
{
 800978a:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 800978c:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 800978e:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked=true; 
 8009790:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009794:	f880 5069 	strb.w	r5, [r0, #105]	; 0x69
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8009798:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800979c:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 80097a0:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80097a2:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80097a4:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80097a6:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80097a8:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80097aa:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80097ac:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 80097ae:	07d2      	lsls	r2, r2, #31
 80097b0:	d5fc      	bpl.n	80097ac <R3_2_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80097b2:	f06f 0201 	mvn.w	r2, #1
 80097b6:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80097b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80097be:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80097c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097c6:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80097c8:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 80097cc:	2a02      	cmp	r2, #2
 80097ce:	d008      	beq.n	80097e2 <R3_2_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80097d0:	f06f 0201 	mvn.w	r2, #1
 80097d4:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80097d6:	68da      	ldr	r2, [r3, #12]
 80097d8:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 80097dc:	bc30      	pop	{r4, r5}
 80097de:	60da      	str	r2, [r3, #12]
 80097e0:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80097e2:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80097e4:	6a0c      	ldr	r4, [r1, #32]
 80097e6:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80097ea:	f240 5255 	movw	r2, #1365	; 0x555
 80097ee:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80097f0:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80097f4:	d007      	beq.n	8009806 <R3_2_SwitchOnPWM+0x86>
 80097f6:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80097f8:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80097fc:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8009800:	6184      	str	r4, [r0, #24]
 8009802:	6191      	str	r1, [r2, #24]
}
 8009804:	e7e4      	b.n	80097d0 <R3_2_SwitchOnPWM+0x50>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8009806:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009808:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800980c:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8009810:	6284      	str	r4, [r0, #40]	; 0x28
 8009812:	6291      	str	r1, [r2, #40]	; 0x28
}
 8009814:	e7dc      	b.n	80097d0 <R3_2_SwitchOnPWM+0x50>
 8009816:	bf00      	nop

08009818 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009818:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800981c:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800981e:	68d3      	ldr	r3, [r2, #12]
 8009820:	f023 0301 	bic.w	r3, r3, #1
{
 8009824:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 8009826:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
 800982a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800982c:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 800982e:	2500      	movs	r5, #0
 8009830:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009834:	f880 5069 	strb.w	r5, [r0, #105]	; 0x69
 8009838:	6453      	str	r3, [r2, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 800983a:	b91c      	cbnz	r4, 8009844 <R3_2_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800983c:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8009840:	2b02      	cmp	r3, #2
 8009842:	d00d      	beq.n	8009860 <R3_2_SwitchOffPWM+0x48>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009844:	f06f 0301 	mvn.w	r3, #1
 8009848:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800984a:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800984c:	07db      	lsls	r3, r3, #31
 800984e:	d5fc      	bpl.n	800984a <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009850:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8009854:	2300      	movs	r3, #0
 8009856:	6111      	str	r1, [r2, #16]
}
 8009858:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked=false; 
 800985a:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
}
 800985e:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009860:	e9d1 3408 	ldrd	r3, r4, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009864:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8009868:	629d      	str	r5, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800986a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800986c:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009870:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8009874:	62a5      	str	r5, [r4, #40]	; 0x28
 8009876:	6299      	str	r1, [r3, #40]	; 0x28
}
 8009878:	e7e4      	b.n	8009844 <R3_2_SwitchOffPWM+0x2c>
 800987a:	bf00      	nop

0800987c <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800987c:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800987e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8009882:	6f43      	ldr	r3, [r0, #116]	; 0x74
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009884:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009886:	686a      	ldr	r2, [r5, #4]
 8009888:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800988c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009890:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8009892:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8009896:	4a0d      	ldr	r2, [pc, #52]	; (80098cc <R3_2_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8009898:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800989c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800989e:	6800      	ldr	r0, [r0, #0]
 80098a0:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 80098a2:	4293      	cmp	r3, r2
 80098a4:	db05      	blt.n	80098b2 <R3_2_RLGetPhaseCurrents+0x36>
  {
    if ( wAux < INT16_MAX )
 80098a6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80098aa:	4293      	cmp	r3, r2
 80098ac:	dc0a      	bgt.n	80098c4 <R3_2_RLGetPhaseCurrents+0x48>
 80098ae:	b21b      	sxth	r3, r3
 80098b0:	e000      	b.n	80098b4 <R3_2_RLGetPhaseCurrents+0x38>
 80098b2:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <R3_2_RLGetPhaseCurrents+0x54>)
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 80098b4:	2200      	movs	r2, #0
 80098b6:	f363 020f 	bfi	r2, r3, #0, #16
 80098ba:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = (int16_t)wAux;
}
 80098be:	bc30      	pop	{r4, r5}
  pStator_Currents->a = (int16_t)wAux;
 80098c0:	600a      	str	r2, [r1, #0]
}
 80098c2:	4770      	bx	lr
 80098c4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80098c8:	e7f4      	b.n	80098b4 <R3_2_RLGetPhaseCurrents+0x38>
 80098ca:	bf00      	nop
 80098cc:	ffff8002 	.word	0xffff8002
 80098d0:	ffff8001 	.word	0xffff8001

080098d4 <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80098d4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->ADCRegularLocked=true;
 80098d8:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80098da:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked=true;
 80098dc:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80098e0:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80098e2:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80098e6:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80098e8:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80098ea:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80098ec:	07db      	lsls	r3, r3, #31
 80098ee:	d5fc      	bpl.n	80098ea <R3_2_RLTurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80098f0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80098f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098f6:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80098f8:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d000      	beq.n	8009902 <R3_2_RLTurnOnLowSides+0x2e>
 8009900:	4770      	bx	lr
{
 8009902:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009904:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009908:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800990a:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800990e:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009912:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009916:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8009918:	6284      	str	r4, [r0, #40]	; 0x28
  }
  return;
}
 800991a:	bc70      	pop	{r4, r5, r6}
 800991c:	629a      	str	r2, [r3, #40]	; 0x28
 800991e:	4770      	bx	lr

08009920 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009920:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 8009924:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009926:	688b      	ldr	r3, [r1, #8]
{
 8009928:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800992a:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 800992e:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009932:	f06f 0201 	mvn.w	r2, #1
 8009936:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009938:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800993a:	07d6      	lsls	r6, r2, #31
 800993c:	d5fc      	bpl.n	8009938 <R3_2_RLSwitchOnPWM+0x18>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 800993e:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009942:	f06f 0701 	mvn.w	r7, #1
 8009946:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009948:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800994a:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800994c:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800994e:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009950:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8009952:	07d2      	lsls	r2, r2, #31
 8009954:	d5fc      	bpl.n	8009950 <R3_2_RLSwitchOnPWM+0x30>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009956:	68da      	ldr	r2, [r3, #12]
 8009958:	f042 0201 	orr.w	r2, r2, #1
 800995c:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800995e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009964:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009968:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800996c:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800996e:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8009972:	2a02      	cmp	r2, #2
 8009974:	d00f      	beq.n	8009996 <R3_2_RLSwitchOnPWM+0x76>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 8009976:	2303      	movs	r3, #3
 8009978:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  MODIFY_REG(ADCx->CR,
 800997c:	68aa      	ldr	r2, [r5, #8]
 800997e:	4913      	ldr	r1, [pc, #76]	; (80099cc <R3_2_RLSwitchOnPWM+0xac>)
 8009980:	400a      	ands	r2, r1
 8009982:	f042 0208 	orr.w	r2, r2, #8
 8009986:	60aa      	str	r2, [r5, #8]
 8009988:	68a3      	ldr	r3, [r4, #8]
 800998a:	400b      	ands	r3, r1
 800998c:	f043 0308 	orr.w	r3, r3, #8
 8009990:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 8009992:	bcf0      	pop	{r4, r5, r6, r7}
 8009994:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8009996:	6a1a      	ldr	r2, [r3, #32]
 8009998:	f240 5355 	movw	r3, #1365	; 0x555
 800999c:	421a      	tst	r2, r3
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800999e:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80099a2:	f8b1 20ac 	ldrh.w	r2, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80099a6:	d008      	beq.n	80099ba <R3_2_RLSwitchOnPWM+0x9a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80099a8:	619a      	str	r2, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80099aa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80099ac:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80099b0:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 80099b4:	61b7      	str	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80099b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80099b8:	e7dd      	b.n	8009976 <R3_2_RLSwitchOnPWM+0x56>
  WRITE_REG(GPIOx->BRR, PinMask);
 80099ba:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80099bc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80099be:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80099c2:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 80099c6:	62b7      	str	r7, [r6, #40]	; 0x28
 80099c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80099ca:	e7d4      	b.n	8009976 <R3_2_RLSwitchOnPWM+0x56>
 80099cc:	7fffffc0 	.word	0x7fffffc0

080099d0 <R3_2_SetAOReferenceVoltage>:
{
 80099d0:	b430      	push	{r4, r5}
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80099d2:	0c84      	lsrs	r4, r0, #18
 80099d4:	f004 043c 	and.w	r4, r4, #60	; 0x3c
 80099d8:	f101 0508 	add.w	r5, r1, #8
 80099dc:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80099de:	5963      	ldr	r3, [r4, r5]
 80099e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099e8:	431a      	orrs	r2, r3
 80099ea:	5162      	str	r2, [r4, r5]
  SET_BIT(DACx->SWTRIGR,
 80099ec:	684a      	ldr	r2, [r1, #4]
 80099ee:	f000 0303 	and.w	r3, r0, #3
 80099f2:	4313      	orrs	r3, r2
 80099f4:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 80099f6:	680a      	ldr	r2, [r1, #0]
 80099f8:	2301      	movs	r3, #1
 80099fa:	f000 0010 	and.w	r0, r0, #16
 80099fe:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8009a02:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009a06:	4b15      	ldr	r3, [pc, #84]	; (8009a5c <R3_2_SetAOReferenceVoltage+0x8c>)
 8009a08:	d014      	beq.n	8009a34 <R3_2_SetAOReferenceVoltage+0x64>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4c14      	ldr	r4, [pc, #80]	; (8009a60 <R3_2_SetAOReferenceVoltage+0x90>)
  SET_BIT(DACx->CR,
 8009a0e:	680a      	ldr	r2, [r1, #0]
 8009a10:	fba4 4303 	umull	r4, r3, r4, r3
 8009a14:	0cdb      	lsrs	r3, r3, #19
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	4310      	orrs	r0, r2
 8009a1a:	6008      	str	r0, [r1, #0]
 8009a1c:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 8009a1e:	9b00      	ldr	r3, [sp, #0]
 8009a20:	b12b      	cbz	r3, 8009a2e <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 8009a22:	9b00      	ldr	r3, [sp, #0]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 8009a28:	9b00      	ldr	r3, [sp, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1f9      	bne.n	8009a22 <R3_2_SetAOReferenceVoltage+0x52>
}
 8009a2e:	b002      	add	sp, #8
 8009a30:	bc30      	pop	{r4, r5}
 8009a32:	4770      	bx	lr
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009a34:	4a0a      	ldr	r2, [pc, #40]	; (8009a60 <R3_2_SetAOReferenceVoltage+0x90>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	fba2 2303 	umull	r2, r3, r2, r3
 8009a3c:	0cdb      	lsrs	r3, r3, #19
 8009a3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009a42:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8009a44:	9b01      	ldr	r3, [sp, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0f1      	beq.n	8009a2e <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 8009a4a:	9b01      	ldr	r3, [sp, #4]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8009a50:	9b01      	ldr	r3, [sp, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1f9      	bne.n	8009a4a <R3_2_SetAOReferenceVoltage+0x7a>
}
 8009a56:	b002      	add	sp, #8
 8009a58:	bc30      	pop	{r4, r5}
 8009a5a:	4770      	bx	lr
 8009a5c:	200006a0 	.word	0x200006a0
 8009a60:	431bde83 	.word	0x431bde83

08009a64 <R3_2_Init>:
{
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	4607      	mov	r7, r0
 8009a6a:	b087      	sub	sp, #28
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8009a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    if ( TIMx == TIM1 )
 8009a70:	f8df e28c 	ldr.w	lr, [pc, #652]	; 8009d00 <R3_2_Init+0x29c>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 8009a74:	681d      	ldr	r5, [r3, #0]
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 8009a76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8009a78:	686a      	ldr	r2, [r5, #4]
 8009a7a:	9100      	str	r1, [sp, #0]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8009a7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009a7e:	9101      	str	r1, [sp, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009a80:	2004      	movs	r0, #4
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8009a82:	6b59      	ldr	r1, [r3, #52]	; 0x34
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8009a84:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8009a88:	9102      	str	r1, [sp, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8009a8a:	f022 0204 	bic.w	r2, r2, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009a8e:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8009a92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009a94:	9103      	str	r1, [sp, #12]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8009a96:	e9d3 ba04 	ldrd	fp, sl, [r3, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8009a9a:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 8009a9e:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009aa0:	6028      	str	r0, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009aa2:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009aa4:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009aa6:	f022 0220 	bic.w	r2, r2, #32
 8009aaa:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009aac:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8009aae:	6872      	ldr	r2, [r6, #4]
 8009ab0:	f022 0204 	bic.w	r2, r2, #4
 8009ab4:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009ab6:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009ab8:	6872      	ldr	r2, [r6, #4]
 8009aba:	f022 0220 	bic.w	r2, r2, #32
 8009abe:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009ac0:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8009ac2:	498e      	ldr	r1, [pc, #568]	; (8009cfc <R3_2_Init+0x298>)
 8009ac4:	690a      	ldr	r2, [r1, #16]
    if ( TIMx == TIM1 )
 8009ac6:	4574      	cmp	r4, lr
 8009ac8:	bf0c      	ite	eq
 8009aca:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8009ace:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 8009ad2:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 8009ad4:	f1bc 0f00 	cmp.w	ip, #0
 8009ad8:	d014      	beq.n	8009b04 <R3_2_Init+0xa0>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 8009ada:	f8dc 2000 	ldr.w	r2, [ip]
 8009ade:	b11a      	cbz	r2, 8009ae8 <R3_2_Init+0x84>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8009ae0:	6811      	ldr	r1, [r2, #0]
 8009ae2:	f041 0101 	orr.w	r1, r1, #1
 8009ae6:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 8009ae8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8009aec:	b11a      	cbz	r2, 8009af6 <R3_2_Init+0x92>
 8009aee:	6811      	ldr	r1, [r2, #0]
 8009af0:	f041 0101 	orr.w	r1, r1, #1
 8009af4:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 8009af6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8009afa:	b11a      	cbz	r2, 8009b04 <R3_2_Init+0xa0>
 8009afc:	6811      	ldr	r1, [r2, #0]
 8009afe:	f041 0101 	orr.w	r1, r1, #1
 8009b02:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 8009b04:	f1bb 0f00 	cmp.w	fp, #0
 8009b08:	d017      	beq.n	8009b3a <R3_2_Init+0xd6>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 8009b0a:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 8009b0e:	2a01      	cmp	r2, #1
 8009b10:	d007      	beq.n	8009b22 <R3_2_Init+0xbe>
 8009b12:	9a00      	ldr	r2, [sp, #0]
 8009b14:	b12a      	cbz	r2, 8009b22 <R3_2_Init+0xbe>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8009b16:	4611      	mov	r1, r2
 8009b18:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009b1a:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8009b1e:	f7ff ff57 	bl	80099d0 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009b22:	f8db 3000 	ldr.w	r3, [fp]
 8009b26:	f043 0301 	orr.w	r3, r3, #1
 8009b2a:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009b2e:	f8db 3000 	ldr.w	r3, [fp]
 8009b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b36:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 8009b3a:	f1ba 0f00 	cmp.w	sl, #0
 8009b3e:	d019      	beq.n	8009b74 <R3_2_Init+0x110>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 8009b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b44:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8009b48:	2a01      	cmp	r2, #1
 8009b4a:	d007      	beq.n	8009b5c <R3_2_Init+0xf8>
 8009b4c:	9a01      	ldr	r2, [sp, #4]
 8009b4e:	b12a      	cbz	r2, 8009b5c <R3_2_Init+0xf8>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8009b50:	4611      	mov	r1, r2
 8009b52:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009b54:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8009b58:	f7ff ff3a 	bl	80099d0 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009b5c:	f8da 3000 	ldr.w	r3, [sl]
 8009b60:	f043 0301 	orr.w	r3, r3, #1
 8009b64:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009b68:	f8da 3000 	ldr.w	r3, [sl]
 8009b6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b70:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 8009b74:	f1b9 0f00 	cmp.w	r9, #0
 8009b78:	d019      	beq.n	8009bae <R3_2_Init+0x14a>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 8009b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b7e:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8009b82:	2a01      	cmp	r2, #1
 8009b84:	d007      	beq.n	8009b96 <R3_2_Init+0x132>
 8009b86:	9a02      	ldr	r2, [sp, #8]
 8009b88:	b12a      	cbz	r2, 8009b96 <R3_2_Init+0x132>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009b8e:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8009b92:	f7ff ff1d 	bl	80099d0 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009b96:	f8d9 3000 	ldr.w	r3, [r9]
 8009b9a:	f043 0301 	orr.w	r3, r3, #1
 8009b9e:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009ba2:	f8d9 3000 	ldr.w	r3, [r9]
 8009ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009baa:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 8009bae:	f1b8 0f00 	cmp.w	r8, #0
 8009bb2:	d019      	beq.n	8009be8 <R3_2_Init+0x184>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 8009bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bb8:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
 8009bbc:	2a01      	cmp	r2, #1
 8009bbe:	d007      	beq.n	8009bd0 <R3_2_Init+0x16c>
 8009bc0:	9a03      	ldr	r2, [sp, #12]
 8009bc2:	b12a      	cbz	r2, 8009bd0 <R3_2_Init+0x16c>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009bc8:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
 8009bcc:	f7ff ff00 	bl	80099d0 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd4:	f043 0301 	orr.w	r3, r3, #1
 8009bd8:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009be4:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009be8:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 8009bea:	07d8      	lsls	r0, r3, #31
 8009bec:	d56d      	bpl.n	8009cca <R3_2_Init+0x266>
 8009bee:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8009bf0:	07d9      	lsls	r1, r3, #31
 8009bf2:	d576      	bpl.n	8009ce2 <R3_2_Init+0x27e>
  volatile uint32_t Brk2Timeout = 1000;
 8009bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009bf8:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009bfa:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8009bfc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009c00:	f023 0301 	bic.w	r3, r3, #1
 8009c04:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009c06:	6863      	ldr	r3, [r4, #4]
 8009c08:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c10:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009c12:	69a3      	ldr	r3, [r4, #24]
 8009c14:	f043 0308 	orr.w	r3, r3, #8
 8009c18:	61a3      	str	r3, [r4, #24]
 8009c1a:	69a3      	ldr	r3, [r4, #24]
 8009c1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c20:	61a3      	str	r3, [r4, #24]
 8009c22:	69e3      	ldr	r3, [r4, #28]
 8009c24:	f043 0308 	orr.w	r3, r3, #8
 8009c28:	61e3      	str	r3, [r4, #28]
 8009c2a:	69e3      	ldr	r3, [r4, #28]
 8009c2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c30:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009c32:	6963      	ldr	r3, [r4, #20]
 8009c34:	f043 0301 	orr.w	r3, r3, #1
 8009c38:	6163      	str	r3, [r4, #20]
 8009c3a:	f892 30c7 	ldrb.w	r3, [r2, #199]	; 0xc7
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d029      	beq.n	8009c96 <R3_2_Init+0x232>
    if ( pHandle->_Super.Motor == M1 )
 8009c42:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8009c46:	b92b      	cbnz	r3, 8009c54 <R3_2_Init+0x1f0>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8009c48:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d030      	beq.n	8009cb2 <R3_2_Init+0x24e>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8009c50:	2b03      	cmp	r3, #3
 8009c52:	d04a      	beq.n	8009cea <R3_2_Init+0x286>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8009c54:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8009c58:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8009c5a:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 8009c5e:	b16b      	cbz	r3, 8009c7c <R3_2_Init+0x218>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	05da      	lsls	r2, r3, #23
 8009c64:	d50a      	bpl.n	8009c7c <R3_2_Init+0x218>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8009c66:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8009c6a:	9b05      	ldr	r3, [sp, #20]
 8009c6c:	b133      	cbz	r3, 8009c7c <R3_2_Init+0x218>
 8009c6e:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 8009c70:	9b05      	ldr	r3, [sp, #20]
 8009c72:	3b01      	subs	r3, #1
 8009c74:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8009c76:	6923      	ldr	r3, [r4, #16]
 8009c78:	05db      	lsls	r3, r3, #23
 8009c7a:	d4f6      	bmi.n	8009c6a <R3_2_Init+0x206>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8009c7c:	68e3      	ldr	r3, [r4, #12]
 8009c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c82:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 8009c84:	6a23      	ldr	r3, [r4, #32]
 8009c86:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8009c8a:	f043 0305 	orr.w	r3, r3, #5
 8009c8e:	6223      	str	r3, [r4, #32]
}
 8009c90:	b007      	add	sp, #28
 8009c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8009c96:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d109      	bne.n	8009cb2 <R3_2_Init+0x24e>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8009c9e:	f892 10c1 	ldrb.w	r1, [r2, #193]	; 0xc1
 8009ca2:	2903      	cmp	r1, #3
 8009ca4:	d105      	bne.n	8009cb2 <R3_2_Init+0x24e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009ca6:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009ca8:	6963      	ldr	r3, [r4, #20]
 8009caa:	f043 0301 	orr.w	r3, r3, #1
 8009cae:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009cb0:	6321      	str	r1, [r4, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8009cb2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8009cb6:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8009cb8:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8009cba:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8009cbe:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8009cc0:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1cb      	bne.n	8009c60 <R3_2_Init+0x1fc>
 8009cc8:	e7d8      	b.n	8009c7c <R3_2_Init+0x218>
      R3_2_ADCxInit (ADCx_1);
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f7ff fbb8 	bl	8009440 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8009cd0:	2340      	movs	r3, #64	; 0x40
 8009cd2:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8009cd4:	686b      	ldr	r3, [r5, #4]
 8009cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cda:	606b      	str	r3, [r5, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009cdc:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8009cde:	07d9      	lsls	r1, r3, #31
 8009ce0:	d488      	bmi.n	8009bf4 <R3_2_Init+0x190>
      R3_2_ADCxInit (ADCx_2);
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7ff fbac 	bl	8009440 <R3_2_ADCxInit>
 8009ce8:	e784      	b.n	8009bf4 <R3_2_Init+0x190>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009cea:	2101      	movs	r1, #1
 8009cec:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009cee:	6961      	ldr	r1, [r4, #20]
 8009cf0:	f041 0101 	orr.w	r1, r1, #1
 8009cf4:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009cf6:	6323      	str	r3, [r4, #48]	; 0x30
}
 8009cf8:	e7ac      	b.n	8009c54 <R3_2_Init+0x1f0>
 8009cfa:	bf00      	nop
 8009cfc:	e0042000 	.word	0xe0042000
 8009d00:	40012c00 	.word	0x40012c00

08009d04 <R3_2_CurrentReadingPolarization>:
{
 8009d04:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009d06:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8009d0a:	6846      	ldr	r6, [r0, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009d0c:	689d      	ldr	r5, [r3, #8]
  SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8009d0e:	6981      	ldr	r1, [r0, #24]
{
 8009d10:	b085      	sub	sp, #20
  pHandle->PhaseAOffset = 0u;
 8009d12:	2200      	movs	r2, #0
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8009d14:	9602      	str	r6, [sp, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009d16:	e9d3 7600 	ldrd	r7, r6, [r3]
  SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8009d1a:	9103      	str	r1, [sp, #12]
  pHandle->PolarizationCounter = 0u;
 8009d1c:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  CLEAR_BIT(TIMx->CCER, Channels);
 8009d20:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8009d22:	6702      	str	r2, [r0, #112]	; 0x70
 8009d24:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8009d28:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 8009d2c:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
 8009d30:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8009d32:	4a3f      	ldr	r2, [pc, #252]	; (8009e30 <R3_2_CurrentReadingPolarization+0x12c>)
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8009d34:	4b3f      	ldr	r3, [pc, #252]	; (8009e34 <R3_2_CurrentReadingPolarization+0x130>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8009d36:	6042      	str	r2, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8009d38:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8009d3a:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 8009d3c:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8009d3e:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
  pHandle->PolarizationSector=SECTOR_5;
 8009d42:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_5;   
 8009d46:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
{
 8009d4a:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8009d4c:	f7ff fd18 	bl	8009780 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8009d50:	4a39      	ldr	r2, [pc, #228]	; (8009e38 <R3_2_CurrentReadingPolarization+0x134>)
 8009d52:	686b      	ldr	r3, [r5, #4]
 8009d54:	4013      	ands	r3, r2
 8009d56:	2b70      	cmp	r3, #112	; 0x70
 8009d58:	d1fb      	bne.n	8009d52 <R3_2_CurrentReadingPolarization+0x4e>
  MODIFY_REG(ADCx->CR,
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	4937      	ldr	r1, [pc, #220]	; (8009e3c <R3_2_CurrentReadingPolarization+0x138>)
  waitForPolarizationEnd( TIMx,
 8009d5e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8009d62:	400a      	ands	r2, r1
 8009d64:	f042 0208 	orr.w	r2, r2, #8
 8009d68:	60ba      	str	r2, [r7, #8]
 8009d6a:	68b3      	ldr	r3, [r6, #8]
 8009d6c:	400b      	ands	r3, r1
 8009d6e:	f043 0308 	orr.w	r3, r3, #8
 8009d72:	60b3      	str	r3, [r6, #8]
 8009d74:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8009d78:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8009d7c:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
 8009d80:	4628      	mov	r0, r5
 8009d82:	e9cd 3100 	strd	r3, r1, [sp]
 8009d86:	f7ff fb3f 	bl	8009408 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f7ff fd44 	bl	8009818 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8009d90:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8009d92:	4a2b      	ldr	r2, [pc, #172]	; (8009e40 <R3_2_CurrentReadingPolarization+0x13c>)
 8009d94:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8009d96:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8009d98:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
  pHandle->PolarizationSector=SECTOR_1;
 8009d9c:	f884 6081 	strb.w	r6, [r4, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_1;   
 8009da0:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8009da4:	f7ff fcec 	bl	8009780 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8009da8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8009dac:	e9dd 3100 	ldrd	r3, r1, [sp]
 8009db0:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 8009db4:	4628      	mov	r0, r5
 8009db6:	f7ff fb27 	bl	8009408 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f7ff fd2c 	bl	8009818 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009dc0:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009dc4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009dc6:	9f02      	ldr	r7, [sp, #8]
  pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8009dc8:	9803      	ldr	r0, [sp, #12]
  pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009dca:	6067      	str	r7, [r4, #4]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8009dcc:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009dce:	0912      	lsrs	r2, r2, #4
 8009dd0:	e9c4 121c 	strd	r1, r2, [r4, #112]	; 0x70
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009dd4:	091b      	lsrs	r3, r3, #4
 8009dd6:	67a3      	str	r3, [r4, #120]	; 0x78
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009dd8:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8009dda:	61a0      	str	r0, [r4, #24]
 8009ddc:	f023 0308 	bic.w	r3, r3, #8
 8009de0:	61ab      	str	r3, [r5, #24]
 8009de2:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8009de4:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8009de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009dec:	61aa      	str	r2, [r5, #24]
 8009dee:	69ea      	ldr	r2, [r5, #28]
 8009df0:	f022 0208 	bic.w	r2, r2, #8
 8009df4:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009df6:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009df8:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009dfa:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009dfc:	69ab      	ldr	r3, [r5, #24]
 8009dfe:	f043 0308 	orr.w	r3, r3, #8
 8009e02:	61ab      	str	r3, [r5, #24]
 8009e04:	69ab      	ldr	r3, [r5, #24]
 8009e06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e0a:	61ab      	str	r3, [r5, #24]
 8009e0c:	69eb      	ldr	r3, [r5, #28]
 8009e0e:	f043 0308 	orr.w	r3, r3, #8
 8009e12:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009e14:	6a2b      	ldr	r3, [r5, #32]
 8009e16:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8009e1a:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 8009e1e:	2204      	movs	r2, #4
 8009e20:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 8009e22:	f884 6084 	strb.w	r6, [r4, #132]	; 0x84
  pHandle->_Super.Sector=SECTOR_5;
 8009e26:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
}
 8009e2a:	b005      	add	sp, #20
 8009e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	080096a1 	.word	0x080096a1
 8009e34:	08009665 	.word	0x08009665
 8009e38:	02000070 	.word	0x02000070
 8009e3c:	7fffffc0 	.word	0x7fffffc0
 8009e40:	080096ed 	.word	0x080096ed

08009e44 <R3_2_SetADCSampPointSectX>:
{
 8009e44:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8009e46:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 8009e4a:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 8009e4e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8009e52:	1aca      	subs	r2, r1, r3
 8009e54:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 8009e58:	b292      	uxth	r2, r2
 8009e5a:	42b2      	cmp	r2, r6
 8009e5c:	d914      	bls.n	8009e88 <R3_2_SetADCSampPointSectX+0x44>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8009e5e:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 8009e60:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8009e62:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 8009e64:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009e68:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8009e6a:	8f45      	ldrh	r5, [r0, #58]	; 0x3a
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8009e6c:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8009e6e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009e70:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009e72:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009e74:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009e76:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8009e78:	6852      	ldr	r2, [r2, #4]
 8009e7a:	4b10      	ldr	r3, [pc, #64]	; (8009ebc <R3_2_SetADCSampPointSectX+0x78>)
 8009e7c:	421a      	tst	r2, r3
}
 8009e7e:	bf14      	ite	ne
 8009e80:	2001      	movne	r0, #1
 8009e82:	2000      	moveq	r0, #0
 8009e84:	bc70      	pop	{r4, r5, r6}
 8009e86:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8009e88:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8009e8c:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8009e8e:	b2ad      	uxth	r5, r5
 8009e90:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 8009e94:	d904      	bls.n	8009ea0 <R3_2_SetADCSampPointSectX+0x5c>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8009e96:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	; 0xb6
 8009e9a:	1a9b      	subs	r3, r3, r2
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	e7e3      	b.n	8009e68 <R3_2_SetADCSampPointSectX+0x24>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8009ea0:	4433      	add	r3, r6
 8009ea2:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8009ea4:	4299      	cmp	r1, r3
 8009ea6:	d8df      	bhi.n	8009e68 <R3_2_SetADCSampPointSectX+0x24>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8009ea8:	43db      	mvns	r3, r3
 8009eaa:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8009eae:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8009eb2:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8009eb4:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8009eb8:	e7d6      	b.n	8009e68 <R3_2_SetADCSampPointSectX+0x24>
 8009eba:	bf00      	nop
 8009ebc:	02000070 	.word	0x02000070

08009ec0 <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009ec0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 8009ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec8:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009eca:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009ece:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d033      	beq.n	8009f3e <R3_2_TIMx_UP_IRQHandler+0x7e>
    while (ADCx_1->JSQR != 0x0u)
 8009ed6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1fc      	bne.n	8009ed6 <R3_2_TIMx_UP_IRQHandler+0x16>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8009edc:	f894 c068 	ldrb.w	ip, [r4, #104]	; 0x68
 8009ee0:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 8009ee4:	68df      	ldr	r7, [r3, #12]
    if (Opamp != NULL )
 8009ee6:	b12f      	cbz	r7, 8009ef4 <R3_2_TIMx_UP_IRQHandler+0x34>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8009ee8:	6838      	ldr	r0, [r7, #0]
 8009eea:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8009eec:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 8009ef0:	4330      	orrs	r0, r6
 8009ef2:	6038      	str	r0, [r7, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8009ef4:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    if (Opamp != NULL )
 8009ef6:	b13f      	cbz	r7, 8009f08 <R3_2_TIMx_UP_IRQHandler+0x48>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8009ef8:	6838      	ldr	r0, [r7, #0]
 8009efa:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 8009efe:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 8009f02:	ea43 030e 	orr.w	r3, r3, lr
 8009f06:	603b      	str	r3, [r7, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009f08:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8009f0c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 8009f10:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009f12:	f8d2 7094 	ldr.w	r7, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009f16:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009f18:	433b      	orrs	r3, r7
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009f1a:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009f1c:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009f20:	686b      	ldr	r3, [r5, #4]
 8009f22:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f2a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009f2e:	2280      	movs	r2, #128	; 0x80
 8009f30:	606b      	str	r3, [r5, #4]
}
 8009f32:	f104 0066 	add.w	r0, r4, #102	; 0x66
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009f36:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
}
 8009f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f3e:	f894 c068 	ldrb.w	ip, [r4, #104]	; 0x68
 8009f42:	e7e1      	b.n	8009f08 <R3_2_TIMx_UP_IRQHandler+0x48>

08009f44 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8009f44:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8009f48:	b92b      	cbnz	r3, 8009f56 <R3_2_BRK2_IRQHandler+0x12>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009f4a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009f4e:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8009f52:	2a02      	cmp	r2, #2
 8009f54:	d004      	beq.n	8009f60 <R3_2_BRK2_IRQHandler+0x1c>
  pHandle->OverCurrentFlag = true;
 8009f56:	2301      	movs	r3, #1
 8009f58:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 8009f5c:	3066      	adds	r0, #102	; 0x66
 8009f5e:	4770      	bx	lr
{
 8009f60:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009f62:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009f66:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8009f6c:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009f6e:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009f72:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8009f76:	628c      	str	r4, [r1, #40]	; 0x28
 8009f78:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 8009f80:	bc30      	pop	{r4, r5}
 8009f82:	3066      	adds	r0, #102	; 0x66
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop

08009f88 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009f88:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 8009f8c:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009f8e:	6890      	ldr	r0, [r2, #8]
 8009f90:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8009f92:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f98:	6442      	str	r2, [r0, #68]	; 0x44
}
 8009f9a:	f103 0066 	add.w	r0, r3, #102	; 0x66
  pHandle->OverVoltageFlag = true;
 8009f9e:	f883 1083 	strb.w	r1, [r3, #131]	; 0x83
  pHandle->BrakeActionLock = true;
 8009fa2:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8009fa6:	4770      	bx	lr

08009fa8 <R3_2_IsOverCurrentOccurred>:
{
 8009fa8:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 8009faa:	f890 0083 	ldrb.w	r0, [r0, #131]	; 0x83
 8009fae:	b160      	cbz	r0, 8009fca <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8009fb6:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8009fb8:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 8009fba:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8009fbe:	b11a      	cbz	r2, 8009fc8 <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8009fc0:	2200      	movs	r2, #0
    retVal |= MC_BREAK_IN;
 8009fc2:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8009fc4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8009fc8:	4770      	bx	lr
 8009fca:	2140      	movs	r1, #64	; 0x40
 8009fcc:	e7f5      	b.n	8009fba <R3_2_IsOverCurrentOccurred+0x12>
 8009fce:	bf00      	nop

08009fd0 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8009fd0:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
{
 8009fd4:	b410      	push	{r4}
  if ( pHandle->_Super.RLDetectionMode == false )
 8009fd6:	2900      	cmp	r1, #0
 8009fd8:	d13d      	bne.n	800a056 <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009fda:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8009fde:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8009fe0:	699a      	ldr	r2, [r3, #24]
 8009fe2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009fe6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009fea:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009fee:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009ff0:	6a1a      	ldr	r2, [r3, #32]
 8009ff2:	f042 0201 	orr.w	r2, r2, #1
 8009ff6:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009ff8:	6a1a      	ldr	r2, [r3, #32]
 8009ffa:	f022 0204 	bic.w	r2, r2, #4
 8009ffe:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a000:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800a002:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 800a006:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800a008:	f103 0118 	add.w	r1, r3, #24
 800a00c:	d031      	beq.n	800a072 <R3_2_RLDetectionModeEnable+0xa2>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a00e:	2a02      	cmp	r2, #2
 800a010:	d10f      	bne.n	800a032 <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a012:	699a      	ldr	r2, [r3, #24]
 800a014:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a018:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800a01c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a020:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a022:	6a1a      	ldr	r2, [r3, #32]
 800a024:	f042 0210 	orr.w	r2, r2, #16
 800a028:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a02a:	6a1a      	ldr	r2, [r3, #32]
 800a02c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a030:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a032:	684a      	ldr	r2, [r1, #4]
 800a034:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a038:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800a03c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800a040:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a042:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800a044:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800a046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a04a:	621a      	str	r2, [r3, #32]
 800a04c:	6a1a      	ldr	r2, [r3, #32]
 800a04e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a052:	621a      	str	r2, [r3, #32]
 800a054:	6701      	str	r1, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800a056:	4b0f      	ldr	r3, [pc, #60]	; (800a094 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 800a058:	490f      	ldr	r1, [pc, #60]	; (800a098 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a05a:	4a10      	ldr	r2, [pc, #64]	; (800a09c <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800a05c:	4c10      	ldr	r4, [pc, #64]	; (800a0a0 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800a05e:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 800a060:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800a062:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a064:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 800a068:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800a06c:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 800a070:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a072:	699a      	ldr	r2, [r3, #24]
 800a074:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a078:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800a07c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a080:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a082:	6a1a      	ldr	r2, [r3, #32]
 800a084:	f022 0210 	bic.w	r2, r2, #16
 800a088:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800a08a:	6a1a      	ldr	r2, [r3, #32]
 800a08c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a090:	621a      	str	r2, [r3, #32]
}
 800a092:	e7ce      	b.n	800a032 <R3_2_RLDetectionModeEnable+0x62>
 800a094:	0800987d 	.word	0x0800987d
 800a098:	08009921 	.word	0x08009921
 800a09c:	08009819 	.word	0x08009819
 800a0a0:	080098d5 	.word	0x080098d5

0800a0a4 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 800a0a4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d05a      	beq.n	800a162 <R3_2_RLDetectionModeDisable+0xbe>
{
 800a0ac:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a0ae:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 800a0b2:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a0b4:	699a      	ldr	r2, [r3, #24]
 800a0b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a0ba:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800a0be:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a0c2:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a0c4:	6a1a      	ldr	r2, [r3, #32]
 800a0c6:	f042 0201 	orr.w	r2, r2, #1
 800a0ca:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800a0cc:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 800a0d0:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800a0d2:	f103 0518 	add.w	r5, r3, #24
 800a0d6:	d045      	beq.n	800a164 <R3_2_RLDetectionModeDisable+0xc0>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a0d8:	2a02      	cmp	r2, #2
 800a0da:	d103      	bne.n	800a0e4 <R3_2_RLDetectionModeDisable+0x40>
  CLEAR_BIT(TIMx->CCER, Channels);
 800a0dc:	6a1a      	ldr	r2, [r3, #32]
 800a0de:	f022 0204 	bic.w	r2, r2, #4
 800a0e2:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800a0e4:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 800a0e8:	0849      	lsrs	r1, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a0ea:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a0ec:	699a      	ldr	r2, [r3, #24]
 800a0ee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a0f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800a0f6:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800a0fa:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a0fc:	6a1a      	ldr	r2, [r3, #32]
 800a0fe:	f042 0210 	orr.w	r2, r2, #16
 800a102:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800a104:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 800a108:	2a01      	cmp	r2, #1
 800a10a:	d035      	beq.n	800a178 <R3_2_RLDetectionModeDisable+0xd4>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a10c:	2a02      	cmp	r2, #2
 800a10e:	d103      	bne.n	800a118 <R3_2_RLDetectionModeDisable+0x74>
  CLEAR_BIT(TIMx->CCER, Channels);
 800a110:	6a1a      	ldr	r2, [r3, #32]
 800a112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a116:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a118:	6399      	str	r1, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a11a:	686a      	ldr	r2, [r5, #4]
 800a11c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a120:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800a124:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a128:	606a      	str	r2, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 800a12a:	6a1a      	ldr	r2, [r3, #32]
 800a12c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a130:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800a132:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 800a136:	2a01      	cmp	r2, #1
 800a138:	d019      	beq.n	800a16e <R3_2_RLDetectionModeDisable+0xca>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800a13a:	2a02      	cmp	r2, #2
 800a13c:	d103      	bne.n	800a146 <R3_2_RLDetectionModeDisable+0xa2>
  CLEAR_BIT(TIMx->CCER, Channels);
 800a13e:	6a1a      	ldr	r2, [r3, #32]
 800a140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a144:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 800a146:	4c0f      	ldr	r4, [pc, #60]	; (800a184 <R3_2_RLDetectionModeDisable+0xe0>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a148:	4a0f      	ldr	r2, [pc, #60]	; (800a188 <R3_2_RLDetectionModeDisable+0xe4>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a14a:	63d9      	str	r1, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800a14c:	4e0f      	ldr	r6, [pc, #60]	; (800a18c <R3_2_RLDetectionModeDisable+0xe8>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800a14e:	4d10      	ldr	r5, [pc, #64]	; (800a190 <R3_2_RLDetectionModeDisable+0xec>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800a150:	6046      	str	r6, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 800a152:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a154:	e9c0 2402 	strd	r2, r4, [r0, #8]
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800a158:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 800a15a:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 800a15e:	bc70      	pop	{r4, r5, r6}
 800a160:	4770      	bx	lr
 800a162:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800a164:	6a1a      	ldr	r2, [r3, #32]
 800a166:	f042 0204 	orr.w	r2, r2, #4
 800a16a:	621a      	str	r2, [r3, #32]
}
 800a16c:	e7ba      	b.n	800a0e4 <R3_2_RLDetectionModeDisable+0x40>
  SET_BIT(TIMx->CCER, Channels);
 800a16e:	6a1a      	ldr	r2, [r3, #32]
 800a170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a174:	621a      	str	r2, [r3, #32]
}
 800a176:	e7e6      	b.n	800a146 <R3_2_RLDetectionModeDisable+0xa2>
  SET_BIT(TIMx->CCER, Channels);
 800a178:	6a1a      	ldr	r2, [r3, #32]
 800a17a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a17e:	621a      	str	r2, [r3, #32]
}
 800a180:	e7ca      	b.n	800a118 <R3_2_RLDetectionModeDisable+0x74>
 800a182:	bf00      	nop
 800a184:	08009781 	.word	0x08009781
 800a188:	08009819 	.word	0x08009819
 800a18c:	080094f5 	.word	0x080094f5
 800a190:	08009731 	.word	0x08009731

0800a194 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800a194:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800a198:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800a19a:	69da      	ldr	r2, [r3, #28]
{
 800a19c:	b470      	push	{r4, r5, r6}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800a19e:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800a1a2:	f8b0 6062 	ldrh.w	r6, [r0, #98]	; 0x62
 800a1a6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800a1aa:	fb01 f104 	mul.w	r1, r1, r4
  pHandle->ADCRegularLocked=true;
 800a1ae:	2501      	movs	r5, #1
 800a1b0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800a1b4:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800a1b8:	0c09      	lsrs	r1, r1, #16
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 800a1ba:	f8b0 5064 	ldrh.w	r5, [r0, #100]	; 0x64
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800a1be:	8741      	strh	r1, [r0, #58]	; 0x3a
 800a1c0:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800a1c4:	1ba4      	subs	r4, r4, r6
 800a1c6:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a1c8:	641c      	str	r4, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a1ca:	63dd      	str	r5, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a1cc:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a1ce:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800a1d0:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
 800a1d4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800a1d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a1dc:	f042 0270 	orr.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 800a1e0:	2403      	movs	r4, #3
 800a1e2:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800a1e4:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 800a1e6:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800a1ea:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800a1ec:	d007      	beq.n	800a1fe <R3_2_RLDetectionModeSetDuty+0x6a>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800a1ee:	4a07      	ldr	r2, [pc, #28]	; (800a20c <R3_2_RLDetectionModeSetDuty+0x78>)
 800a1f0:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 800a1f2:	bf14      	ite	ne
 800a1f4:	2101      	movne	r1, #1
 800a1f6:	2100      	moveq	r1, #0
}
 800a1f8:	4608      	mov	r0, r1
 800a1fa:	bc70      	pop	{r4, r5, r6}
 800a1fc:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 800a1fe:	2300      	movs	r3, #0
 800a200:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800a204:	bc70      	pop	{r4, r5, r6}
 800a206:	4608      	mov	r0, r1
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	02000070 	.word	0x02000070

0800a210 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 800a210:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800a212:	8b82      	ldrh	r2, [r0, #28]
 800a214:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800a216:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800a218:	4414      	add	r4, r2
 800a21a:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800a21c:	b14b      	cbz	r3, 800a232 <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 800a21e:	6a05      	ldr	r5, [r0, #32]
 800a220:	2300      	movs	r3, #0
 800a222:	b29a      	uxth	r2, r3
 800a224:	3301      	adds	r3, #1
 800a226:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800a22a:	8b01      	ldrh	r1, [r0, #24]
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	4291      	cmp	r1, r2
 800a230:	d8f7      	bhi.n	800a222 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 800a232:	2300      	movs	r3, #0
 800a234:	f364 030f 	bfi	r3, r4, #0, #16
 800a238:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 800a23c:	2200      	movs	r2, #0
}
 800a23e:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 800a240:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 800a242:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 800a246:	4770      	bx	lr

0800a248 <RVBS_Init>:
{
 800a248:	b510      	push	{r4, lr}
 800a24a:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800a24c:	300c      	adds	r0, #12
 800a24e:	f7f9 fef3 	bl	8004038 <RCM_RegisterRegConv>
 800a252:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 800a256:	4620      	mov	r0, r4
 800a258:	f7ff ffda 	bl	800a210 <RVBS_Clear>
}
 800a25c:	bd10      	pop	{r4, pc}
 800a25e:	bf00      	nop

0800a260 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800a260:	88c3      	ldrh	r3, [r0, #6]
 800a262:	8b42      	ldrh	r2, [r0, #26]
 800a264:	429a      	cmp	r2, r3
 800a266:	d305      	bcc.n	800a274 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800a268:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 800a26a:	4298      	cmp	r0, r3
 800a26c:	bf8c      	ite	hi
 800a26e:	2004      	movhi	r0, #4
 800a270:	2000      	movls	r0, #0
 800a272:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 800a274:	2002      	movs	r0, #2
  }
  return fault;
}
 800a276:	4770      	bx	lr

0800a278 <RVBS_CalcAvVbus>:
{
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800a27c:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800a280:	f7f9 ffae 	bl	80041e0 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 800a284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a288:	4298      	cmp	r0, r3
 800a28a:	d01c      	beq.n	800a2c6 <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 800a28c:	6a2f      	ldr	r7, [r5, #32]
 800a28e:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800a292:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800a296:	8b2e      	ldrh	r6, [r5, #24]
 800a298:	b1d6      	cbz	r6, 800a2d0 <RVBS_CalcAvVbus+0x58>
 800a29a:	2300      	movs	r3, #0
    wtemp = 0;
 800a29c:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 800a29e:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	b2d9      	uxtb	r1, r3
 800a2a6:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 800a2a8:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	d3f7      	bcc.n	800a29e <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 800a2ae:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800a2b2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800a2b6:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800a2b8:	3e01      	subs	r6, #1
 800a2ba:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 800a2bc:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800a2be:	da09      	bge.n	800a2d4 <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	f7ff ffca 	bl	800a260 <RVBS_CheckFaultState>
 800a2cc:	8128      	strh	r0, [r5, #8]
}
 800a2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800a2d0:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 800a2d2:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f7ff ffc0 	bl	800a260 <RVBS_CheckFaultState>
 800a2e0:	8128      	strh	r0, [r5, #8]
}
 800a2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2e4 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 800a2e4:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800a2e6:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 800a2e8:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 800a2ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 800a2f0:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800a2f2:	4770      	bx	lr

0800a2f4 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 800a2f4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop

0800a2fc <SPD_GetMecAngle>:
  * @retval int16_t rotor mechanical angle (s16degrees)
  */
__weak int32_t SPD_GetMecAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->wMecAngle );
}
 800a2fc:	6880      	ldr	r0, [r0, #8]
 800a2fe:	4770      	bx	lr

0800a300 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 800a300:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop

0800a308 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 800a308:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop

0800a310 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800a310:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800a314:	8a81      	ldrh	r1, [r0, #20]
{
 800a316:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 800a318:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 800a31a:	bfb8      	it	lt
 800a31c:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800a31e:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800a320:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800a322:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 800a324:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800a326:	429d      	cmp	r5, r3
 800a328:	d817      	bhi.n	800a35a <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800a32a:	4299      	cmp	r1, r3
 800a32c:	bf2c      	ite	cs
 800a32e:	2300      	movcs	r3, #0
 800a330:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800a332:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800a336:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 800a338:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 800a33a:	bfb8      	it	lt
 800a33c:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800a33e:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800a340:	428d      	cmp	r5, r1
 800a342:	d300      	bcc.n	800a346 <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 800a344:	b15b      	cbz	r3, 800a35e <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800a346:	4294      	cmp	r4, r2
 800a348:	d901      	bls.n	800a34e <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 800a34a:	3201      	adds	r2, #1
 800a34c:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800a34e:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 800a350:	1b10      	subs	r0, r2, r4
 800a352:	bf18      	it	ne
 800a354:	2001      	movne	r0, #1
 800a356:	bc30      	pop	{r4, r5}
 800a358:	4770      	bx	lr
    SpeedError = true;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e7e9      	b.n	800a332 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 800a35e:	4294      	cmp	r4, r2
 800a360:	bf88      	it	hi
 800a362:	2200      	movhi	r2, #0
 800a364:	e7f3      	b.n	800a34e <SPD_IsMecSpeedReliable+0x3e>
 800a366:	bf00      	nop

0800a368 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 800a368:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800a36c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 800a370:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800a374:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 800a378:	b200      	sxth	r0, r0
 800a37a:	4770      	bx	lr

0800a37c <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800a37c:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800a37e:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800a382:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 800a386:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 800a38a:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800a38c:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800a38e:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 800a390:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800a392:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 800a396:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 800a398:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 800a39a:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 800a39c:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 800a39e:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800a3a0:	6183      	str	r3, [r0, #24]
}
 800a3a2:	4770      	bx	lr

0800a3a4 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 800a3a4:	6141      	str	r1, [r0, #20]
}
 800a3a6:	4770      	bx	lr

0800a3a8 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 800a3a8:	6940      	ldr	r0, [r0, #20]
 800a3aa:	4770      	bx	lr

0800a3ac <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800a3ac:	7803      	ldrb	r3, [r0, #0]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d000      	beq.n	800a3b4 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 800a3b2:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 800a3b4:	6900      	ldr	r0, [r0, #16]
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	f7fe bf1e 	b.w	80091f8 <PID_SetIntegralTerm>

0800a3bc <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800a3bc:	6840      	ldr	r0, [r0, #4]
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	bfbc      	itt	lt
 800a3c2:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800a3c6:	30ff      	addlt	r0, #255	; 0xff
}
 800a3c8:	1400      	asrs	r0, r0, #16
 800a3ca:	4770      	bx	lr

0800a3cc <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800a3cc:	6880      	ldr	r0, [r0, #8]
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	bfbc      	itt	lt
 800a3d2:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800a3d6:	30ff      	addlt	r0, #255	; 0xff
}
 800a3d8:	1400      	asrs	r0, r0, #16
 800a3da:	4770      	bx	lr

0800a3dc <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800a3dc:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800a3de:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800a3e0:	60c3      	str	r3, [r0, #12]
}
 800a3e2:	4770      	bx	lr

0800a3e4 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800a3e6:	7806      	ldrb	r6, [r0, #0]
{
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	460d      	mov	r5, r1
 800a3ec:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800a3ee:	b326      	cbz	r6, 800a43a <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800a3f0:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800a3f2:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	bfbc      	itt	lt
 800a3f8:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800a3fc:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800a3fe:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800a400:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800a404:	dd01      	ble.n	800a40a <STC_ExecRamp+0x26>
      AllowedRange = false;
 800a406:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 800a408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800a40a:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 800a40e:	42a9      	cmp	r1, r5
 800a410:	dcf9      	bgt.n	800a406 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800a412:	8c23      	ldrh	r3, [r4, #32]
 800a414:	429d      	cmp	r5, r3
 800a416:	da03      	bge.n	800a420 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800a418:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800a41c:	42ab      	cmp	r3, r5
 800a41e:	dbf2      	blt.n	800a406 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 800a420:	b9af      	cbnz	r7, 800a44e <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 800a422:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800a424:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 800a426:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 800a428:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800a42c:	bf0c      	ite	eq
 800a42e:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800a430:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 800a432:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 800a434:	61a3      	str	r3, [r4, #24]
 800a436:	2001      	movs	r0, #1
}
 800a438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800a43a:	f7ff ffc7 	bl	800a3cc <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800a43e:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 800a440:	42b5      	cmp	r5, r6
 800a442:	dce0      	bgt.n	800a406 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800a444:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800a448:	42ab      	cmp	r3, r5
 800a44a:	dcdc      	bgt.n	800a406 <STC_ExecRamp+0x22>
 800a44c:	e7e8      	b.n	800a420 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800a44e:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 800a450:	4a07      	ldr	r2, [pc, #28]	; (800a470 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 800a452:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800a454:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 800a458:	fba2 2303 	umull	r2, r3, r2, r3
 800a45c:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800a45e:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800a460:	1a2d      	subs	r5, r5, r0
 800a462:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 800a464:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800a466:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 800a46a:	2001      	movs	r0, #1
 800a46c:	61a5      	str	r5, [r4, #24]
}
 800a46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a470:	10624dd3 	.word	0x10624dd3

0800a474 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 800a474:	2300      	movs	r3, #0
 800a476:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 800a478:	6183      	str	r3, [r0, #24]
}
 800a47a:	4770      	bx	lr

0800a47c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800a47c:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800a47e:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800a482:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800a484:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 800a486:	2a00      	cmp	r2, #0
 800a488:	bf08      	it	eq
 800a48a:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 800a48c:	2b01      	cmp	r3, #1
{
 800a48e:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 800a490:	d90c      	bls.n	800a4ac <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800a492:	6981      	ldr	r1, [r0, #24]
 800a494:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800a496:	3b01      	subs	r3, #1
 800a498:	2e00      	cmp	r6, #0
 800a49a:	60c3      	str	r3, [r0, #12]
 800a49c:	4630      	mov	r0, r6
 800a49e:	db09      	blt.n	800a4b4 <STC_CalcTorqueReference+0x38>
 800a4a0:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800a4a2:	2a01      	cmp	r2, #1
 800a4a4:	d00a      	beq.n	800a4bc <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800a4a6:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800a4a8:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 800a4ac:	d012      	beq.n	800a4d4 <STC_CalcTorqueReference+0x58>
 800a4ae:	2e00      	cmp	r6, #0
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	daf5      	bge.n	800a4a0 <STC_CalcTorqueReference+0x24>
 800a4b4:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 800a4b8:	30ff      	adds	r0, #255	; 0xff
 800a4ba:	e7f1      	b.n	800a4a0 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800a4bc:	6960      	ldr	r0, [r4, #20]
 800a4be:	f7ff ff1f 	bl	800a300 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 800a4c2:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800a4c4:	b201      	sxth	r1, r0
 800a4c6:	6920      	ldr	r0, [r4, #16]
 800a4c8:	f7fe fec8 	bl	800925c <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800a4cc:	0403      	lsls	r3, r0, #16
 800a4ce:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800a4d4:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800a4d8:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800a4da:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 800a4dc:	60c3      	str	r3, [r0, #12]
 800a4de:	e7e0      	b.n	800a4a2 <STC_CalcTorqueReference+0x26>

0800a4e0 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 800a4e0:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop

0800a4e8 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800a4e8:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	b299      	uxth	r1, r3
 800a4f0:	f361 020f 	bfi	r2, r1, #0, #16
 800a4f4:	0c1b      	lsrs	r3, r3, #16
 800a4f6:	f363 421f 	bfi	r2, r3, #16, #16
{
 800a4fa:	b082      	sub	sp, #8
}
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	b002      	add	sp, #8
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop

0800a504 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800a504:	b510      	push	{r4, lr}
 800a506:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800a508:	6940      	ldr	r0, [r0, #20]
 800a50a:	f7ff fef9 	bl	800a300 <SPD_GetAvrgMecSpeedUnit>
 800a50e:	0400      	lsls	r0, r0, #16
 800a510:	6060      	str	r0, [r4, #4]
}
 800a512:	bd10      	pop	{r4, pc}

0800a514 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 800a514:	2300      	movs	r3, #0
 800a516:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800a518:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop

0800a520 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800a520:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800a522:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800a524:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 800a526:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800a528:	430b      	orrs	r3, r1
 800a52a:	ea23 0202 	bic.w	r2, r3, r2
 800a52e:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 800a530:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 800a532:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800a534:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800a536:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 800a538:	d008      	beq.n	800a54c <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800a53a:	b912      	cbnz	r2, 800a542 <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 800a53c:	4620      	mov	r0, r4
 800a53e:	bc30      	pop	{r4, r5}
 800a540:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 800a542:	240a      	movs	r4, #10
 800a544:	7004      	strb	r4, [r0, #0]
}
 800a546:	4620      	mov	r0, r4
 800a548:	bc30      	pop	{r4, r5}
 800a54a:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800a54c:	2a00      	cmp	r2, #0
 800a54e:	d1f5      	bne.n	800a53c <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 800a550:	240b      	movs	r4, #11
 800a552:	7004      	strb	r4, [r0, #0]
}
 800a554:	4620      	mov	r0, r4
 800a556:	bc30      	pop	{r4, r5}
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop

0800a55c <STM_NextState>:
{
 800a55c:	b508      	push	{r3, lr}
 800a55e:	7803      	ldrb	r3, [r0, #0]
 800a560:	2b14      	cmp	r3, #20
 800a562:	d810      	bhi.n	800a586 <STM_NextState+0x2a>
 800a564:	e8df f003 	tbb	[pc, r3]
 800a568:	240d545e 	.word	0x240d545e
 800a56c:	390d352e 	.word	0x390d352e
 800a570:	0f0f3f3c 	.word	0x0f0f3f3c
 800a574:	47650b44 	.word	0x47650b44
 800a578:	504d1b4a 	.word	0x504d1b4a
 800a57c:	5b          	.byte	0x5b
 800a57d:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800a57e:	290e      	cmp	r1, #14
 800a580:	d013      	beq.n	800a5aa <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 800a582:	2907      	cmp	r1, #7
 800a584:	d011      	beq.n	800a5aa <STM_NextState+0x4e>
 800a586:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d018      	beq.n	800a5c0 <STM_NextState+0x64>
 800a58e:	2907      	cmp	r1, #7
 800a590:	d016      	beq.n	800a5c0 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800a592:	2200      	movs	r2, #0
 800a594:	2180      	movs	r1, #128	; 0x80
 800a596:	f7ff ffc3 	bl	800a520 <STM_FaultProcessing>
 800a59a:	2000      	movs	r0, #0
}
 800a59c:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800a59e:	2914      	cmp	r1, #20
 800a5a0:	d8f1      	bhi.n	800a586 <STM_NextState+0x2a>
 800a5a2:	4b26      	ldr	r3, [pc, #152]	; (800a63c <STM_NextState+0xe0>)
 800a5a4:	40cb      	lsrs	r3, r1
 800a5a6:	07db      	lsls	r3, r3, #31
 800a5a8:	d5ed      	bpl.n	800a586 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 800a5aa:	7001      	strb	r1, [r0, #0]
 800a5ac:	2001      	movs	r0, #1
}
 800a5ae:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800a5b0:	2911      	cmp	r1, #17
 800a5b2:	d8ee      	bhi.n	800a592 <STM_NextState+0x36>
 800a5b4:	4b22      	ldr	r3, [pc, #136]	; (800a640 <STM_NextState+0xe4>)
 800a5b6:	40cb      	lsrs	r3, r1
 800a5b8:	07da      	lsls	r2, r3, #31
 800a5ba:	d4f6      	bmi.n	800a5aa <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800a5bc:	2903      	cmp	r1, #3
 800a5be:	d1e8      	bne.n	800a592 <STM_NextState+0x36>
 800a5c0:	2000      	movs	r0, #0
}
 800a5c2:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800a5c4:	2913      	cmp	r1, #19
 800a5c6:	d0f0      	beq.n	800a5aa <STM_NextState+0x4e>
 800a5c8:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800a5cc:	2b05      	cmp	r3, #5
 800a5ce:	d1dc      	bne.n	800a58a <STM_NextState+0x2e>
 800a5d0:	e7eb      	b.n	800a5aa <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800a5d2:	1f8b      	subs	r3, r1, #6
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d8d6      	bhi.n	800a586 <STM_NextState+0x2a>
 800a5d8:	e7e7      	b.n	800a5aa <STM_NextState+0x4e>
      if ( bState == STOP )
 800a5da:	2908      	cmp	r1, #8
 800a5dc:	d1d3      	bne.n	800a586 <STM_NextState+0x2a>
 800a5de:	e7e4      	b.n	800a5aa <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 800a5e0:	2909      	cmp	r1, #9
 800a5e2:	d1d0      	bne.n	800a586 <STM_NextState+0x2a>
 800a5e4:	e7e1      	b.n	800a5aa <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800a5e6:	2900      	cmp	r1, #0
 800a5e8:	d0df      	beq.n	800a5aa <STM_NextState+0x4e>
 800a5ea:	290c      	cmp	r1, #12
 800a5ec:	d1cb      	bne.n	800a586 <STM_NextState+0x2a>
 800a5ee:	e7dc      	b.n	800a5aa <STM_NextState+0x4e>
      if ( bState == IDLE )
 800a5f0:	2900      	cmp	r1, #0
 800a5f2:	d0da      	beq.n	800a5aa <STM_NextState+0x4e>
 800a5f4:	e7c7      	b.n	800a586 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800a5f6:	2902      	cmp	r1, #2
 800a5f8:	d1c3      	bne.n	800a582 <STM_NextState+0x26>
 800a5fa:	e7d6      	b.n	800a5aa <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800a5fc:	2911      	cmp	r1, #17
 800a5fe:	d1c0      	bne.n	800a582 <STM_NextState+0x26>
 800a600:	e7d3      	b.n	800a5aa <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800a602:	2904      	cmp	r1, #4
 800a604:	d1bd      	bne.n	800a582 <STM_NextState+0x26>
 800a606:	e7d0      	b.n	800a5aa <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800a608:	1f0b      	subs	r3, r1, #4
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d8b9      	bhi.n	800a582 <STM_NextState+0x26>
 800a60e:	e7cc      	b.n	800a5aa <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800a610:	2907      	cmp	r1, #7
 800a612:	d0ca      	beq.n	800a5aa <STM_NextState+0x4e>
 800a614:	f1a1 030d 	sub.w	r3, r1, #13
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d8b4      	bhi.n	800a586 <STM_NextState+0x2a>
 800a61c:	e7c5      	b.n	800a5aa <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800a61e:	2912      	cmp	r1, #18
 800a620:	d1af      	bne.n	800a582 <STM_NextState+0x26>
 800a622:	e7c2      	b.n	800a5aa <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800a624:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d0be      	beq.n	800a5aa <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 800a62c:	290c      	cmp	r1, #12
 800a62e:	d1ae      	bne.n	800a58e <STM_NextState+0x32>
 800a630:	e7bb      	b.n	800a5aa <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800a632:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 800a636:	2b07      	cmp	r3, #7
 800a638:	d1a5      	bne.n	800a586 <STM_NextState+0x2a>
 800a63a:	e7b6      	b.n	800a5aa <STM_NextState+0x4e>
 800a63c:	00140080 	.word	0x00140080
 800a640:	00030092 	.word	0x00030092

0800a644 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 800a644:	7800      	ldrb	r0, [r0, #0]
 800a646:	4770      	bx	lr

0800a648 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 800a648:	7803      	ldrb	r3, [r0, #0]
 800a64a:	2b0b      	cmp	r3, #11
 800a64c:	d001      	beq.n	800a652 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 800a64e:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 800a650:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 800a652:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800a654:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 800a656:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800a658:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800a65a:	2001      	movs	r0, #1
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop

0800a660 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800a660:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800a662:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 800a664:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop

0800a66c <TC_Init>:
  * @param  pSTC pointer on the handler of the current instance of the SpeednTorqCtrl component.
  * @param  pENC handler of the current instance of the EncAlignCtrl component.
  * @retval none
  */
void TC_Init(PosCtrl_Handle_t *pHandle, PID_Handle_t * pPIDPosReg, SpeednTorqCtrl_Handle_t * pSTC, ENCODER_Handle_t * pENC)
{
 800a66c:	b430      	push	{r4, r5}

  pHandle->MovementDuration = 0.0f;
 800a66e:	2400      	movs	r4, #0
  pHandle->Omega = 0.0f;
  pHandle->OmegaPrev = 0.0f;
  pHandle->Theta = 0.0f;
  pHandle->ThetaPrev = 0.0f;
  pHandle->ReceivedTh = 0.0f;
  pHandle->TcTick = 0;
 800a670:	2500      	movs	r5, #0
  pHandle->MovementDuration = 0.0f;
 800a672:	6004      	str	r4, [r0, #0]
  pHandle->AngleStep = 0.0f;
 800a674:	60c4      	str	r4, [r0, #12]
  pHandle->SubStep[0] = 0.0f;
 800a676:	6104      	str	r4, [r0, #16]
  pHandle->SubStep[1] = 0.0f;
 800a678:	6144      	str	r4, [r0, #20]
  pHandle->SubStep[2] = 0.0f;
 800a67a:	6184      	str	r4, [r0, #24]
  pHandle->SubStep[3] = 0.0f;
 800a67c:	61c4      	str	r4, [r0, #28]
  pHandle->SubStep[4] = 0.0f;
 800a67e:	6204      	str	r4, [r0, #32]
  pHandle->SubStep[5] = 0.0f;
 800a680:	6244      	str	r4, [r0, #36]	; 0x24
  pHandle->SubStepDuration = 0;
 800a682:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->ElapseTime = 0.0f;
 800a684:	62c4      	str	r4, [r0, #44]	; 0x2c
  pHandle->Jerk = 0.0f;
 800a686:	6344      	str	r4, [r0, #52]	; 0x34
  pHandle->CruiseSpeed = 0.0f;
 800a688:	6384      	str	r4, [r0, #56]	; 0x38
  pHandle->Acceleration = 0.0f;
 800a68a:	63c4      	str	r4, [r0, #60]	; 0x3c
  pHandle->Omega = 0.0f;
 800a68c:	6404      	str	r4, [r0, #64]	; 0x40
  pHandle->OmegaPrev = 0.0f;
 800a68e:	6444      	str	r4, [r0, #68]	; 0x44
  pHandle->Theta = 0.0f;
 800a690:	6484      	str	r4, [r0, #72]	; 0x48
  pHandle->ThetaPrev = 0.0f;
 800a692:	64c4      	str	r4, [r0, #76]	; 0x4c
  pHandle->TcTick = 0;
 800a694:	6585      	str	r5, [r0, #88]	; 0x58
  pHandle->ReceivedTh = 0.0f;
 800a696:	f8a0 5050 	strh.w	r5, [r0, #80]	; 0x50

  pHandle->PositionControlRegulation = DISABLE;
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800a69a:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60

  pHandle->pENC = pENC;
  pHandle->pSTC = pSTC;
  pHandle->PIDPosRegulator = pPIDPosReg;

  pHandle->MecAngleOffset = 0;
 800a69e:	f8a0 5054 	strh.w	r5, [r0, #84]	; 0x54
  pHandle->pSTC = pSTC;
 800a6a2:	e9c0 211a 	strd	r2, r1, [r0, #104]	; 0x68
}
 800a6a6:	bc30      	pop	{r4, r5}
  pHandle->pENC = pENC;
 800a6a8:	6643      	str	r3, [r0, #100]	; 0x64
}
 800a6aa:	4770      	bx	lr

0800a6ac <TC_MoveCommand>:
  * @param  movementDuration Duration to reach the final position.
  * @retval true  = Trajectory command programmed
  *         false = Not ready for a new trajectory configuration.
  */
bool TC_MoveCommand(PosCtrl_Handle_t *pHandle, float startingAngle, float angleStep, float movementDuration)
{
 800a6ac:	4603      	mov	r3, r0

  bool RetConfigStatus = false;
  float fMinimumStepDuration;

  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 800a6ae:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 800a6b2:	2803      	cmp	r0, #3
 800a6b4:	d061      	beq.n	800a77a <TC_MoveCommand+0xce>
  {
	  // Back to Move command as the movement duration is different from 0
	  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
  }

  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 800a6b6:	b108      	cbz	r0, 800a6bc <TC_MoveCommand+0x10>
  bool RetConfigStatus = false;
 800a6b8:	2000      	movs	r0, #0

    RetConfigStatus = true;

  }
  return (RetConfigStatus);
}
 800a6ba:	4770      	bx	lr
  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 800a6bc:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800a6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c4:	ddf9      	ble.n	800a6ba <TC_MoveCommand+0xe>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800a6c6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800a6ca:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800a788 <TC_MoveCommand+0xdc>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a6ce:	ed9f 4a2f 	vldr	s8, [pc, #188]	; 800a78c <TC_MoveCommand+0xe0>
    pHandle->StartingAngle = startingAngle;
 800a6d2:	ed83 0a01 	vstr	s0, [r3, #4]
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800a6d6:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800a6da:	ee67 6a26 	vmul.f32	s13, s14, s13
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a6de:	ee20 4a84 	vmul.f32	s8, s1, s8
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a6e2:	ee81 7a26 	vdiv.f32	s14, s2, s13
    pHandle->ElapseTime = 0.0f;
 800a6e6:	2200      	movs	r2, #0
    pHandle->PositionControlRegulation = ENABLE;
 800a6e8:	2001      	movs	r0, #1
 800a6ea:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 800a6ee:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    pHandle->ElapseTime = 0.0f;
 800a6f2:	62da      	str	r2, [r3, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 800a6f4:	641a      	str	r2, [r3, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 800a6f6:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800a6f8:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a6fc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800a700:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800a708:	eef1 5a0c 	vmov.f32	s11, #28	; 0x40e00000  7.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a70c:	ee27 7a26 	vmul.f32	s14, s14, s13
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800a710:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800a714:	ee67 7a27 	vmul.f32	s15, s14, s15
    pHandle->FinalAngle = startingAngle + angleStep;
 800a718:	ee70 2a20 	vadd.f32	s5, s0, s1
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a71c:	ee67 6aa7 	vmul.f32	s13, s15, s15
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800a720:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a724:	ee26 2aa7 	vmul.f32	s4, s13, s15
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800a728:	ee76 6aa6 	vadd.f32	s13, s13, s13
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a72c:	eec4 3a02 	vdiv.f32	s7, s8, s4
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800a730:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800a734:	ee66 6aa3 	vmul.f32	s13, s13, s7
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800a738:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800a73c:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800a740:	ee27 6a86 	vmul.f32	s12, s15, s12
    pHandle->AngleStep = angleStep;
 800a744:	edc3 0a03 	vstr	s1, [r3, #12]
    pHandle->Theta = startingAngle;
 800a748:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    pHandle->FinalAngle = startingAngle + angleStep;
 800a74c:	edc3 2a02 	vstr	s5, [r3, #8]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800a750:	ed83 7a00 	vstr	s14, [r3]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800a754:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 800a758:	edc3 7a04 	vstr	s15, [r3, #16]
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800a75c:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800a760:	edc3 3a0d 	vstr	s7, [r3, #52]	; 0x34
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800a764:	ed83 3a05 	vstr	s6, [r3, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800a768:	edc3 4a06 	vstr	s9, [r3, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800a76c:	ed83 5a07 	vstr	s10, [r3, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800a770:	edc3 5a08 	vstr	s11, [r3, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800a774:	ed83 6a09 	vstr	s12, [r3, #36]	; 0x24
  return (RetConfigStatus);
 800a778:	4770      	bx	lr
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 800a77a:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800a77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a782:	dca0      	bgt.n	800a6c6 <TC_MoveCommand+0x1a>
 800a784:	e798      	b.n	800a6b8 <TC_MoveCommand+0xc>
 800a786:	bf00      	nop
 800a788:	3de38e39 	.word	0x3de38e39
 800a78c:	3daaaaab 	.word	0x3daaaaab

0800a790 <TC_FollowCommand>:
void TC_FollowCommand(PosCtrl_Handle_t *pHandle, float Angle)
{
  float omega = 0, acceleration = 0, dt = 0;
  
  // Estimate speed
  if (pHandle->ReceivedTh > 0) 
 800a790:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800a794:	b9b3      	cbnz	r3, 800a7c4 <TC_FollowCommand+0x34>
  float omega = 0, acceleration = 0, dt = 0;
 800a796:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a818 <TC_FollowCommand+0x88>
 800a79a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a818 <TC_FollowCommand+0x88>
      acceleration = (omega - pHandle->OmegaPrev) / dt;
    }
  }
  
  // Update state variable
  pHandle->ThetaPrev  = Angle;
 800a79e:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
  if (pHandle->ReceivedTh < 2)
  {
    pHandle->ReceivedTh++;
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->OmegaPrev = omega;
 800a7a8:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
  pHandle->Acceleration = acceleration;
  pHandle->Omega = omega;
  pHandle->Theta = Angle;
  
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
  pHandle->MovementDuration = 0;
 800a7ac:	2200      	movs	r2, #0
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 800a7ae:	2303      	movs	r3, #3
  pHandle->Acceleration = acceleration;
 800a7b0:	edc0 6a0f 	vstr	s13, [r0, #60]	; 0x3c
  pHandle->Omega = omega;
 800a7b4:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
  pHandle->Theta = Angle;
 800a7b8:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
  pHandle->MovementDuration = 0;
 800a7bc:	6002      	str	r2, [r0, #0]
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 800a7be:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  return;
}
 800a7c2:	4770      	bx	lr
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800a7c4:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
 800a7c8:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
 800a7cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pHandle->TcTick = 0;
 800a7d0:	2200      	movs	r2, #0
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800a7d2:	ee67 7a87 	vmul.f32	s15, s15, s14
    pHandle->TcTick = 0;
 800a7d6:	6582      	str	r2, [r0, #88]	; 0x58
    if (dt > 0)
 800a7d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e0:	dd12      	ble.n	800a808 <TC_FollowCommand+0x78>
      omega = (Angle - pHandle->ThetaPrev) / dt;
 800a7e2:	edd0 6a13 	vldr	s13, [r0, #76]	; 0x4c
 800a7e6:	ee70 6a66 	vsub.f32	s13, s0, s13
  if (pHandle->ReceivedTh > 1) {
 800a7ea:	2b01      	cmp	r3, #1
      omega = (Angle - pHandle->ThetaPrev) / dt;
 800a7ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  if (pHandle->ReceivedTh > 1) {
 800a7f0:	d9d3      	bls.n	800a79a <TC_FollowCommand+0xa>
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 800a7f2:	ed90 6a11 	vldr	s12, [r0, #68]	; 0x44
 800a7f6:	ee37 6a46 	vsub.f32	s12, s14, s12
 800a7fa:	eec6 6a27 	vdiv.f32	s13, s12, s15
  pHandle->ThetaPrev  = Angle;
 800a7fe:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
 800a802:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
  if (pHandle->ReceivedTh < 2)
 800a806:	e7d1      	b.n	800a7ac <TC_FollowCommand+0x1c>
  if (pHandle->ReceivedTh > 1) {
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d9c4      	bls.n	800a796 <TC_FollowCommand+0x6>
  float omega = 0, acceleration = 0, dt = 0;
 800a80c:	ed9f 7a02 	vldr	s14, [pc, #8]	; 800a818 <TC_FollowCommand+0x88>
 800a810:	eef0 6a47 	vmov.f32	s13, s14
 800a814:	e7f3      	b.n	800a7fe <TC_FollowCommand+0x6e>
 800a816:	bf00      	nop
 800a818:	00000000 	.word	0x00000000

0800a81c <TC_MoveExecution>:
void TC_MoveExecution(PosCtrl_Handle_t *pHandle)
{

  float jerkApplied = 0;

  if (pHandle->ElapseTime < pHandle->SubStep[0])              // 1st Sub-Step interval time of acceleration phase
 800a81c:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 800a820:	ed90 7a04 	vldr	s14, [r0, #16]
 800a824:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a82c:	d537      	bpl.n	800a89e <TC_MoveExecution+0x82>
  {
    jerkApplied = pHandle->Jerk;
 800a82e:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 800a832:	edd0 6a00 	vldr	s13, [r0]
  {
    pHandle->Theta = pHandle->FinalAngle;
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
  }

  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 800a836:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
  {
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 800a83a:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d115      	bne.n	800a86e <TC_MoveExecution+0x52>
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 800a842:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800a846:	edd0 5a10 	vldr	s11, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800a84a:	edd0 4a12 	vldr	s9, [r0, #72]	; 0x48
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 800a84e:	eea7 5a06 	vfma.f32	s10, s14, s12
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800a852:	eeb0 6a65 	vmov.f32	s12, s11
 800a856:	eea7 6a05 	vfma.f32	s12, s14, s10
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800a85a:	eef0 5a64 	vmov.f32	s11, s9
 800a85e:	eee7 5a06 	vfma.f32	s11, s14, s12
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 800a862:	ed80 5a0f 	vstr	s10, [r0, #60]	; 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800a866:	ed80 6a10 	vstr	s12, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800a86a:	edc0 5a12 	vstr	s11, [r0, #72]	; 0x48
  }

  pHandle->ElapseTime += pHandle->SamplingTime;
 800a86e:	ee77 7a87 	vadd.f32	s15, s15, s14
bool TC_RampCompleted(PosCtrl_Handle_t *pHandle)
{
  bool retVal = false;

  // Check that entire sequence (Acceleration - Cruise - Deceleration) is completed.
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800a872:	ee37 7a26 	vadd.f32	s14, s14, s13
  pHandle->ElapseTime += pHandle->SamplingTime;
 800a876:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800a87a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a882:	dd0b      	ble.n	800a89c <TC_MoveExecution+0x80>
    if (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START) {
 800a884:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 800a888:	2b01      	cmp	r3, #1
      pHandle->AlignmentStatus = TC_ALIGNMENT_ERROR;
 800a88a:	bf04      	itt	eq
 800a88c:	2305      	moveq	r3, #5
 800a88e:	f880 3062 	strbeq.w	r3, [r0, #98]	; 0x62
    pHandle->ElapseTime = 0;
 800a892:	2200      	movs	r2, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800a894:	2300      	movs	r3, #0
    pHandle->ElapseTime = 0;
 800a896:	62c2      	str	r2, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800a898:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 800a89c:	4770      	bx	lr
  else if (pHandle->ElapseTime < pHandle->SubStep[1])         // 2nd Sub-Step interval time of acceleration phase
 800a89e:	ed90 7a05 	vldr	s14, [r0, #20]
 800a8a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8aa:	d504      	bpl.n	800a8b6 <TC_MoveExecution+0x9a>
 800a8ac:	edd0 6a00 	vldr	s13, [r0]
  float jerkApplied = 0;
 800a8b0:	ed9f 6a20 	vldr	s12, [pc, #128]	; 800a934 <TC_MoveExecution+0x118>
 800a8b4:	e7bf      	b.n	800a836 <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[2])         // 3rd Sub-Step interval time of acceleration phase
 800a8b6:	ed90 7a06 	vldr	s14, [r0, #24]
 800a8ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c2:	d416      	bmi.n	800a8f2 <TC_MoveExecution+0xd6>
  else if (pHandle->ElapseTime < pHandle->SubStep[3])         // Speed Cruise phase (after acceleration and before deceleration phases)
 800a8c4:	ed90 7a07 	vldr	s14, [r0, #28]
 800a8c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d0:	d508      	bpl.n	800a8e4 <TC_MoveExecution+0xc8>
    pHandle->Acceleration = 0.0f;
 800a8d2:	ed9f 6a18 	vldr	s12, [pc, #96]	; 800a934 <TC_MoveExecution+0x118>
    pHandle->Omega = pHandle->CruiseSpeed;
 800a8d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a8d8:	edd0 6a00 	vldr	s13, [r0]
    pHandle->Acceleration = 0.0f;
 800a8dc:	ed80 6a0f 	vstr	s12, [r0, #60]	; 0x3c
    pHandle->Omega = pHandle->CruiseSpeed;
 800a8e0:	6403      	str	r3, [r0, #64]	; 0x40
 800a8e2:	e7a8      	b.n	800a836 <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[4])         // 1st Sub-Step interval time of deceleration phase
 800a8e4:	ed90 7a08 	vldr	s14, [r0, #32]
 800a8e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f0:	d506      	bpl.n	800a900 <TC_MoveExecution+0xe4>
    jerkApplied = -(pHandle->Jerk);
 800a8f2:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 800a8f6:	edd0 6a00 	vldr	s13, [r0]
 800a8fa:	eeb1 6a46 	vneg.f32	s12, s12
 800a8fe:	e79a      	b.n	800a836 <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[5])         // 2nd Sub-Step interval time of deceleration phase
 800a900:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 800a904:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a90c:	d4ce      	bmi.n	800a8ac <TC_MoveExecution+0x90>
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 800a90e:	edd0 6a00 	vldr	s13, [r0]
 800a912:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a91a:	d502      	bpl.n	800a922 <TC_MoveExecution+0x106>
    jerkApplied = pHandle->Jerk;
 800a91c:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 800a920:	e789      	b.n	800a836 <TC_MoveExecution+0x1a>
    pHandle->Theta = pHandle->FinalAngle;
 800a922:	6883      	ldr	r3, [r0, #8]
 800a924:	6483      	str	r3, [r0, #72]	; 0x48
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 800a926:	2302      	movs	r3, #2
 800a928:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800a92c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 800a930:	e79d      	b.n	800a86e <TC_MoveExecution+0x52>
 800a932:	bf00      	nop
 800a934:	00000000 	.word	0x00000000

0800a938 <TC_PositionRegulation>:
{
 800a938:	b538      	push	{r3, r4, r5, lr}
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 800a93a:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800a93e:	2b01      	cmp	r3, #1
{
 800a940:	4604      	mov	r4, r0
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 800a942:	d034      	beq.n	800a9ae <TC_PositionRegulation+0x76>
  if ( pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING )
 800a944:	2b03      	cmp	r3, #3
 800a946:	d10f      	bne.n	800a968 <TC_PositionRegulation+0x30>
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800a948:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800a94c:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 800a950:	ed94 6a0f 	vldr	s12, [r4, #60]	; 0x3c
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 800a954:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800a958:	eee6 7a26 	vfma.f32	s15, s12, s13
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 800a95c:	eea6 7aa7 	vfma.f32	s14, s13, s15
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800a960:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 800a964:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 800a968:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800a96c:	b903      	cbnz	r3, 800a970 <TC_PositionRegulation+0x38>
}
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 800a970:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800a9b8 <TC_PositionRegulation+0x80>
 800a974:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800a978:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 800a97a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a97e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a982:	ee17 5a90 	vmov	r5, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800a986:	f7ff fd0f 	bl	800a3a8 <STC_GetSpeedSensor>
 800a98a:	f7ff fcb7 	bl	800a2fc <SPD_GetMecAngle>
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 800a98e:	1a29      	subs	r1, r5, r0
 800a990:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a992:	f7fe fca9 	bl	80092e8 <PID_Controller>
    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800a996:	2100      	movs	r1, #0
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 800a998:	4605      	mov	r5, r0
    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800a99a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a99c:	f7ff fd1e 	bl	800a3dc <STC_SetControlMode>
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
 800a9a0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	2200      	movs	r2, #0
}
 800a9a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
 800a9aa:	f7ff bd1b 	b.w	800a3e4 <STC_ExecRamp>
    TC_MoveExecution(pHandle);
 800a9ae:	f7ff ff35 	bl	800a81c <TC_MoveExecution>
 800a9b2:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800a9b6:	e7c5      	b.n	800a944 <TC_PositionRegulation+0xc>
 800a9b8:	4622f983 	.word	0x4622f983

0800a9bc <TC_EncAlignmentCommand>:
{
 800a9bc:	b510      	push	{r4, lr}
  if (pHandle->AlignmentStatus == TC_ALIGNMENT_COMPLETED) {
 800a9be:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 800a9c2:	2b02      	cmp	r3, #2
{
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	4604      	mov	r4, r0
  if (pHandle->AlignmentStatus == TC_ALIGNMENT_COMPLETED) {
 800a9c8:	d010      	beq.n	800a9ec <TC_EncAlignmentCommand+0x30>
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 800a9ca:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d011      	beq.n	800a9f6 <TC_EncAlignmentCommand+0x3a>
      pHandle->pENC->_Super.wMecAngle = 0;
 800a9d2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800a9d4:	2300      	movs	r3, #0
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800a9d6:	2102      	movs	r1, #2
      pHandle->PositionControlRegulation = ENABLE;
 800a9d8:	2201      	movs	r2, #1
      pHandle->pENC->_Super.wMecAngle = 0;
 800a9da:	6083      	str	r3, [r0, #8]
      pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800a9dc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800a9e0:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
      pHandle->PositionControlRegulation = ENABLE;
 800a9e4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 800a9e8:	b002      	add	sp, #8
 800a9ea:	bd10      	pop	{r4, pc}
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 800a9f2:	b002      	add	sp, #8
 800a9f4:	bd10      	pop	{r4, pc}
      pHandle->EncoderAbsoluteAligned = false;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800a9fc:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800a9fe:	f7ff fcd3 	bl	800a3a8 <STC_GetSpeedSensor>
 800aa02:	f7ff fc7b 	bl	800a2fc <SPD_GetMecAngle>
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 800aa06:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800aa0a:	9001      	str	r0, [sp, #4]
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 800aa0c:	2b03      	cmp	r3, #3
 800aa0e:	d005      	beq.n	800aa1c <TC_EncAlignmentCommand+0x60>
  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 800aa10:	b123      	cbz	r3, 800aa1c <TC_EncAlignmentCommand+0x60>
      pHandle->AlignmentStatus = TC_ZERO_ALIGNMENT_START;
 800aa12:	2301      	movs	r3, #1
 800aa14:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 800aa18:	b002      	add	sp, #8
 800aa1a:	bd10      	pop	{r4, pc}
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800aa1c:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800aa20:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800aae4 <TC_EncAlignmentCommand+0x128>
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800aa24:	eddf 7a30 	vldr	s15, [pc, #192]	; 800aae8 <TC_EncAlignmentCommand+0x12c>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800aa28:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800aaec <TC_EncAlignmentCommand+0x130>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800aa2c:	eddf 4a30 	vldr	s9, [pc, #192]	; 800aaf0 <TC_EncAlignmentCommand+0x134>
    pHandle->AngleStep = angleStep;
 800aa30:	eddf 5a30 	vldr	s11, [pc, #192]	; 800aaf4 <TC_EncAlignmentCommand+0x138>
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800aa34:	eec7 6a06 	vdiv.f32	s13, s14, s12
    pHandle->ElapseTime = 0.0f;
 800aa38:	2300      	movs	r3, #0
    pHandle->PositionControlRegulation = ENABLE;
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 800aa40:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    pHandle->ElapseTime = 0.0f;
 800aa44:	62e3      	str	r3, [r4, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 800aa46:	6423      	str	r3, [r4, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 800aa48:	63e3      	str	r3, [r4, #60]	; 0x3c
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800aa4a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800aa4e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800aa52:	ee26 6a07 	vmul.f32	s12, s12, s14
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800aa56:	eef8 6ae6 	vcvt.f32.s32	s13, s13
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800aa5a:	ed9d 7a01 	vldr	s14, [sp, #4]
    pHandle->AngleStep = angleStep;
 800aa5e:	edc4 5a03 	vstr	s11, [r4, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800aa62:	ee66 6a86 	vmul.f32	s13, s13, s12
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800aa66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800aa6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800aa6e:	ee27 7a05 	vmul.f32	s14, s14, s10
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800aa72:	ee27 6aa7 	vmul.f32	s12, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800aa76:	eef0 3a08 	vmov.f32	s7, #8	; 0x40400000  3.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800aa7a:	ee26 5a27 	vmul.f32	s10, s12, s15
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800aa7e:	ee36 6a06 	vadd.f32	s12, s12, s12
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800aa82:	ee84 3a85 	vdiv.f32	s6, s9, s10
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800aa86:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800aa8a:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800aa8e:	eeb2 5a00 	vmov.f32	s10, #32	; 0x41000000  8.0
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800aa92:	ee26 6a03 	vmul.f32	s12, s12, s6
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800aa96:	ee77 2aa7 	vadd.f32	s5, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800aa9a:	ee67 3aa3 	vmul.f32	s7, s15, s7
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800aa9e:	ee27 4a84 	vmul.f32	s8, s15, s8
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800aaa2:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800aaa6:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->FinalAngle = startingAngle + angleStep;
 800aaaa:	ee77 5a25 	vadd.f32	s11, s14, s11
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800aaae:	edc4 6a00 	vstr	s13, [r4]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800aab2:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 800aab6:	edc4 7a04 	vstr	s15, [r4, #16]
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800aaba:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800aabe:	ed84 3a0d 	vstr	s6, [r4, #52]	; 0x34
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800aac2:	edc4 2a05 	vstr	s5, [r4, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800aac6:	edc4 3a06 	vstr	s7, [r4, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800aaca:	ed84 4a07 	vstr	s8, [r4, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800aace:	edc4 4a08 	vstr	s9, [r4, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800aad2:	ed84 5a09 	vstr	s10, [r4, #36]	; 0x24
    pHandle->StartingAngle = startingAngle;
 800aad6:	ed84 7a01 	vstr	s14, [r4, #4]
    pHandle->Theta = startingAngle;
 800aada:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
    pHandle->FinalAngle = startingAngle + angleStep;
 800aade:	edc4 5a02 	vstr	s11, [r4, #8]
  return (RetConfigStatus);
 800aae2:	e796      	b.n	800aa12 <TC_EncAlignmentCommand+0x56>
 800aae4:	3e638e39 	.word	0x3e638e39
 800aae8:	3de38e39 	.word	0x3de38e39
 800aaec:	38c90fdb 	.word	0x38c90fdb
 800aaf0:	3f060a92 	.word	0x3f060a92
 800aaf4:	40c90fdb 	.word	0x40c90fdb

0800aaf8 <TC_GetCurrentPosition>:
  * @brief  Returns the current rotor mechanical angle, expressed in radiant.
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval current mechanical position
  */
float TC_GetCurrentPosition(PosCtrl_Handle_t *pHandle)
{
 800aaf8:	b508      	push	{r3, lr}

  return ((float)( (SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16) );
 800aafa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800aafc:	f7ff fc54 	bl	800a3a8 <STC_GetSpeedSensor>
 800ab00:	f7ff fbfc 	bl	800a2fc <SPD_GetMecAngle>
 800ab04:	ee07 0a90 	vmov	s15, r0
 800ab08:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800ab0c:	eddf 7a02 	vldr	s15, [pc, #8]	; 800ab18 <TC_GetCurrentPosition+0x20>
}
 800ab10:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ab14:	bd08      	pop	{r3, pc}
 800ab16:	bf00      	nop
 800ab18:	38c90fdb 	.word	0x38c90fdb

0800ab1c <TC_GetTargetPosition>:
  * @retval Target mechanical position
  */
float TC_GetTargetPosition(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->FinalAngle);
}
 800ab1c:	ed90 0a02 	vldr	s0, [r0, #8]
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop

0800ab24 <TC_GetMoveDuration>:
  * @retval Duration of programmed movement
  */
float TC_GetMoveDuration(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->MovementDuration);
}
 800ab24:	ed90 0a00 	vldr	s0, [r0]
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop

0800ab2c <TC_GetControlPositionStatus>:
  * @retval Position Control Status
  */
PosCtrlStatus_t TC_GetControlPositionStatus(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->PositionCtrlStatus);
}
 800ab2c:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop

0800ab34 <TC_GetAlignmentStatus>:
  * @retval Alignment Status
  */
AlignStatus_t TC_GetAlignmentStatus(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->AlignmentStatus);
}
 800ab34:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop

0800ab3c <TC_IncTick>:
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_IncTick(PosCtrl_Handle_t *pHandle)
{
  pHandle->TcTick++;
 800ab3c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ab3e:	3301      	adds	r3, #1
 800ab40:	6583      	str	r3, [r0, #88]	; 0x58
}
 800ab42:	4770      	bx	lr

0800ab44 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800ab44:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800ab46:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 800ab48:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 800ab4a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800ab4e:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 800ab50:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800ab52:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 800ab54:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 800ab56:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 800ab58:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 800ab5a:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop

0800ab60 <VSS_Init>:
{
 800ab60:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 800ab62:	f7ff ffef 	bl	800ab44 <VSS_Clear>
}
 800ab66:	bd08      	pop	{r3, pc}

0800ab68 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800ab68:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 800ab6a:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 800ab6c:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800ab6e:	fb91 f1f3 	sdiv	r1, r1, r3
 800ab72:	80c1      	strh	r1, [r0, #6]
}
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop

0800ab78 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 800ab78:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800ab7a:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 800ab7e:	b984      	cbnz	r4, 800aba2 <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 800ab80:	b98a      	cbnz	r2, 800aba6 <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800ab82:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800ab84:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800ab86:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800ab88:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800ab8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ab8e:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800ab90:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800ab94:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800ab98:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 800ab9c:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800ab9e:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800aba0:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 800aba2:	bc70      	pop	{r4, r5, r6}
 800aba4:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800aba6:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 800aba8:	4d11      	ldr	r5, [pc, #68]	; (800abf0 <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800abaa:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800abac:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800abb0:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800abb2:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800abb6:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800abba:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800abbc:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800abbe:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800abc2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800abc6:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800abc8:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 800abcc:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800abce:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800abd2:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800abd6:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 800abd8:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800abda:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800abdc:	0412      	lsls	r2, r2, #16
 800abde:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800abe2:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800abe6:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 800abea:	8503      	strh	r3, [r0, #40]	; 0x28
}
 800abec:	bc70      	pop	{r4, r5, r6}
 800abee:	4770      	bx	lr
 800abf0:	10624dd3 	.word	0x10624dd3

0800abf4 <__libc_init_array>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	4d0d      	ldr	r5, [pc, #52]	; (800ac2c <__libc_init_array+0x38>)
 800abf8:	4c0d      	ldr	r4, [pc, #52]	; (800ac30 <__libc_init_array+0x3c>)
 800abfa:	1b64      	subs	r4, r4, r5
 800abfc:	10a4      	asrs	r4, r4, #2
 800abfe:	2600      	movs	r6, #0
 800ac00:	42a6      	cmp	r6, r4
 800ac02:	d109      	bne.n	800ac18 <__libc_init_array+0x24>
 800ac04:	4d0b      	ldr	r5, [pc, #44]	; (800ac34 <__libc_init_array+0x40>)
 800ac06:	4c0c      	ldr	r4, [pc, #48]	; (800ac38 <__libc_init_array+0x44>)
 800ac08:	f000 f82e 	bl	800ac68 <_init>
 800ac0c:	1b64      	subs	r4, r4, r5
 800ac0e:	10a4      	asrs	r4, r4, #2
 800ac10:	2600      	movs	r6, #0
 800ac12:	42a6      	cmp	r6, r4
 800ac14:	d105      	bne.n	800ac22 <__libc_init_array+0x2e>
 800ac16:	bd70      	pop	{r4, r5, r6, pc}
 800ac18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac1c:	4798      	blx	r3
 800ac1e:	3601      	adds	r6, #1
 800ac20:	e7ee      	b.n	800ac00 <__libc_init_array+0xc>
 800ac22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac26:	4798      	blx	r3
 800ac28:	3601      	adds	r6, #1
 800ac2a:	e7f2      	b.n	800ac12 <__libc_init_array+0x1e>
 800ac2c:	0800b058 	.word	0x0800b058
 800ac30:	0800b058 	.word	0x0800b058
 800ac34:	0800b058 	.word	0x0800b058
 800ac38:	0800b05c 	.word	0x0800b05c

0800ac3c <memcpy>:
 800ac3c:	440a      	add	r2, r1
 800ac3e:	4291      	cmp	r1, r2
 800ac40:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac44:	d100      	bne.n	800ac48 <memcpy+0xc>
 800ac46:	4770      	bx	lr
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac52:	4291      	cmp	r1, r2
 800ac54:	d1f9      	bne.n	800ac4a <memcpy+0xe>
 800ac56:	bd10      	pop	{r4, pc}

0800ac58 <memset>:
 800ac58:	4402      	add	r2, r0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d100      	bne.n	800ac62 <memset+0xa>
 800ac60:	4770      	bx	lr
 800ac62:	f803 1b01 	strb.w	r1, [r3], #1
 800ac66:	e7f9      	b.n	800ac5c <memset+0x4>

0800ac68 <_init>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	bf00      	nop
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr

0800ac74 <_fini>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	bf00      	nop
 800ac78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac7a:	bc08      	pop	{r3}
 800ac7c:	469e      	mov	lr, r3
 800ac7e:	4770      	bx	lr
